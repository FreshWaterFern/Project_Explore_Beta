<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This object does only contain the examples shown in the demo, and is not needed for your text inputs to work.
// You can take a look if you're curious, but as I've tried to keep it all in one object and one room for it to be easy to remove, there are a lot of magic numbers.

example = 0;
examples = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape)) game_end();

if (mouse_check_button_pressed(mb_left)) {
    if (mouse_y &gt; room_height - 80 &amp;&amp; ((mouse_x &gt; room_width - 90 &amp;&amp; (os_browser == browser_not_a_browser || example != examples - 1)) || (example != 0 &amp;&amp; mouse_x &lt; 90))) {
        if (mouse_x &lt; 90) --example; else ++example;
        with (obj_input_text) instance_destroy();
        switch (example) {
            case 1:
                var instance = input_text_create_singleline_ext((room_width &gt;&gt; 1) - 280, floor(room_height * 0.6), 560, ft_input_0, c_dkgray, 1, -1, fa_left, fa_middle, true, 0);
                input_text_set_enabled(instance, true);
                break;
                
            case 2:
                input_text_create_multiline_ext((room_width &gt;&gt; 2) - 238, floor(room_height * 0.35), 476, 318, ft_input_1, c_dkgray, 1, 476, -1, -1, -1, fa_left, fa_top, true, 0);
                input_text_create_multiline_ext(floor(room_width * 0.75) - 238, floor(room_height * 0.35), 476, 318, ft_input_1, c_dkgray, 1, -1, -1, -1, -1, fa_left, fa_top, true, 0);
                break;
            
            case 3:
                var align_x, align_y; align_x[0] = fa_left; align_x[1] = fa_center; align_x[2] = fa_right; align_y[0] = fa_top; align_y[1] = fa_middle; align_y[2] = fa_bottom;
                for (var t_y = 0; t_y &lt; 3; ++t_y) for (var t_x = 0; t_x &lt; 3; ++t_x)
                    input_text_create_multiline_ext((room_width &gt;&gt; 1) + (t_x - 1) * 550, (room_height &gt;&gt; 1) + (t_y - 1) * 220, 313, 96, ft_input_1, c_dkgray, 1, 313, -1, -1, -1, align_x[t_x], align_y[t_y], true, 0);
                break;
                
            case 4:
                input_text_create_multiline_ext((room_width &gt;&gt; 1) - 156, (room_height &gt;&gt; 1) - 120, 313, 96, ft_input_1, c_dkgray, 1, -1, -1, -1, -1, fa_left, fa_top, true, 0);
                input_text_create_multiline_ext((room_width &gt;&gt; 1) - 156, (room_height &gt;&gt; 1) + 30, 313, 96, ft_input_1, c_dkgray, 1, -1, -1, -1, -1, fa_left, fa_top, true, 1);
                input_text_create_multiline_ext((room_width &gt;&gt; 1) - 156, (room_height &gt;&gt; 1) + 180, 313, 96, ft_input_1, c_dkgray, 1, -1, -1, -1, -1, fa_left, fa_top, true, 2);
                break;
                
            case 5:
                rotated = input_text_create_singleline_ext((room_width &gt;&gt; 1) - 470, floor(room_height * 0.7), 400, ft_input_0, c_dkgray, 1, -1, fa_left, fa_middle, true, 0);
                input_text_set_transformation(rotated, rotated.x, rotated.y, 1, 1, 45);
                colorful = input_text_create_singleline_ext((room_width &gt;&gt; 1) + 120, floor(room_height * 0.5), 400, ft_input_0, $004499, 1, -1, fa_left, fa_middle, true, 0);
                input_text_set_misc(colorful, true, spr_input_text_cursor_default, 2, 32, c_black, 0.5, c_black, 0, true);
                vertical = input_text_create_multiline_ext((room_width &gt;&gt; 1), floor(room_height * 0.3), 84, 400, ft_input_0, c_dkgray, 1, 0, -1, -1, 38, fa_center, fa_top, true, 0);
                break;
                
            case 7:
                game_end();
                break;
        }
    }
    
    if (example == 2) with (obj_input_text) input_text_set_enabled(id, point_in_rectangle(mouse_x, mouse_y, x - 16, y - 16, x + width + 15, y + height + 15));
    if (example == 3 || example == 4) with (obj_input_text) input_text_set_enabled(id, point_in_rectangle(mouse_x, mouse_y, x - origin_x - 12, y - origin_y - 12, x - origin_x + width + 11, y - origin_y + height + 11));
    
    if (example == 5) with (obj_input_text){
        sprite_index = spr_input_3;
        if (id == other.vertical) image_angle -= 90;
        input_text_set_enabled(id, position_meeting(mouse_x, mouse_y, id));
        if (id == other.vertical) image_angle += 90;
        sprite_index = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_tiled(spr_background, 0, get_timer() * 0.00002, get_timer() * 0.00001);

switch (example) {
    case 0:
        draw_set_color(c_ltgray); draw_set_font(ft_info_big);
        draw_set_halign(fa_center); draw_set_valign(fa_middle);
        draw_text(room_width &gt;&gt; 1, room_height &gt;&gt; 1, "Poor input boxes make your game look and#feel unprofessional, and can ruin the important#first impression of a player. But they're a#pain to program properly.##With the Text Inputs extension you can avoid dozens#of hours of UI programming, and get high#quality text inputs in an instant!");
        break;
        
    case 1:
        draw_set_color(c_ltgray); draw_set_font(ft_info_small);
        draw_set_halign(fa_center); draw_set_valign(fa_middle);
        draw_text(room_width &gt;&gt; 1, room_height &gt;&gt; 2, "Here's an example. The extension supports text navigation, selection,#copying/pasting, undo/redo and more. When using the#extension, you can decide which features to include for each of your#text inputs. It's made entirely in GML and is very customizable.");
        with (obj_input_text) draw_sprite(spr_input_0, 0, x - 16, y);
        break;
        
    case 2:
        draw_set_color(c_ltgray); draw_set_font(ft_info_small);
        draw_set_halign(fa_center); draw_set_valign(fa_top);
        draw_text(room_width &gt;&gt; 1, 50, "A lot of work has gone into realizing multiline inputs.#Perfect for chat systems, ingame logs, signs, books, editors etc.#The left input is with text wrapping, the right is without.");
        with (obj_input_text) draw_sprite(spr_input_1, 0, x - 16, y - 16);
        break;
        
    case 3:
        draw_set_color(c_ltgray); draw_set_font(ft_info_small);
        draw_set_halign(fa_center); draw_set_valign(fa_top);
        draw_text(room_width &gt;&gt; 1, 50, "Text can be aligned horizontally and vertically in nine different ways.");
        with (obj_input_text) draw_sprite(spr_input_2, 0, x - origin_x - 12, y - origin_y - 12);
        break;
    
    case 4:
        draw_set_color(c_ltgray); draw_set_font(ft_info_small);
        draw_set_halign(fa_center); draw_set_valign(fa_top);
        draw_text(room_width &gt;&gt; 1, 50, "There are three different ways to fit the text inside its rectangle:#The default shifting, uniform scaling, and stretched scaling.");
        with (obj_input_text) draw_sprite(spr_input_2, 0, x - 12, y - 12);
        break;
        
    case 5:
        draw_set_color(c_ltgray); draw_set_font(ft_info_small);
        draw_set_halign(fa_center); draw_set_valign(fa_top);
        draw_text(room_width &gt;&gt; 1, 50, "You can scale, rotate, set character/line limits, choose color and alpha,#change text cursor sprite, remove or use another input background and more.");
        with (colorful) draw_sprite_ext(spr_input_3, 0, x, y, 1, 1, 0, c_orange, 1);
        with (rotated) draw_sprite_ext(spr_input_3, 0, x, y, 1, 1, image_angle, c_white, 1);
        with (vertical) draw_sprite_ext(spr_input_3, 0, x, y, 1, 1, -90, c_white, 1);
        break;
        
    case 6:
        draw_set_color(c_ltgray); draw_set_font(ft_info_big);
        draw_set_halign(fa_center); draw_set_valign(fa_middle);
        draw_text(room_width &gt;&gt; 1, room_height &gt;&gt; 1, "I hope that got you interested! You can#get the extension at the YoYo Games Marketplace.#Thanks for your attention.");
        break;
}

if (example == examples - 1) {
    if (os_browser == browser_not_a_browser) {
        draw_set_color(c_ltgray); draw_set_font(ft_info_small);
        draw_set_halign(fa_center); draw_set_valign(fa_middle);
        draw_text(room_width - 50, room_height - 45, "Quit");
    }
} else draw_sprite(spr_arrow, 0, room_width - 50, room_height - 45);
if (example != 0) draw_sprite_ext(spr_arrow, 0, 50, room_height - 45, -1, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
