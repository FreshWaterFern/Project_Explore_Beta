<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
if ( instance_number(obj_player) &lt; 2 )
{
// Tutorial Check
ini_open("settings.ini");
var tutorial = ini_read_real("tutorial","completed",0);
if ( tutorial == 0 )
{
instance_create(obj_player.x,obj_player.y,obj_tutorial_1);
}
ini_close();

collision_adjust();

// Player Variables
//pl_movespeed = 4; SHOULD BE 4
pl_knockback_cd = 0;
pl_knockback_time = 0;
pl_knockback_speed = 0;
pl_knockback_dir = 0;
pl_movespeed = 4;
pl_surface_type = 0;
pl_fs_dist = 0;
pl_fs_dist_max = 64;
pl_nearlight = false;
pl_refill_display = false;
pl_safety = 0;
pl_g_x = 0;
pl_g_y = 0;
pl_water_refill = 0;
pl_tree_chop = 0;
screencount = 0;
chunk_step = 0;
chunk_step_x = 0;
chunk_step_y = 0;

// Special Items
compass_equip = false;

// Frame Steps
mouse_frames = 0;

global.fishing_water_id = 0;
global.speed_multiplier = 0;
global.fishing_multiplier = 1;

// Flashlight
angle = image_angle+60;
accuracy = 2;
radius = 512;

load_x = x;
load_y = y;

v_leap_press_cd = 0;
v_leap_dir = "";
v_dashing = false;
v_dash_speed = 8;
v_dash_time = 0;
v_dashing_cd = 0;
v_weapon_cd = 0;
v_time_check = 0;
v_is_moving = false;

v_roof_check = 0;
v_roof_precision = 10;
v_indoors = false;
v_torch = false;
v_shovel = false;
v_terrain = false;
v_fishing = false;

v_shadowed = false;
v_gathering = false;
v_interact_obj = 0;
v_construct = false;

v_item_equipped = -1;
v_draw_equipped = false;
v_draw_equipped_sprite = 0;

v_con_x = 0;
v_con_y = 0;
v_con_col = false;
v_con_angle = 0;
v_con_walls = false;

ss_count = 0;

// Initialize Chunk Variables
global.chunk_x = floor(x/1280);
global.chunk_y = floor(y/1280);
previous_chunk_x = floor(x/1280);
previous_chunk_y = floor(y/1280);

audio_listener_set_orientation(0,0,250,0,0,0,0);

// Control Variables

ini_open("settings.ini");
key_up_main = real(ini_read_real("controls","MAIN_UP",ord('W')));
key_up_alt = real(ini_read_real("controls","ALT_UP",vk_up));
key_down_main = real(ini_read_real("controls","MAIN_DOWN",ord('S')));
key_down_alt = real(ini_read_real("controls","ALT_DOWN",vk_down));
key_left_main = real(ini_read_real("controls","MAIN_LEFT",ord('A')));
key_left_alt = real(ini_read_real("controls","ALT_LEFT",vk_left));
key_right_main = real(ini_read_real("controls","MAIN_RIGHT",ord('D')));
key_right_alt = real(ini_read_real("controls","ALT_RIGHT",vk_right));
key_inventory_main = real(ini_read_real("controls","MAIN_INVENTORY",ord('I')));
key_inventory_alt = real(ini_read_real("controls","ALT_INVENTORY",vk_tab));
key_walk_main = real(ini_read_real("controls","MAIN_WALK",vk_lshift));
key_walk_alt = real(ini_read_real("controls","ALT_WALK",vk_lcontrol));
key_interact_main = real(ini_read_real("controls","MAIN_INTERACT",ord('E')));
key_interact_alt = real(ini_read_real("controls","ALT_INTERACT",ord('F')));
ini_close();

key_pause_main = real(vk_escape);
key_pause_alt = real(vk_escape);
}
else
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TEST
/*
global.contactX = 0;
global.contactY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Player &amp; Construction

// Update distance travelled
if ( point_distance(x,y,xprevious,yprevious) &lt; 5 )
{global.distance_travelled += point_distance(x,y,xprevious,yprevious);}

// Update fishing multiplier
if ( global.fishing_multiplier &gt; 1 )
{global.fishing_multiplier -= 0.000075;}

// Check For Equipped Clothing
if ( inventory_get_item(global.equip_list[|0],0,0) == 0 ){
global.equip_list[|0]=0;global.clothing_head="";}
if ( inventory_get_item(global.equip_list[|1],0,0) == 0 ){
global.equip_list[|1]=0;global.clothing_body="";}


// Depth Update
depth = w3d_depth(x,y,-y);

// Check For Collisions
if ( instance_exists(obj_solid_parent) == true )
{if ( collision_rectangle(x-5,y-7,x+5,y+17,obj_solid_parent,false,true) != noone )
{x = xprevious;y = yprevious;}}

var inst = collision_point(x,y,obj_foundation_parent,false,true);
if ( inst == noone ){if ( instance_exists(obj_water_parent) ){if ( collision_rectangle(x-5,y-7,x+5,y+17,obj_water_parent,false,true) != noone ){
x = xprevious;y = yprevious;}}}

/*case 103: // Wood Chair
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            if ( mouse_wheel_up() == true)
            {
            v_con_angle += 90;
            }
            if ( mouse_wheel_down() == true)
            {
            v_con_angle -= 90;
            }
            if ( v_con_angle &gt;= 360 )
            {
            v_con_angle = 0;
            }
            if ( v_con_angle &lt;= -90 )
            {
            v_con_angle = 270;
            }
            inst = collision_circle(v_con_x,v_con_y,18,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,18,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,18,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }

// Check For Construct Collision &amp;&amp; Update Position &amp;&amp; Placement
/*
if ( global.render_gui_page == "none" )
{
if ( v_construct == true )
{
    var get_dir = point_direction(x,y,mouse_x,mouse_y);
    var clear_slot = false;
    switch(v_item_equipped)
    {
        case 5: // Wood Foundation
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            if ( collision_rectangle(v_con_x-(sprite_get_width(spr_foundation_wood)/2),v_con_y-(sprite_get_height(spr_foundation_wood)/2),v_con_x+(sprite_get_width(spr_foundation_wood)/2),v_con_y+(sprite_get_height(spr_foundation_wood)/2),obj_roof_parent,false,true) == noone )
            {
            inst = collision_rectangle(v_con_x-(sprite_get_width(spr_foundation_wood)/2)+8,v_con_y-(sprite_get_height(spr_foundation_wood)/2)+8,v_con_x+(sprite_get_width(spr_foundation_wood)/2)-8,v_con_y+(sprite_get_height(spr_foundation_wood)/2)-8,obj_water_parent,false,true);
            if ( inst == noone )
            {
            var inst = instance_nearest(v_con_x,v_con_y,obj_construct_foundation);
            if ( instance_exists(inst) == true )
            {
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 192 )
            {
            if ( point_distance(inst.snap_right,inst.y,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.snap_right+56,inst.y,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.snap_right+56;v_con_y = inst.y;v_con_col = false;
            with(inst){ds_list_replace(build_parts,0,1);}
            }
            }
            if ( point_distance(inst.x,inst.snap_up,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.x,inst.snap_up-56,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.x;v_con_y = inst.snap_up-56;v_con_col = false;
            with(inst){ds_list_replace(build_parts,1,1);}
            }
            }
            if ( point_distance(inst.snap_left,inst.y,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.snap_left-56,inst.y,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.snap_left-56;v_con_y = inst.y;v_con_col = false;
            with(inst){ds_list_replace(build_parts,2,1);}
            }
            }
            if ( point_distance(inst.x,inst.snap_down,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.x,inst.snap_down+56,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.x;v_con_y = inst.snap_down+56;v_con_col = false;
            with(inst){ds_list_replace(build_parts,3,1);}
            }
            }
            }
            }
            
                inst = collision_rectangle(v_con_x-(sprite_get_width(spr_foundation_wood)/2)+20,v_con_y-(sprite_get_height(spr_foundation_wood)/2)+20,v_con_x+(sprite_get_width(spr_foundation_wood)/2)-20,v_con_y+(sprite_get_height(spr_foundation_wood)/2)-20,obj_solid_parent,false,true);
                if ( inst != noone )
                {
                v_con_col = true;
                }
                else
                {
                v_con_col = false;
                inst = collision_rectangle(v_con_x-(sprite_get_width(spr_foundation_wood)/2)+20,v_con_y-(sprite_get_height(spr_foundation_wood)/2)+20,v_con_x+(sprite_get_width(spr_foundation_wood)/2)-20,v_con_y+(sprite_get_height(spr_foundation_wood)/2)-20,obj_foundation_parent,false,true);
                if ( inst == noone )
                {
                v_con_col = false;
                }
                else
                {
                v_con_col = true;
                }
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    instance_create(other.v_con_x,other.v_con_y,obj_construct_foundation);
                    if ( !steam_get_achievement("Laying The Foundation") )
                    {steam_set_achievement("Laying The Foundation");}
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(other.v_con_x,other.v_con_y,obj_construct_foundation);
                    if ( !steam_get_achievement("Laying The Foundation") )
                    {steam_set_achievement("Laying The Foundation");}
                }
            }}
            }
            else
            {
            v_con_col = true;
            inst = collision_rectangle(mouse_x-(sprite_get_width(spr_foundation_wood)/2),mouse_y-(sprite_get_height(spr_foundation_wood)/2),mouse_x+(sprite_get_width(spr_foundation_wood)/2),mouse_y+(sprite_get_height(spr_foundation_wood)/2),obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            var inst = instance_nearest(v_con_x,v_con_y,obj_construct_foundation);
            if ( instance_exists(inst) == true )
            {
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 192 )
            {
            if ( point_distance(inst.snap_right,inst.y,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.snap_right+56,inst.y,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.snap_right+56;v_con_y = inst.y;v_con_col = false;
            with(inst){ds_list_replace(build_parts,0,1);}
            }
            }
            if ( point_distance(inst.x,inst.snap_up,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.x,inst.snap_up-56,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.x;v_con_y = inst.snap_up-56;v_con_col = false;
            with(inst){ds_list_replace(build_parts,1,1);}
            }
            }
            if ( point_distance(inst.snap_left,inst.y,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.snap_left-56,inst.y,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.snap_left-56;v_con_y = inst.y;v_con_col = false;
            with(inst){ds_list_replace(build_parts,2,1);}
            }
            }
            if ( point_distance(inst.x,inst.snap_down,v_con_x,v_con_y) &lt; 112 )
            {
            if ( collision_point(inst.x,inst.snap_down+56,obj_foundation_parent,false,true) == noone )
            {
            v_con_x = inst.x;v_con_y = inst.snap_down+56;v_con_col = false;
            with(inst){ds_list_replace(build_parts,3,1);}
            }
            }
            }
            }
            
                inst = collision_rectangle(v_con_x-(sprite_get_width(spr_foundation_wood)/2)+20,v_con_y-(sprite_get_height(spr_foundation_wood)/2)+20,v_con_x+(sprite_get_width(spr_foundation_wood)/2)-20,v_con_y+(sprite_get_height(spr_foundation_wood)/2)-20,obj_solid_parent,false,true);
                if ( inst != noone )
                {
                v_con_col = true;
                }
                else
                {
                v_con_col = false;
                inst = collision_rectangle(v_con_x-(sprite_get_width(spr_foundation_wood)/2)+20,v_con_y-(sprite_get_height(spr_foundation_wood)/2)+20,v_con_x+(sprite_get_width(spr_foundation_wood)/2)-20,v_con_y+(sprite_get_height(spr_foundation_wood)/2)-20,obj_foundation_parent,false,true);
                if ( inst == noone )
                {
                v_con_col = false;
                }
                else
                {
                v_con_col = true;
                }
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    instance_create(other.v_con_x,other.v_con_y,obj_construct_foundation);
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(other.v_con_x,other.v_con_y,obj_construct_foundation);
                    if ( !steam_get_achievement("Laying The Foundation") )
                    {steam_set_achievement("Laying The Foundation");}
                }
            }}
            }
            }
            }
            else{v_con_col = true;}
        break;
        }
        
        case 6: // Wood Wall
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            v_con_angle = 0;
            var v_found = false;
            v_con_col = true;
            var inst = instance_nearest(v_con_x,v_con_y,obj_construct_foundation);
            if ( instance_exists(inst) == true )
            {
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 96 )
            {
            if ( point_distance(inst.snap_right,inst.y,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.snap_right;v_con_y = inst.y;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,0,1);}v_found = true;
            }
            if ( point_distance(inst.x,inst.snap_up,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.x;v_con_y = inst.snap_up;v_con_angle = 0;v_con_col = false;
            with(inst){ds_list_replace(build_parts,1,1);}v_found = true;
            }
            if ( point_distance(inst.snap_left,inst.y,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.snap_left;v_con_y = inst.y;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,2,1);}v_found = true;
            }
            if ( point_distance(inst.x,inst.snap_down,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.x;v_con_y = inst.snap_down;v_con_angle = 0;v_con_col = false;
            with(inst){ds_list_replace(build_parts,3,1);}v_found = true;
            }
            }
            if ( v_con_col == false )
            {
                if ( v_con_angle == 0 )
                {
                if ( collision_rectangle(v_con_x-40,v_con_y-10,v_con_x+40,v_con_y+10,obj_solid_parent,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-66,v_con_y-24,v_con_x+66,v_con_y+24,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_point(v_con_x,v_con_y,obj_construct_doorway,false,false) )
                {
                    v_con_col = true;
                }
                }
                }
                }
                else
                {
                if ( collision_rectangle(v_con_x-10,v_con_y-40,v_con_x+10,v_con_y+40,obj_solid_parent,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-24,v_con_y-66,v_con_x+24,v_con_y+66,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_point(v_con_x,v_con_y,obj_construct_doorway,false,false) )
                {
                    v_con_col = true;
                }
                }
                }
                }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_wall);
                    obj_inst.image_angle = v_con_angle;
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_wall);
                    obj_inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
                v_con_col = true;
            }
        break;
        }
        
        case 78: // Wood Pillar
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            var v_found = false;
            v_con_col = true;
            var inst = instance_nearest(v_con_x,v_con_y,obj_construct_foundation);
            if ( instance_exists(inst) == true )
            {
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 96 )
            {
            if ( point_distance(inst.snap_right,inst.y-56,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.snap_right;v_con_y = inst.y-56;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,0,1);}v_found = true;
            }
            if ( point_distance(inst.snap_right,inst.y+56,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.snap_right;v_con_y = inst.y+56;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,1,1);}v_found = true;
            }
            if ( point_distance(inst.snap_left,inst.y-56,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.snap_left;v_con_y = inst.y-56;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,2,1);}v_found = true;
            }
            if ( point_distance(inst.snap_left,inst.y+56,v_con_x,v_con_y) &lt; 48 &amp;&amp; v_found == false )
            {
            v_con_x = inst.snap_left;v_con_y = inst.y+56;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,3,1);}v_found = true;
            }
            }
            if ( v_con_col == false )
            {
                if ( collision_rectangle(v_con_x-4,v_con_y-4,v_con_x+4,v_con_y+4,obj_solid_parent,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-16,v_con_y-16,v_con_x+16,v_con_y+16,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_pillar);
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_pillar);
                }
            }}
            }
            else
            {
                v_con_col = true;
            }
        break;
        }
        
    case 7: // Wood Ceiling
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            v_con_angle = 0;
            v_con_col = true;
            var support_count = 0;
            var inst = collision_point(v_con_x,v_con_y,obj_construct_foundation,false,true);
            if (inst != noone ){
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 64 ){
            if ( collision_rectangle(inst.x-64,inst.y-64,inst.x-48,inst.y-48,obj_construct_wall,false,true) != noone or collision_rectangle(inst.x-64,inst.y-64,inst.x-48,inst.y-48,obj_construct_stone_wall,false,true) != noone or collision_rectangle(inst.x-64,inst.y-64,inst.x-48,inst.y-48,obj_construct_pillar,false,true) != noone ){support_count++}
            if ( collision_rectangle(inst.x+48,inst.y-64,inst.x+64,inst.y-48,obj_construct_wall,false,true) != noone or collision_rectangle(inst.x+48,inst.y-64,inst.x+64,inst.y-48,obj_construct_stone_wall,false,true) != noone or collision_rectangle(inst.x+48,inst.y-64,inst.x+64,inst.y-48,obj_construct_pillar,false,true) != noone ){support_count++}
            if ( collision_rectangle(inst.x+48,inst.y+48,inst.x+64,inst.y+64,obj_construct_wall,false,true) != noone or collision_rectangle(inst.x+48,inst.y+48,inst.x+64,inst.y+64,obj_construct_stone_wall,false,true) != noone or collision_rectangle(inst.x+48,inst.y+48,inst.x+64,inst.y+64,obj_construct_pillar,false,true) != noone ){support_count++}
            if ( collision_rectangle(inst.x-64,inst.y+48,inst.x-48,inst.y+64,obj_construct_wall,false,true) != noone or collision_rectangle(inst.x-64,inst.y+48,inst.x-48,inst.y+64,obj_construct_stone_wall,false,true) != noone or collision_rectangle(inst.x-64,inst.y+48,inst.x-48,inst.y+64,obj_construct_pillar,false,true) != noone ){support_count++}
            if ( support_count &gt;= 2 ){
            v_con_x = inst.x;v_con_y = inst.y;v_con_angle = 0;v_con_col = false;}
            if ( v_con_col == false )
            {
                if ( collision_point(v_con_x,v_con_y,obj_construct_ceiling,false,true) != noone )
                {
                    v_con_col = true;
                }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_ceiling);
                    with(inst){ds_list_replace(build_parts,4,1);}
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_ceiling);
                    with(inst){ds_list_replace(build_parts,4,1);}
                }
            }}
            }
            else
            {
                v_con_col = true;
            }
            }
            else
            {
                v_con_col = true;
            }
        break;
        }
        
        case 8: // Wood Doorway
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            v_con_angle = 0;
            v_con_col = true;
            var inst = instance_nearest(v_con_x,v_con_y,obj_construct_foundation);
            if ( instance_exists(inst) == true )
            {
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 96 )
            {
            if ( point_distance(inst.snap_right,inst.y,v_con_x,v_con_y) &lt; 48 )
            {
            v_con_x = inst.snap_right;v_con_y = inst.y;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,0,1);}
            }
            if ( point_distance(inst.x,inst.snap_up,v_con_x,v_con_y) &lt; 48 )
            {
            v_con_x = inst.x;v_con_y = inst.snap_up;v_con_angle = 0;v_con_col = false;
            with(inst){ds_list_replace(build_parts,1,1);}
            }
            if ( point_distance(inst.snap_left,inst.y,v_con_x,v_con_y) &lt; 48 )
            {
            v_con_x = inst.snap_left;v_con_y = inst.y;v_con_angle = 90;v_con_col = false;
            with(inst){ds_list_replace(build_parts,2,1);}
            }
            if ( point_distance(inst.x,inst.snap_down,v_con_x,v_con_y) &lt; 48 )
            {
            v_con_x = inst.x;v_con_y = inst.snap_down;v_con_angle = 0;v_con_col = false;
            with(inst){ds_list_replace(build_parts,3,1);}
            }
            }
            if ( v_con_col == false )
            {
                if ( v_con_angle == 0 )
                {
                if ( collision_rectangle(v_con_x-40,v_con_y-8,v_con_x+40,v_con_y+8,obj_solid_parent,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-66,v_con_y-24,v_con_x+66,v_con_y+24,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_point(v_con_x,v_con_y,obj_construct_doorway,false,false) )
                {
                    v_con_col = true;
                }
                }
                }
                }
                else
                {
                if ( collision_rectangle(v_con_x-8,v_con_y-40,v_con_x+8,v_con_y+40,obj_solid_parent,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-24,v_con_y-66,v_con_x+24,v_con_y+66,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_point(v_con_x,v_con_y,obj_construct_doorway,false,false) )
                {
                    v_con_col = true;
                }
                }
                }
                }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_doorway);
                    obj_inst.image_angle = v_con_angle;
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_doorway);
                    obj_inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
                v_con_col = true;
            }
        break;
        }
        
        case 57: // Wood Door
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            v_con_angle = 0;
            v_con_col = true;
            var inst = instance_nearest(v_con_x,v_con_y,obj_construct_doorway);
            if ( instance_exists(inst) == true )
            {
            if ( point_distance(v_con_x,v_con_y,inst.x,inst.y) &lt;= 96 )
            {
                if ( inst.image_angle == 0 )
                {
                v_con_x = inst.snap_x;v_con_y = inst.snap_y;v_con_angle = 0;v_con_col = false;
                if ( v_con_col == false )
                {
                if ( collision_circle(v_con_x,v_con_y,48,obj_construct_door,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-24,v_con_y-10,v_con_x+24,v_con_y+10,obj_player,false,false))
                {
                    v_con_col = true;
                }
                }
                }
                }
                else
                {
                v_con_x = inst.snap_x;v_con_y = inst.snap_y;v_con_angle = 90;v_con_col = false;
                if ( v_con_col == false )
                {
                if ( collision_circle(v_con_x,v_con_y,48,obj_construct_door,false,true) )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-10,v_con_y-24,v_con_x+10,v_con_y+24,obj_player,false,false))
                {
                    v_con_col = true;
                }
                }
                }
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                if ( v_con_col == false )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_door);
                    obj_inst.image_angle = v_con_angle;
                }
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var obj_inst = instance_create(v_con_x,v_con_y,obj_construct_door);
                    obj_inst.image_angle = v_con_angle;
                }
            }}
            }
            }
        break;
        }
        
        case 21: // Camp Fire
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,25,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,25,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,32,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_campfire);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_campfire);
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,25,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,32,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_campfire);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( v_con_col == false &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_campfire);
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 22: // Large Crate
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,32,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_largecrate);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_largecrate);
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,32,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_largecrate);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_largecrate);
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 23: // Big Fire
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,25,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,25,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,32,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_bigfire);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_bigfire);
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,25,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,32,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_bigfire);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_bigfire);
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 25: // Small Crate
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,18,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_smallcrate);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_smallcrate);
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,18,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_smallcrate);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_smallcrate);
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 28: // Lantern
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_lantern);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_lantern);
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_lantern);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_lantern);
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 29: // Fence
        {
            var fence_snap = false;
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            if ( mouse_wheel_up() == true)
                {
                if ( v_con_angle == 0 )
                {
                v_con_angle = 90;
                }
                else
                {
                v_con_angle = 0;
                }
                }
                if ( mouse_wheel_down() == true)
                {
                if ( v_con_angle == 90 )
                {
                v_con_angle = 0;
                }
                else
                {
                v_con_angle = 90;
                }
                }
            if ( v_con_angle == 0 )
            {
            inst = collision_rectangle(v_con_x-70,v_con_y-10,v_con_x+70,v_con_y+10,obj_construct_fence,false,false);
                if ( inst != noone )
                {
                    if ( inst.image_angle == 0 )
                    {
                        if ( point_distance(v_con_x+64,v_con_y,inst.x-64,inst.y) &lt; 64 )
                        {
                        v_con_x = inst.x-128;
                        v_con_y = inst.y;
                        fence_snap = true;
                        }
                        if ( point_distance(v_con_x-64,v_con_y,inst.x+64,inst.y) &lt; 64 )
                        {
                        v_con_x = inst.x+128;
                        v_con_y = inst.y;
                        fence_snap = true;
                        }
                    }
                    else
                    {
                        if ( point_distance(v_con_x-64,v_con_y,inst.x,inst.y-64) &lt; 64 )
                        {
                            v_con_x = inst.x+56;
                            v_con_y = inst.y-74;
                            fence_snap = true;
                        }
                        if ( point_distance(v_con_x+64,v_con_y,inst.x,inst.y-64) &lt; 64 )
                        {
                            v_con_x = inst.x-56;
                            v_con_y = inst.y-74;
                            fence_snap = true;
                        }
                        if ( point_distance(v_con_x-64,v_con_y,inst.x,inst.y+64) &lt; 64 )
                        {
                            v_con_x = inst.x+56;
                            v_con_y = inst.y+74;
                            fence_snap = true;
                        }
                        if ( point_distance(v_con_x+64,v_con_y,inst.x,inst.y+64) &lt; 64 )
                        {
                            v_con_x = inst.x-56;
                            v_con_y = inst.y+74;
                            fence_snap = true;
                        }
                    }
                }
            }
            else
            {
            inst = collision_rectangle(v_con_x-10,v_con_y-70,v_con_x+10,v_con_y+70,obj_construct_fence,false,false);
                if ( inst != noone )
                {
                    if ( inst.image_angle == 0 )
                    {
                        if ( point_distance(v_con_x,v_con_y+64,inst.x+64,inst.y) &lt; 64 )
                        {
                        v_con_x = inst.x+56;
                        v_con_y = inst.y-74;
                        fence_snap = true;
                        }
                        if ( point_distance(v_con_x,v_con_y+64,inst.x-64,inst.y) &lt; 64 )
                        {
                        v_con_x = inst.x-56;
                        v_con_y = inst.y-74;
                        fence_snap = true;
                        }
                        if ( point_distance(v_con_x,v_con_y-64,inst.x-64,inst.y) &lt; 64 )
                        {
                        v_con_x = inst.x-56;
                        v_con_y = inst.y+74;
                        fence_snap = true;
                        }
                        if ( point_distance(v_con_x,v_con_y-64,inst.x+64,inst.y) &lt; 64 )
                        {
                        v_con_x = inst.x+56;
                        v_con_y = inst.y+74;
                        fence_snap = true;
                        }
                    }
                    else
                    {
                        if ( point_distance(v_con_x,v_con_y+64,inst.x,inst.y-64) &lt; 64 )
                        {
                        v_con_x = inst.x;
                        v_con_y = inst.y-128;
                        fence_snap = true;
                        }
                        if ( point_distance(v_con_x,v_con_y-64,inst.x,inst.y+64) &lt; 64 )
                        {
                        v_con_x = inst.x;
                        v_con_y = inst.y+128;
                        fence_snap = true;
                        }
                    }
                }
            }
                
            if ( v_con_angle == 0 )
            {
            inst = collision_rectangle(v_con_x-64,v_con_y-10,v_con_x+64,v_con_y+10,obj_water_parent,false,false);
            }
            else
            {
            inst = collision_rectangle(v_con_x-10,v_con_y-64,v_con_x+10,v_con_y+64,obj_water_parent,false,false);
            }
            if ( inst == noone )
            {
                v_con_col = false;
                if ( v_con_angle == 0 )
                {
                if ( collision_rectangle(v_con_x-64,v_con_y-10,v_con_x+64,v_con_y+10,obj_solid_parent,false,false) != noone )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-66,v_con_y-24,v_con_x+66,v_con_y+24,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                }
                }
                else
                {
                if ( collision_rectangle(v_con_x-10,v_con_y-64,v_con_x+10,v_con_y+64,obj_solid_parent,false,false) != noone )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-24,v_con_y-66,v_con_x+24,v_con_y+66,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_fence);
                inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var inst = instance_create(v_con_x,v_con_y,obj_construct_fence);
                    inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            if ( v_con_angle == 0 )
            {
            inst = collision_rectangle(v_con_x-64,v_con_y-10,v_con_x+64,v_con_y+10,obj_foundation_parent,false,false)
            }
            else
            {
            inst = collision_rectangle(v_con_x-10,v_con_y-64,v_con_x+10,v_con_y+64,obj_foundation_parent,false,false)
            }
            if ( inst != noone )
            {
                v_con_col = false;
                if ( v_con_angle == 0 )
                {
                if ( collision_rectangle(v_con_x-64,v_con_y-10,v_con_x+64,v_con_y+10,obj_solid_parent,false,false) != noone )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-66,v_con_y-24,v_con_x+66,v_con_y+24,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                }
                }
                else
                {
                if ( collision_rectangle(v_con_x-10,v_con_y-64,v_con_x+10,v_con_y+64,obj_solid_parent,false,false) != noone )
                {
                    v_con_col = true;
                }
                else
                {
                if ( collision_rectangle(v_con_x-24,v_con_y-66,v_con_x+24,v_con_y+66,obj_player,false,false) )
                {
                    v_con_col = true;
                }
                }
                
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) )
            {
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_fence);
                inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    var inst = instance_create(v_con_x,v_con_y,obj_construct_fence);
                    inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 100: // Small Table
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_furn_table1);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_furn_table1);
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_furn_table1);
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    instance_create(v_con_x,v_con_y,obj_furn_table1);
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 103: // Wood Chair
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            if ( mouse_wheel_up() == true)
            {
            v_con_angle += 90;
            }
            if ( mouse_wheel_down() == true)
            {
            v_con_angle -= 90;
            }
            if ( v_con_angle &gt;= 360 )
            {
            v_con_angle = 0;
            }
            if ( v_con_angle &lt;= -90 )
            {
            v_con_angle = 270;
            }
            inst = collision_circle(v_con_x,v_con_y,18,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,18,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,18,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_furn_chair1);inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 104: // Wood Chest
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            if ( mouse_wheel_up() == true)
            {
            v_con_angle += 90;
            }
            if ( mouse_wheel_down() == true)
            {
            v_con_angle -= 90;
            }
            if ( v_con_angle &gt;= 360 )
            {
            v_con_angle = 0;
            }
            if ( v_con_angle &lt;= -90 )
            {
            v_con_angle = 270;
            }
            if ( v_con_angle == 0 or v_con_angle == 180 )
            {
            inst = collision_rectangle(v_con_x-28,v_con_y-16,v_con_x+28,v_con_y+16,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-28,v_con_y-16,v_con_x+28,v_con_y+16,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-40,v_con_y-28,v_con_x+40,v_con_y+28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-28,v_con_y-16,v_con_x+28,v_con_y+16,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-28,v_con_y-16,v_con_x+28,v_con_y+16,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            v_con_col = true;
            }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_woodchest1);inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_furn_woodchest1);inst.image_angle = v_con_angle;
                }
            }}
            }
            else
            {
            inst = collision_rectangle(v_con_x-16,v_con_y-28,v_con_x+16,v_con_y+28,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-16,v_con_y-28,v_con_x+16,v_con_y+28,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-16,v_con_y-28,v_con_x+16,v_con_y+28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-16,v_con_y-28,v_con_x+16,v_con_y+28,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-16,v_con_y-28,v_con_x+16,v_con_y+28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            v_con_col = true;
            }
            }
            if ( global.tablet_mode == 0 ){
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_woodchest1);inst.image_angle = v_con_angle;
            }
            }else{
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; v_con_col == false )
            {
                if ( point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 )
                {
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_furn_woodchest1);inst.image_angle = v_con_angle;
                }
            }}
            }
        break;
        }
        case 109: // Flag (Red)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 115: // Flag (Blue)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 1;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 116: // Flag (Green)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 2;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 117: // Flag (Pink)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 3;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 118: // Flag (Purple)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 4;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 119: // Flag (Yellow)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 5;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 120: // Flag (Orange)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 6;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 121: // Flag (Cyan)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 7;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 122: // Flag (White)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 8;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 123: // Flag (Black)
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                var inst = instance_create(v_con_x,v_con_y,obj_construct_flag);inst.flag_color = 9;
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                var i = 0;
                while(ds_list_find_index(global.waypoint_data_name,"Default"+string(i)) != -1 )
                {i++;}
                ds_list_add(global.waypoint_data_name,"Default"+string(i))
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
                inst.waypoint_name = ds_list_find_value(global.waypoint_data_name,inst.waypoint_index);
            }}
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {v_con_col = true;}
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_construct_flag);
                ds_list_add(global.waypoint_data_x,v_con_x);
                ds_list_add(global.waypoint_data_y,v_con_y);
                if ( ds_list_size(global.waypoint_data_name) != 0 )
                {ds_list_add(global.waypoint_data_name,"Default"+string(ds_list_size(global.waypoint_data_name)));}
                else
                {ds_list_add(global.waypoint_data_name,"Default0");}
                inst.waypoint_index = ds_list_size(global.waypoint_data_name)-1;
            }}else{v_con_col = true;}}
        break;
        }
        
        case 124: // Corn Seeds
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            v_con_x = floor((v_con_x/32))*32;v_con_y = floor((v_con_y/32))*32;
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_rectangle(v_con_x-16,v_con_y-16,v_con_x+16,v_con_y+16,obj_plant,false,true) != noone )
                {v_con_col = true;}
                if ( v_con_col == false )
                {
                    if ( keyboard_check(vk_shift) == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
                    {
                    if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_plant);inst.plant_type = 0;
                    steam_set_stat_int("crops_planted", steam_get_stat_int("crops_planted")+1);
                    }}
                    if ( keyboard_check(vk_shift) == true )
                    {
                    if ( mouse_check_button(mb_left) ){
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_plant);inst.plant_type = 0;
                    steam_set_stat_int("crops_planted", steam_get_stat_int("crops_planted")+1);
                    }}
                }
            }
        break;
        }
        
        case 126: // Potato
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            v_con_x = floor((v_con_x/32))*32;v_con_y = floor((v_con_y/32))*32;
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_rectangle(v_con_x-16,v_con_y-16,v_con_x+16,v_con_y+16,obj_plant,false,true) != noone )
                {v_con_col = true;}
                if ( v_con_col == false )
                {
                    if ( keyboard_check(vk_shift) == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
                    {
                    if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_plant);inst.plant_type = 1;
                    steam_set_stat_int("crops_planted", steam_get_stat_int("crops_planted")+1);
                    }}
                    if ( keyboard_check(vk_shift) == true )
                    {
                    if ( mouse_check_button(mb_left) ){
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_plant);inst.plant_type = 1;
                    steam_set_stat_int("crops_planted", steam_get_stat_int("crops_planted")+1);
                    }}
                }
            }
        break;
        }
        
        case 132: // Tomato Seeds
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {v_con_x = x+lengthdir_x(96,get_dir);v_con_y = y+lengthdir_y(96,get_dir);}
            else
            {v_con_x = mouse_x;v_con_y = mouse_y;}
            v_con_x = floor((v_con_x/32))*32;v_con_y = floor((v_con_y/32))*32;
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone ){
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {v_con_col = true;}
                if ( collision_rectangle(v_con_x-16,v_con_y-16,v_con_x+16,v_con_y+16,obj_plant,false,true) != noone )
                {v_con_col = true;}
                if ( v_con_col == false )
                {
                    if ( keyboard_check(vk_shift) == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
                    {
                    if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 60 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) ){
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_plant);inst.plant_type = 2;
                    steam_set_stat_int("crops_planted", steam_get_stat_int("crops_planted")+1);
                    }}
                    if ( keyboard_check(vk_shift) == true )
                    {
                    if ( mouse_check_button(mb_left) ){
                    clear_slot = true;
                    inst = instance_create(v_con_x,v_con_y,obj_plant);inst.plant_type = 2;
                    steam_set_stat_int("crops_planted", steam_get_stat_int("crops_planted")+1);
                    }}
                }
            }
        break;
        }
        
        case 133: // Forging Table
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            inst = collision_circle(v_con_x,v_con_y,24,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_furn_forgetable);
            }
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_circle(v_con_x,v_con_y,24,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_circle(v_con_x,v_con_y,28,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
            {
                clear_slot = true;
                instance_create(v_con_x,v_con_y,obj_furn_forgetable);
            }
            }
            else
            {
            v_con_col = true;
            }
            }
        break;
        }
        
        case 134: // Deconstruction Table
        {
            if ( point_distance(x,y,mouse_x,mouse_y) &gt; 96 )
            {
            v_con_x = x+lengthdir_x(96,get_dir);
            v_con_y = y+lengthdir_y(96,get_dir);
            }
            else
            {
            v_con_x = mouse_x;
            v_con_y = mouse_y;
            }
            if ( mouse_wheel_up() == true)
            {
            v_con_angle += 90;
            }
            if ( mouse_wheel_down() == true)
            {
            v_con_angle -= 90;
            }
            if ( v_con_angle &gt;= 360 )
            {
            v_con_angle = 0;
            }
            if ( v_con_angle &lt;= -90 )
            {
            v_con_angle = 270;
            }
            if ( v_con_angle == 0 or v_con_angle == 180 )
            {
            inst = collision_rectangle(v_con_x-48,v_con_y-16,v_con_x+48,v_con_y+16,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-48,v_con_y-16,v_con_x+48,v_con_y+16,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-48,v_con_y-16,v_con_x+48,v_con_y+16,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-48,v_con_y-16,v_con_x+48,v_con_y+16,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-48,v_con_y-16,v_con_x+48,v_con_y+16,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            v_con_col = true;
            }
            }
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_deconstructtable);inst.image_angle = v_con_angle;
            }
            }
            else
            {
            inst = collision_rectangle(v_con_x-16,v_con_y-48,v_con_x+16,v_con_y+48,obj_water_parent,false,true);
            if ( inst == noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-16,v_con_y-48,v_con_x+16,v_con_y+48,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-16,v_con_y-48,v_con_x+16,v_con_y+48,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            inst = collision_point(v_con_x,v_con_y,obj_foundation_parent,false,true);
            if ( inst != noone )
            {
            v_con_col = false;
                if ( collision_rectangle(v_con_x-16,v_con_y-48,v_con_x+16,v_con_y+48,obj_solid_parent,false,true) != noone )
                {
                    v_con_col = true;
                }
                if ( collision_rectangle(v_con_x-16,v_con_y-48,v_con_x+16,v_con_y+48,obj_player,false,false) != noone )
                {
                    v_con_col = true;
                }
            }
            else
            {
            v_con_col = true;
            }
            }
            if ( mouse_check_button_pressed(mb_left) &amp;&amp; v_con_col == false &amp;&amp; global.tablet_mode == 0 or (global.tablet_mode==1 &amp;&amp; point_distance(v_con_x,v_con_y,device_mouse_x(0),device_mouse_y(0)) &lt; 96 &amp;&amp; device_mouse_check_button_pressed(0,mb_left)) )
            {
                clear_slot = true;
                inst = instance_create(v_con_x,v_con_y,obj_furn_deconstructtable);inst.image_angle = v_con_angle;
            }
            }
        break;
        }
        
    }
    if ( clear_slot == true )
    {
        var cleared = false;
        var get_stack = 0;
        if ( ds_grid_get(global.c_inventory_hotbar,0,0) == v_item_equipped &amp;&amp; cleared == false )
        {
        get_stack = ds_grid_get(global.c_stack_hotbar,0,0);
        ds_grid_set(global.c_stack_hotbar,0,0,get_stack-1);
        if ( get_stack-1 == 0 )
        {
        ds_grid_set(global.c_inventory_hotbar,0,0,0);
        }
        cleared=true;
        }
        if ( ds_grid_get(global.c_inventory_hotbar,1,0) == v_item_equipped &amp;&amp; cleared == false )
        {
        get_stack = ds_grid_get(global.c_stack_hotbar,1,0);
        ds_grid_set(global.c_stack_hotbar,1,0,get_stack-1);
        if ( get_stack-1 == 0 )
        {
        ds_grid_set(global.c_inventory_hotbar,1,0,0);
        }
        cleared=true;
        }
        if ( ds_grid_get(global.c_inventory_hotbar,2,0) == v_item_equipped &amp;&amp; cleared == false )
        {
        get_stack = ds_grid_get(global.c_stack_hotbar,2,0);
        ds_grid_set(global.c_stack_hotbar,2,0,get_stack-1);
        if ( get_stack-1 == 0 )
        {
        ds_grid_set(global.c_inventory_hotbar,2,0,0);
        }
        cleared=true;
        }
        if ( ds_grid_get(global.c_inventory_hotbar,3,0) == v_item_equipped &amp;&amp; cleared == false )
        {
        get_stack = ds_grid_get(global.c_stack_hotbar,3,0);
        ds_grid_set(global.c_stack_hotbar,3,0,get_stack-1);
        if ( get_stack-1 == 0 )
        {
        ds_grid_set(global.c_inventory_hotbar,3,0,0);
        }
        cleared=true;
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Footstep Audio Handling

if ( y == yprevious )
{
pl_fs_dist += abs(x-xprevious);
}
else
{
pl_fs_dist += abs(x-xprevious)/1.1;
}
if ( x == xprevious )
{
pl_fs_dist += abs(y-yprevious);
}
else
{
pl_fs_dist += abs(y-yprevious)/1.1;
}

if ( pl_fs_dist &gt;= pl_fs_dist_max )
{
    pl_fs_dist = 0;
    var inst = collision_point(x,y,obj_foundation_parent,false,true);
    if ( inst == noone )
    {
    var i = floor(x/128);
    var r = floor(y/128);
    pl_surface_type = ds_grid_get(global.world_tiles,i,r);
    switch(pl_surface_type)
    {
        case 0:
        {
        var snd_id = choose(fs_grass1,fs_grass2,fs_grass3,fs_grass4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 1:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 2:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 3:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 4:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 5:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 6:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 7:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 8:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 9:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 10:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 11:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 15:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 16:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 17:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 18:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
        case 19:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
        audio_sound_gain(sound,0.25,0);
        break;
        }
    }
}
else
{
var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
var sound = audio_play_sound_at(snd_id,x,y,0,5,50,1,false,1);
audio_sound_gain(sound,0.25,0);
obj_game.c_sanity += 0.002;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Knockback Variables
if ( pl_knockback_time &gt; 0 )
{
if ( global.render_gui_page == "inventory" )
{
global.render_gui_page = "none";
global.render_characters = true;
global.render_world_tiles = true;
global.render_gui_1 = true;
global.render_world_shadows = true;
global.v_item_drop = false;
global.v_item_moving = false;
global.storage_id = 0;
}

// Check For Collisions
if ( collision_circle(x,y,32,obj_solid_parent,false,true) )
{
x += lengthdir_x(pl_knockback_speed,direction-180);
y += lengthdir_y(pl_knockback_speed,direction-180);
}
// Check For Collisions
if ( collision_circle(x,y,32,obj_water_parent,false,true) )
{
x += lengthdir_x(pl_knockback_speed,direction-180);
y += lengthdir_y(pl_knockback_speed,direction-180);
}
// Keep Player Inside Room
if ( x &gt; room_width )
{
    x -= 32;
}
if ( x &lt; 0 )
{
    x += 32;
}
if ( y &gt; room_height )
{
    y -= 32;
}
if ( y &lt; 0 )
{
    y += 32;
}

direction = pl_knockback_dir;
image_angle = -direction;
x += lengthdir_x(pl_knockback_speed,direction);
y += lengthdir_y(pl_knockback_speed,direction);
pl_knockback_time --;
}

if ( pl_knockback_cd &gt; 0 )
{
pl_knockback_cd --;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Current Chunk
global.chunk_x = floor(x/1280);
global.chunk_y = floor(y/1280);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For World Loading

if ( instance_exists(obj_game) ){
if ( obj_game.loading_step &gt; 4 )
{
if ( chunk_step == 0 )
{
if ( previous_chunk_x != global.chunk_x or previous_chunk_y != global.chunk_y )
{
if ( global.game_online == false )
{
chunk_update(global.chunk_x,global.chunk_y);
}
}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Controls
/*if ( keyboard_check_pressed(vk_backspace) )
{
    instance_create(x,y-128,obj_world_tree_1);
}
if ( keyboard_check_pressed(vk_insert) )
{
    instance_create(x+480,y,obj_ai_wolf);
}
*/
/*
if ( DEV_MODE == 1 )
{
//global.world_time = 16;
if ( keyboard_check_pressed(ord("O")) )
{
screencount++;
screen_save("PIC_"+string(screencount)+".png");
}
if ( keyboard_check_pressed(vk_enter) )
{
    var t1 = get_integer("item_id","1");
    var t2 = get_integer("stack","1");
    inventory_add(t1,t2,false);
}
}
/*
if ( keyboard_check_pressed(vk_up) )
{
steam_reset_all_stats(); 
steam_reset_all_stats_achievements();
}
if ( keyboard_check(vk_down) )
{
global.ss_fishcaught ++;
steam_set_stat_int("fish_caught",global.ss_fishcaught);
}
*/
/*
global.ss_wolfkills ++;
steam_set_stat_int("wolf_kills",global.ss_wolfkills);
global.ss_bearkills ++;
steam_set_stat_int("bear_kills",global.ss_bearkills);
//steam_reset_all_stats_achievements();
}
*/

if ( (keyboard_check_pressed(vk_escape) or global.escape_push == 1) &amp;&amp; global.render_gui_page == "none" &amp;&amp; global.game_pause == false )
{
    pause_game(0);
    io_clear();
}
global.escape_push = 0;
/*
if ( keyboard_check_pressed(ord('M')) == true )
{
    if ( global.render_world_map == false )
    {
        global.v_inventory_open = false;
        global.render_gui_inventory = false;
        global.render_gui_1 = false;
        global.render_world_shadows = false;
        obj_game.v_item_drop = false;
        obj_game.v_item_moving = false;
        obj_game.storage_id = 0;
        global.render_world_map = true;
        instance_create(view_xview,view_yview,obj_worldmap);
    }
    else
    {
        global.v_inventory_open = false;
        global.render_characters = true;
        global.render_world_tiles = true;
        global.render_gui_inventory = false;
        global.render_gui_1 = true;
        global.render_world_shadows = true;
        obj_game.v_item_drop = false;
        obj_game.v_item_moving = false;
        obj_game.storage_id = 0;
        global.render_world_map = false;
        with(obj_worldmap){instance_destroy();}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if indoors &amp; Weather
/*
var inst = collision_circle(x,y,10,obj_roof_parent,false,true);
var wall_right = collision_rectangle(x,y-48,x+128,y+48,obj_solid_parent,false,true);
var wall_left = collision_line(x-128,y-48,x,y+48,obj_solid_parent,false,true);
var wall_up = collision_line(x-48,y-128,x+48,y,obj_solid_parent,false,true);
var wall_down = collision_line(x-48,y,x+48,y+128,obj_solid_parent,false,true);
var wall_count = 0;

if ( inst != noone )
{v_indoors = true;}
else
{v_indoors = false;
if ( collision_point(x,y,obj_foundation_parent,false,true) )
{
if ( wall_right != noone ){wall_count ++;}
if ( wall_left != noone ){wall_count ++;}
if ( wall_up != noone ){wall_count ++;}
if ( wall_down != noone ){wall_count ++;}
if ( wall_count &gt;= 3 ){
v_indoors = true;}
}
}
if ( v_indoors == false ){
var num1 = 0;var num2 = 0;
if ( global.equip_list[|0] &gt; 0 ){
var list1 = convert_string_to_list(global.item_data[#global.equip_list[|0],7],",");num1 = real(list1[|0]);ds_list_destroy(list1);}
if ( global.equip_list[|1] &gt; 0 ){
var list2 = convert_string_to_list(global.item_data[#global.equip_list[|1],7],",");num2 = real(list2[|0]);ds_list_destroy(list2);}
var math_1 = (0.005*(global.weather_mode-3));var math_2 = num1 + num2;var math_3 = (math_1 * math_2);
if ( global.weather_mode &gt; 3 &amp;&amp; global.weather_mode &lt; 7 ){obj_game.c_health -= clamp(math_1 - math_3,0,100);}
if ( global.weather_mode &gt; 3 &amp;&amp; global.weather_mode &lt; 7 ){obj_game.c_thirst -= clamp((math_1*0.1) - math_3,0,100);}
if ( global.weather_mode &gt; 0 &amp;&amp; global.weather_mode &lt; 4 ){global.pl_sickchance++;}else{global.pl_sickchance-=2;}}
with(inst){roof_check()}*/

if ( global.pl_sickchance &gt; 1800 &amp;&amp; irandom(900) == 450 ){global.pl_sickness=irandom(9000)+18000;}
if ( global.pl_sickness &gt; 0 ){global.pl_sickness --;}
/*
// Update Roof Variables
ds_list_clear(global.roof_list);
if ( v_roof_check &lt; 0 ){v_roof_check=v_roof_precision-1;}else{v_roof_check --;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Indoor
v_indoors = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bleeding
if ( global.pl_bleeding &gt; 0 )
{
if ( instance_exists(obj_game) ){
obj_game.c_health -= 0.01;
}
global.pl_bleeding --;
if ( irandom(15) == 5 )
{
    if ( global.render_blood == 1 )
    {
    var blood_spr = choose("spr_bleeding_0","spr_bleeding_1","spr_bleeding_2");
    ds_list_add(global.ai_xdecal,other.x);
    ds_list_add(global.ai_ydecal,other.y);
    ds_list_add(global.ai_sdecal,blood_spr);
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check If Player Is Stuck
if ( collision_rectangle(x-5,y-5,x+5,y+5,obj_solid_parent,false,true) != noone )
{collision_adjust();}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.render_gui_page</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>"none"</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fishing script
global.fishing_water_id = noone;
if ( v_item_equipped == 74 )
{
    global.fishing_water_id = instance_position(x+lengthdir_x(32,image_angle+90),y+lengthdir_y(32,image_angle+90),obj_water_parent);
    if ( global.fishing_water_id != noone )
    {
    v_fishing = true;
    if ( mouse_check_button_pressed(mb_right) )
    {
    if ( global.sa_gettingfishy == false )
    {steam_set_achievement("Getting Fishy");global.sa_gettingfishy = true;}
    global.fishing_water_id.fishing = true;
    }
    }
    else
    {v_fishing = false;}
}
else
{v_fishing = false;if ( global.fishing_water_id != noone ){global.fishing_water_id.fishing = false;}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Water Refill/Drink Script
pl_refill_display = false;
if ( v_item_equipped == 101 )
{
if ( pl_water_refill &gt;= 100 )
{
    inventory_get_item(101,1,1);inventory_add(14,1,false);pl_water_refill = 0;
}
var inst = noone;
if ( instance_exists(obj_world_water2) ){inst = collision_circle(x,y,28,obj_world_water2,false,true);}
if ( inst != noone )
{
    pl_refill_display = true;
    if ( mouse_check_button(mb_right) == true or (global.tablet_mode == 1 &amp;&amp; device_mouse_check_button(0,mb_left) &amp;&amp; point_distance(device_mouse_x(0),device_mouse_y(0),x,y-48) &lt; 48) )
    {
    pl_refill_display = false;
    pl_water_refill += 0.43;
    }
    else
    {
    pl_water_refill = 0;
    }
}
else
{
if ( v_indoors == false &amp;&amp; global.weather_mode == 1 )
{
    pl_refill_display = true;
    if ( mouse_check_button(mb_right) == true or (global.tablet_mode == 1 &amp;&amp; device_mouse_check_button(0,mb_left) &amp;&amp; point_distance(device_mouse_x(0),device_mouse_y(0),x,y-48) &lt; 48) )
    {
    pl_refill_display = false;
    pl_water_refill += 0.2;
    }
    else
    {
    pl_water_refill = 0;
    }
}
else
{
pl_water_refill = 0;
}
}
}else{
if ( v_item_equipped == -1 ){
if ( instance_exists(obj_world_water2) ){inst = collision_circle(x,y,28,obj_world_water2,false,true);}else{inst = noone};
if ( inst != noone ){
pl_refill_display = true;
if ( mouse_check_button(mb_right) == true or (global.tablet_mode == 1 &amp;&amp; device_mouse_check_button(0,mb_left) &amp;&amp; point_distance(device_mouse_x(0),device_mouse_y(0),x,y-48) &lt; 48) )
{
pl_refill_display = false;
if ( pl_water_refill &gt;= 100 )
{obj_game.c_thirst+=10;obj_game.c_health+=7.5;pl_water_refill=0;
var inst = instance_create(x,y,obj_popup_resourcegain);
inst.text = "+15 Thirst";inst.v_color = c_teal;
var inst = instance_create(x,y-30,obj_popup_resourcegain);
inst.text = "+7.5 Health";inst.v_color = c_green;
}else{
pl_refill_display = false;
pl_water_refill += 0.46;}
}
else
{
pl_water_refill = 0;
}
}
else
{
pl_water_refill = 0;
}
}
else
{pl_water_refill = 0;}}

if ( mouse_check_button_released(mb_right) == true or (global.tablet_mode == 1 &amp;&amp; device_mouse_check_button_released(0,mb_left)) ){
pl_water_refill=0;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shovel Script
var inst = 0;
var i = floor((obj_player.x)/128)-1;
var r = floor((obj_player.y)/128)-1;
pl_g_x = i*128;
pl_g_y = r*128;
pl_surface_type = ds_grid_get(global.world_tiles,i,r);
var update_plants = false;

if ( v_item_equipped &gt; -1 ){
if ( global.item_data[#v_item_equipped,4] == 6 )
{
    if ( mouse_check_button_pressed(mb_right) == true )
    {
        obj_game_render.surface_update = true;
        switch(pl_surface_type)
        {
            case 0:
            {
            ds_grid_set(global.world_tiles,i,r,4);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Grass Surface");inst.item_stack=1;
            break;
            }
            case 6:
            {
            ds_grid_set(global.world_tiles,i,r,4);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Stone Surface");inst.item_stack=1;
            break;
            }
            case 7:
            {
            ds_grid_set(global.world_tiles,i,r,4);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Stone Tile Surface");inst.item_stack=1;
            break;
            }
            case 8:
            {
            ds_grid_set(global.world_tiles,i,r,4);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Wood Fine Surface");inst.item_stack=1;
            break;
            }
            case 10:
            {
            ds_grid_set(global.world_tiles,i,r,9);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Pile of Dirt");inst.item_stack=1;
            break;
            }
            case 11:
            {
            ds_grid_set(global.world_tiles,i,r,4);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Wood Old Surface");inst.item_stack=1;
            break;
            }
            case 15:
            {
            ds_grid_set(global.world_tiles,i,r,17);
            inst = instance_create(obj_player.x,obj_player.y,obj_item_dropped);
            inst.item_id=db_item_get_name("Pile of Sand");inst.item_stack=1;
            break;
            }
        }
    }
}
else
{
if ( global.item_data[#v_item_equipped,4] == 7 )
{
    if ( mouse_check_button_pressed(mb_right) == true )
    {
        if ( pl_surface_type == 4 or pl_surface_type == 9 or pl_surface_type == 16 or pl_surface_type == 17 )
        {
        obj_game_render.surface_update = true;
        switch(global.item_data[#v_item_equipped,0])
        {
            case "Grass Surface":
            {
            ds_grid_set(global.world_tiles,i,r,0);
            inventory_get_item(db_item_get_name("Grass Surface"),1,1);
            break;
            }
            case "Stone Surface":
            {
            ds_grid_set(global.world_tiles,i,r,6);
            inventory_get_item(db_item_get_name("Stone Surface"),1,1);
            break;
            }
            case "Stone Tile Surface":
            {
            ds_grid_set(global.world_tiles,i,r,7);
            inventory_get_item(db_item_get_name("Stone Tile Surface"),1,1);
            break;
            }
            case "Wood Old Surface":
            {
            ds_grid_set(global.world_tiles,i,r,11);
            inventory_get_item(db_item_get_name("Wood Old Surface"),1,1);
            break;
            }
            case "Wood Fine Surface":
            {
            ds_grid_set(global.world_tiles,i,r,8);
            inventory_get_item(db_item_get_name("Wood Fine Surface"),1,1);
            break;
            }
            case "Pile of Dirt":
            {
            ds_grid_set(global.world_tiles,i,r,10);
            inventory_get_item(db_item_get_name("Pile of Dirt"),1,1);
            break;
            }
             case "Pile of Sand":
            {
            ds_grid_set(global.world_tiles,i,r,15);
            inventory_get_item(db_item_get_name("Pile of Sand"),1,1);
            break;
            }
        }
        }
    }
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Compass Script
if ( pl_knockback_time == 0 &amp;&amp; global.render_gui_page == "none" )
{
if ( v_item_equipped == 82 )
{
    if ( mouse_check_button_pressed(mb_right) ){
    global.render_gui_page = "waypoint_set";
    instance_create(x,y,obj_waypoint_gui);}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
if ( instance_exists(obj_game) &amp;&amp; !global.con_window_active ){
if ( global.render_gui_page == "none" &amp;&amp; pl_knockback_time == 0 )
{
if ( v_dashing == false )
{
    v_is_moving = false;
    if ( keyboard_check(key_right_main) or keyboard_check(key_right_alt) or global.c_touch_right )
    {
        if ( keyboard_check(key_walk_main) or keyboard_check(key_walk_alt) or global.c_touch_walk )
        {
            if ( (!keyboard_check(key_up_main) &amp;&amp; !keyboard_check(key_down_main)) or (!keyboard_check(key_up_alt) &amp;&amp; !keyboard_check(key_down_alt)) )
            {
            x += pl_movespeed/2;image_xscale = 1;
            if ( global.speed_multiplier != 0 )
            {x += global.speed_multiplier/2;}
            }
            else
            {
            x += pl_movespeed/3.5;image_xscale = 1;
            if ( global.speed_multiplier != 0 )
            {x += global.speed_multiplier/3.5;}
            }
        }
        else
        {
        if ( (!keyboard_check(key_up_main) &amp;&amp; !keyboard_check(key_down_main)) &amp;&amp; (!keyboard_check(key_up_alt) &amp;&amp; !keyboard_check(key_down_alt)) )
        {
        // Right Direction Dash
        if ( v_leap_dir == "Right" &amp;&amp; v_leap_press_cd &gt; 0 &amp;&amp; v_dashing == false &amp;&amp; v_dashing_cd == 0 )
        {
        //if ( keyboard_check_pressed(key_right_main) or keyboard_check_pressed(key_right_alt) )
        if ( keyboard_check_pressed(vk_space) )
        {
        // DASH
        v_dashing = true;
        v_dash_time = 15;
        }
        }
        else
        {
        if ( v_dashing == false )
        {
        v_leap_press_cd = 10;
        v_leap_dir = "Right";
        }
        }
        // Movement
        x += pl_movespeed;image_xscale = 1;
        if ( global.speed_multiplier != 0 )
        {x += global.speed_multiplier;}
        }
        else
        {
        // Diagonal Speed (Running)
        x += pl_movespeed/1.5;image_xscale = 1;
        if ( global.speed_multiplier != 0 )
        {x += global.speed_multiplier/1.5;}
        }
        }
        v_is_moving = true;
    }
    if ( keyboard_check(key_left_main) or keyboard_check(key_left_alt) or global.c_touch_left )
    {
        if ( keyboard_check(key_walk_main) or keyboard_check(key_walk_alt) or global.c_touch_walk )
        {
            if ( (!keyboard_check(key_up_main) &amp;&amp; !keyboard_check(key_down_main)) or (!keyboard_check(key_up_alt) &amp;&amp; !keyboard_check(key_down_alt)) )
            {
            x -= pl_movespeed/2;image_xscale = -1;
            if ( global.speed_multiplier != 0 )
            {x -= global.speed_multiplier/2;}
            }
            else
            {
            x -= pl_movespeed/3.5;image_xscale = -1;
            if ( global.speed_multiplier != 0 )
            {x -= global.speed_multiplier/3.5;}
            }
        }
        else
        {
            if ( (!keyboard_check(key_up_main) &amp;&amp; !keyboard_check(key_down_main)) &amp;&amp; (!keyboard_check(key_up_alt) &amp;&amp; !keyboard_check(key_down_alt)) )
            {
            // Left Direction Dash
            if ( v_leap_dir == "Left" &amp;&amp; v_leap_press_cd &gt; 0 &amp;&amp; v_dashing == false &amp;&amp; v_dashing_cd == 0 )
            {
            //if ( keyboard_check_pressed(key_left_main) or keyboard_check_pressed(key_left_alt) )
            if ( keyboard_check_pressed(vk_space) )
            {
            // DASH
            v_dashing = true;
            v_dash_time = 15;
            }
            }
            else
            {
            if ( v_dashing == false )
            {
            v_leap_press_cd = 10;
            v_leap_dir = "Left";
            }
            }
            // Movement
            x -= pl_movespeed;image_xscale = -1;
            if ( global.speed_multiplier != 0 )
            {x -= global.speed_multiplier;}
            }
            else
            {
            // Diagonal Speed (Running)
            x -= pl_movespeed/1.5;image_xscale = -1;
            if ( global.speed_multiplier != 0 )
            {x -= global.speed_multiplier/1.5;}
            }
        }
        v_is_moving = true;
    }
    if ( keyboard_check(key_up_main) or keyboard_check(key_up_alt) or global.c_touch_up )
    {
        if ( keyboard_check(key_walk_main) or keyboard_check(key_walk_alt) or global.c_touch_walk )
        {
            if ( x == xprevious )
            { 
            y -= pl_movespeed/2;
            if ( global.speed_multiplier != 0 )
            {y -= global.speed_multiplier/2;}
            }
            else
            {
            y -= pl_movespeed/3.5;
            if ( global.speed_multiplier != 0 )
            {y -= global.speed_multiplier/3.5;}
            }
        }
        else
        {
            if ( x == xprevious )
            {
            // Up Direction Dash
            if ( v_leap_dir == "Up" &amp;&amp; v_leap_press_cd &gt; 0 &amp;&amp; v_dashing == false &amp;&amp; v_dashing_cd == 0 )
            {
            //if ( keyboard_check_pressed(key_up_main) or keyboard_check_pressed(key_up_alt) )
            if ( keyboard_check_pressed(vk_space) )
            {
            // DASH
            v_dashing = true;
            v_dash_time = 15;
            }
            }
            else
            {
            if ( v_dashing == false )
            {
            v_leap_press_cd = 10;
            v_leap_dir = "Up";
            }
            }
            // Movement
            y -= pl_movespeed;
            if ( global.speed_multiplier != 0 )
            {y -= global.speed_multiplier;}
            }
            else
            {
            // Diagonal Speed (Running)
            y -= pl_movespeed/1.5;
            if ( global.speed_multiplier != 0 )
            {y -= global.speed_multiplier/1.5;}
            }
        }
        v_is_moving = true;
    }
    if ( keyboard_check(key_down_main) or keyboard_check(key_down_alt) or global.c_touch_down )
    {
        if ( keyboard_check(key_walk_main) or keyboard_check(key_walk_alt) or global.c_touch_walk )
        {
            if ( x == xprevious )
            { 
            y += pl_movespeed/2;
            if ( global.speed_multiplier != 0 )
            {y += global.speed_multiplier/2;}
            }
            else
            {
            y += pl_movespeed/3.5;
            if ( global.speed_multiplier != 0 )
            {y += global.speed_multiplier/3.5;}
            }
        }
        else
        {
            if ( x == xprevious )
            {
            // Down Direction Dash
            if ( v_leap_dir == "Down" &amp;&amp; v_leap_press_cd &gt; 0 &amp;&amp; v_dashing == false &amp;&amp; v_dashing_cd == 0 )
            {
            //if ( keyboard_check_pressed(key_down_main) or keyboard_check_pressed(key_down_alt) )
            if ( keyboard_check_pressed(vk_space) )
            {
            // DASH
            v_dashing = true;
            v_dash_time = 15;
            }
            }
            else
            {
            if ( v_dashing == false )
            {
            v_leap_press_cd = 10;
            v_leap_dir = "Down";
            }
            }
            // Movement
            y += pl_movespeed;
            if ( global.speed_multiplier != 0 )
            {y += global.speed_multiplier;}
            }
            else
            {
            // Diagonal Speed (Running)
            y += pl_movespeed/1.5;
            if ( global.speed_multiplier != 0 )
            {y += global.speed_multiplier/1.5;}
            }
        }
        v_is_moving = true;
    }
    // Update our direction
    if ( global.tablet_mode == 0 )
    {image_angle = point_direction(x,y,mouse_x,mouse_y)-90;}
    else
    {if(global.c_touch_dc==1){image_angle = point_direction(x,y,global.touch_cache[0],global.touch_cache[1])-90;}}
    direction = image_angle;
    // Dash Press Cooldown
    if ( v_leap_press_cd &gt; 0 )
    {
    v_leap_press_cd --;
    }
    if ( v_dashing_cd &gt; 0 )
    {
    v_dashing_cd --;
    }
}
}

// Open Inventory
if ( global.tablet_mode == 1 ){if ( global.inventory_push == 1 ){keyboard_key_press(key_inventory_main)}else{keyboard_key_release(key_inventory_main);}}
if ( keyboard_check_pressed(key_inventory_main) or keyboard_check_pressed(key_inventory_alt) )
{
    if ( global.render_gui_page != "inventory" )
    {
        io_clear();
        v_gathering = false;
        global.render_gui_page = "inventory";
        global.render_gui_1 = false;
        inventory_ini_player();
        inventory_ini_searchbar();
    }
    else
    {
        var test = false;
        if ( instance_exists(obj_inv_itemsearch) ) // Is the user typing in the item search text field?
        {if ( obj_inv_itemsearch.select == false ){test = true;}}
        else
        {test=true;}
        if ( test == true ){
        global.render_gui_page = "none"
        global.render_characters = true;
        global.render_world_tiles = true;
        global.render_gui_inventory = false;
        global.render_gui_1 = true;
        global.render_world_shadows = true;
        global.v_item_drop = false;
        global.v_item_moving = false;
        global.storage_id = 0;
        /// Item Inventory Bonuses
        obj_game.slot_1_id = global.c_inventory_pack[#4,4];
        obj_game.slot_2_id = global.c_inventory_pack[#5,4];
        obj_game.slot_3_id = global.c_inventory_pack[#6,4];
        }
    }
}
if ( keyboard_check_pressed(vk_escape) == true )
{
        if ( global.render_gui_page != "none" )
        {
        global.render_gui_page = "none";
        global.render_characters = true;
        global.render_world_tiles = true;
        global.render_gui_1 = true;
        global.render_world_shadows = true;
        global.v_item_drop = false;
        global.v_item_moving = false;
        global.storage_id = 0;
        /// Item Inventory Bonuses
        obj_game.slot_1_id = global.c_inventory_pack[#4,4];
        obj_game.slot_2_id = global.c_inventory_pack[#5,4];
        obj_game.slot_3_id = global.c_inventory_pack[#6,4];
        io_clear();
        }
        if ( global.render_gui_page == "stats" )
        {
        global.render_gui_page = "none";
        global.render_characters = true;
        global.render_world_tiles = true;
        global.render_gui_1 = true;
        global.render_world_shadows = true;
        io_clear();
        }
}

global.inventory_push = 0;

// Open Stats
if ( keyboard_check_pressed(ord('C')) &amp;&amp; global.render_gui_page != "waypoint_build" )
{
    if ( global.render_gui_page != "stats" )
    {
        var pass = false;
        if ( global.render_gui_page == "inventory" )
        {if(instance_exists(obj_inv_itemsearch)){if ( obj_inv_itemsearch.select == false ){pass=true;}else{pass=false;}}}else{pass=true;}
        if ( pass == true ) // Check if the user is typing in the item search text field
        {
        io_clear();
        v_gathering = false;
        global.render_gui_page = "stats";
        global.render_gui_1 = false;
        }
    }
    else
    {
        global.render_gui_page = "none";
        global.render_characters = true;
        global.render_world_tiles = true;
        global.render_gui_1 = true;
        global.render_world_shadows = true;
    }
}
// Hotbar Controls

// Mouse Wheel controls for hotbar
var mouse_wheel_used = false;
if ( keyboard_check(vk_shift) )
{
if ( mouse_wheel_up() )
{
    mouse_wheel_used = true;
    obj_game.hotbar_alpha = 5;v_construct = false;
    if(obj_game.v_hotbar_set!=-1)
    {obj_game.v_hotbar_set++;}
    else
    {obj_game.v_hotbar_set=0;}
}
if ( mouse_wheel_down() )
{
    mouse_wheel_used = true;
    obj_game.hotbar_alpha = 5;v_construct = false;
    if(obj_game.v_hotbar_set!=-1)
    {obj_game.v_hotbar_set--;}
    else
    {obj_game.v_hotbar_set=3;}
}
// Check if obj_game.v_hotbar_set = 0 or = 3
if ( mouse_wheel_used == true )
{
v_construct = false;pl_water_refill = 0;
if ( obj_game.v_hotbar_set == -1 ){obj_game.v_hotbar_set=3;}
if ( obj_game.v_hotbar_set == 4 ){obj_game.v_hotbar_set=0;}
}
}

// 1-4 key controls for hotbar
if ( keyboard_check_pressed(ord('1')) )
{
    obj_game.hotbar_alpha = 5;
    v_construct = false;pl_water_refill = 0;
    obj_game.hotbar_alpha = 5;
    if(obj_game.v_hotbar_set!=0){obj_game.v_hotbar_set = 0;}else{obj_game.v_hotbar_set=-1;v_item_equipped=-1;}
}
if ( keyboard_check_pressed(ord('2')) )
{
    obj_game.hotbar_alpha = 5;
    v_construct = false;pl_water_refill = 0;
    obj_game.hotbar_alpha = 5;
    if(obj_game.v_hotbar_set!=1){obj_game.v_hotbar_set = 1;}else{obj_game.v_hotbar_set=-1;v_item_equipped=-1;}
}
if ( keyboard_check_pressed(ord('3')) )
{
    obj_game.hotbar_alpha = 5;
    v_construct = false;pl_water_refill = 0;
    obj_game.hotbar_alpha = 5;
    if(obj_game.v_hotbar_set!=2){obj_game.v_hotbar_set = 2;}else{obj_game.v_hotbar_set=-1;v_item_equipped=-1;}
}
if ( keyboard_check_pressed(ord('4')) )
{
    obj_game.hotbar_alpha = 5;
    v_construct = false;pl_water_refill = 0;
    obj_game.hotbar_alpha = 5;
    if(obj_game.v_hotbar_set!=3){obj_game.v_hotbar_set = 3;}else{obj_game.v_hotbar_set=-1;v_item_equipped=-1;}
}
    if ( obj_game.v_hotbar_set != -1 )
    {
    v_item_equipped = global.c_inventory_pack[#obj_game.v_hotbar_set,4];
        if ( item_get_data(v_item_equipped,4) == true )
        {
            v_draw_equipped = true;
            v_draw_equipped_sprite = global.c_inventory_pack[#v_item_equipped,2];
        } 
        else
        {
            v_draw_equipped = false;
            v_draw_equipped_sprite = 0;
        }
    }
    else
    {
    v_draw_equipped = false;
    v_draw_equipped_sprite = 0;
    v_construct = false;
    }
    v_terrain = false; // Reset Terrain State
    v_shovel = false; // Reset Shovel State
    
    // Right Click Use Hotbar Item
    if ( mouse_check_button_pressed(mb_right) &amp;&amp; global.render_gui_page == "none" &amp;&amp; v_item_equipped &gt; -1 ){
    db_item_use(v_item_equipped);
    }
    
    // Check if it is a constructive item
    if ( string(item_get_data(v_item_equipped,0)) == "" )
    {
    v_construct = false;
    }
    if ( v_construct == false )
    {
        switch(string(item_get_data(v_item_equipped,0)))
        {
            case "Corn Seeds":
            {
            v_construct = true;break;
            }
            case "Tomato Seeds":
            {
            v_construct = true;break;
            }
            case "Potato":
            {
            v_construct = true;break;
            }
            case "Flag (Red)":
            {
            v_construct = true;break;
            }
            case "Flag (Blue)":
            {
            v_construct = true;break;
            }
            case "Flag (Green)":
            {
            v_construct = true;break;
            }
            case "Flag (Pink)":
            {
            v_construct = true;break;
            }
            case "Flag (Purple)":
            {
            v_construct = true;break;
            }
            case "Flag (Yellow)":
            {
            v_construct = true;break;
            }
            case "Flag (Orange)":
            {
            v_construct = true;break;
            }
            case "Flag (Cyan)":
            {
            v_construct = true;break;
            }
            case "Flag (White)":
            {
            v_construct = true;break;
            }
            case "Flag (Black)":
            {
            v_construct = true;break;
            }
            case "Foundation":
            {
            v_construct = true;break;
            }
            case "Wall":
            {
            v_construct = true;break;
            }
            case "Pillar":
            {
            v_construct = true;break;
            }
            case "Doorway":
            {
            v_construct = true;break;
            }
            case "Wood Door":
            {
            v_construct = true;break;
            }
            case "Ceiling":
            {
            v_construct = true;break;
            }
            case "Fence":
            {
            v_construct = true;break;
            }
            case "Small Fire":
            {
            v_construct = true;break;
            }
            case "Large Crate":
            {
            v_construct = true;break;
            }
            case "Big Fire":
            {
            v_construct = true;break;
            }
            case "Small Crate":
            {
            v_construct = true;break;
            }
            case "Lantern":
            {
            v_construct = true;break;
            }
            case "Small Table":
            {
            v_construct = true;break;
            }
            case "Forging Table":
            {
            v_construct = true;break;
            }
            case "Deconstruction Table":
            {
            v_construct = true;break;
            }
            case "Wood Chair":
            {
            v_construct = true;break;
            }
            case "Wood Chest":
            {
            v_construct = true;break;
            }
            case "Shovel":
            {
            v_shovel = true;break;
            }
            case "Grass Surface":
            {
            v_terrain = true;break;
            }
            case "Fine Wood Surface":
            {
            v_terrain = true;break;
            }
            case "Old Wood Surface":
            {
            v_terrain = true;break;
            }
            case "Stone Tile Surface":
            {
            v_terrain = true;break;
            }
            case "Stone Surface":
            {
            v_terrain = true;break;
            }
            case "Pile Of Dirt":
            {
            v_terrain = true;break;
            }
            case "Pile Of Sand":
            {
            v_terrain = true;break;
            }
        }
    }
    // Check if item is a torch
    if ( string(item_get_data(v_item_equipped,0)) == "Torch" )
        {
        v_torch = true;
        }
        else
        {
        v_torch = false;
            if ( instance_number(obj_torch) != 0 )
            {
                with(obj_torch){instance_destroy();}
            }
        }
    // Check if the torch is already active
    if ( v_torch == true )
    {
        if ( instance_number(obj_torch) == 0 )
        {
        instance_create(x,y,obj_torch);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Player Dashing
if ( v_dashing == true &amp;&amp; v_dash_time &gt; 0 )
{
    switch(v_leap_dir)
    {
        case "Left":
        {
        image_angle = 90;
        x -= v_dash_speed;
        break;
        }
        case "Right":
        {
        image_angle = 270;
        x += v_dash_speed;
        break;
        }
        case "Up":
        {
        image_angle = 0;
        y -= v_dash_speed;
        break;
        }
        case "Down":
        {
        image_angle = 18;
        y += v_dash_speed;
        break;
        }
    }
    direction = image_angle;
}
if ( v_dash_time &lt;= 0 &amp;&amp; v_dashing == true )
{
v_dashing_cd = 40;
v_dashing = false;
}
else
{
v_dash_time --;
}

if ( v_dashing_cd &gt; 0 )
{
v_dashing_cd --;
    if ( v_dash_time &lt;= 0 )
    {
        x = xprevious;
        y = yprevious;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon Attack
if ( global.game_pause == false ){v_weapon_cd --;
if ( global.render_gui_page == "none" ){
if ( v_weapon_cd &lt;= 0 &amp;&amp; pl_knockback_time == 0 ){
if ( mouse_check_button(mb_right) &amp;&amp; v_item_equipped &gt; 0 ){
if ( global.item_data[#v_item_equipped,4] == 1 ){
var list = convert_string_to_list(global.item_data[#v_item_equipped,6],",");
var set_x = x+lengthdir_x(real(list[|5]),image_angle+90);
var set_y = y+lengthdir_y(real(list[|5]),image_angle+90);
var hit_type = 0;
v_weapon_cd = real(list[|4]);
switch(real(global.item_data[#v_item_equipped,7])){
case 0:{hit_type=obj_col_attack_swing;break;}}
var inst = instance_create(set_x,set_y,hit_type);
with(inst){
var data1 = convert_string_to_list(global.item_data[#other.v_item_equipped,6],",");
damage = real(data1[|0]);kb_cd = real(data1[|1]);kb_speed = real(data1[|2]);kb_time = real(data1[|3]);
range = real(data1[|5]);ds_list_destroy(data1);
var data2 = convert_string_to_list(global.item_data[#other.v_item_equipped,8],",");
tree_item = data2[|0];tree_stack = real(data2[|1]);rock_item = data2[|2];rock_stack = real(data2[|3]);
metal_item = data2[|4];metal_stack = real(data2[|5]);}
}
// Instance switch statement to find out type of attack to use
//var inst = instance_create(x+set_x,y+set_y,obj_col_attack_rock);
//inst.image_angle = image_angle+90;
}}}}
/*
    switch(v_item_equipped)
    {
        case 4: // Rock
        {
        var set_x = lengthdir_x(24,image_angle+90);
        var set_y = lengthdir_y(24,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_rock);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 80;
        break;
        }
        case 10: // Screw Driver
        {
        var set_x = lengthdir_x(26,image_angle+90);
        var set_y = lengthdir_y(26,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_screwdriver);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 30;
        break;
        }
        case 11: // Dull Knife
        {
        var set_x = lengthdir_x(28,image_angle+90);
        var set_y = lengthdir_y(28,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 35;
        break;
        }
        case 12: // Knife
        {
        var set_x = lengthdir_x(28,image_angle+90);
        var set_y = lengthdir_y(28,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 35;
        break;
        }
        case 13: // Sharp Knife
        {
        var set_x = lengthdir_x(28,image_angle+90);
        var set_y = lengthdir_y(28,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 35;
        break;
        }
        case 30: // Stone Axe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_stoneaxe);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 51: // Crowbar
        {
        var set_x = lengthdir_x(30,image_angle+90);
        var set_y = lengthdir_y(30,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 50;
        break;
        }
        case 58: // Wood Bow
        {
        var set_x = lengthdir_x(30,image_angle+90);
        var set_y = lengthdir_y(30,image_angle+90);
        if ( inventory_get_item(59,0,1) &gt; 0 )
        {
        inventory_get_item(59,1,1);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_arrow);
        inst.image_angle = point_direction(x,y,mouse_x,mouse_y);
        }
        v_weapon_cd = 60;
        break;
        }
        case 62: // Pistol (9mm)
        {

        if ( inventory_get_item(63,0,1) &gt; 0 )
        {
        inventory_get_item(63,1,1);
        instance_create(x,y,obj_muzzleflash_1);
        var inst = instance_create(x,y,obj_col_attack_bullet);
        inst.image_angle = point_direction(x,y,mouse_x,mouse_y);
        }
        v_weapon_cd = 17;
        break;
        }
        case 79: // Metal Axe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_metalaxe);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 70;
        break;
        }
        case 85: // Stone Pickaxe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_stonepick);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 90;
        break;
        }
        case 86: // Metal Pickaxe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_metalpick);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 90;
        break;
        }
        case 102: // Warding Stick
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_wardingstick);
        inst.image_angle = image_angle+90;
        var inst = instance_create(obj_player.x,obj_player.y,obj_popup_resourcegain);
        inst.text = "-5 Sanity";
        obj_game.c_sanity -= 5;
        v_weapon_cd = 90;
        break;
        }
        case 110: // Deer Antler
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_deerantler);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 127: // Frying Pan
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_fryingpan);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 128: // Wooden Sword
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_woodsword);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 40;
        break;
        }
        case 129: // Light Metal Sword
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_lightmetalsword);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 130: // Heavy Metal Sword
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_heavymetalsword);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 85;
        break;
        }
        default:{
        if ( mouse_check_button_pressed(mb_right) )
        {item_get_data(v_item_equipped,3);}}
    }
}
if ( global.c_touch_dc == 1 &amp;&amp; global.game_pause == false &amp;&amp; global.tablet_mode == 1 )
{
    switch(v_item_equipped)
    {
        case 4: // Rock
        {
        var set_x = lengthdir_x(24,image_angle+90);
        var set_y = lengthdir_y(24,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_rock);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 80;
        break;
        }
        case 10: // Screw Driver
        {
        var set_x = lengthdir_x(26,image_angle+90);
        var set_y = lengthdir_y(26,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_screwdriver);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 30;
        break;
        }
        case 11: // Dull Knife
        {
        var set_x = lengthdir_x(28,image_angle+90);
        var set_y = lengthdir_y(28,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 35;
        break;
        }
        case 12: // Knife
        {
        var set_x = lengthdir_x(28,image_angle+90);
        var set_y = lengthdir_y(28,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 35;
        break;
        }
        case 13: // Sharp Knife
        {
        var set_x = lengthdir_x(28,image_angle+90);
        var set_y = lengthdir_y(28,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 35;
        break;
        }
        case 30: // Stone Axe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_stoneaxe);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 51: // Crowbar
        {
        var set_x = lengthdir_x(30,image_angle+90);
        var set_y = lengthdir_y(30,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_knife);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 50;
        break;
        }
        case 58: // Wood Bow
        {
        var set_x = lengthdir_x(30,image_angle+90);
        var set_y = lengthdir_y(30,image_angle+90);
        if ( inventory_get_item(59,0,1) &gt; 0 )
        {
        inventory_get_item(59,1,1);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_arrow);
        inst.image_angle = point_direction(x,y,mouse_x,mouse_y);
        }
        v_weapon_cd = 60;
        break;
        }
        case 62: // Pistol (9mm)
        {

        if ( inventory_get_item(63,0,1) &gt; 0 )
        {
        inventory_get_item(63,1,1);
        instance_create(x,y,obj_muzzleflash_1);
        var inst = instance_create(x,y,obj_col_attack_bullet);
        inst.image_angle = point_direction(x,y,mouse_x,mouse_y);
        }
        v_weapon_cd = 17;
        break;
        }
        case 79: // Metal Axe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_metalaxe);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 70;
        break;
        }
        case 85: // Stone Pickaxe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        // Change the collision on this to be a larger swing
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_stonepick);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 90;
        break;
        }
        case 86: // Metal Pickaxe
        {
        var set_x = lengthdir_x(32,image_angle+90);
        var set_y = lengthdir_y(32,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_metalpick);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 90;
        break;
        }
        case 102: // Warding Stick
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_wardingstick);
        inst.image_angle = image_angle+90;
        var inst = instance_create(obj_player.x,obj_player.y,obj_popup_resourcegain);
        inst.text = "-5 Sanity";
        obj_game.c_sanity -= 5;
        v_weapon_cd = 90;
        break;
        }
        case 110: // Deer Antler
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_deerantler);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 127: // Frying Pan
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_fryingpan);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 128: // Wooden Sword
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_woodsword);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 40;
        break;
        }
        case 129: // Light Metal Sword
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_lightmetalsword);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 60;
        break;
        }
        case 130: // Heavy Metal Sword
        {
        var set_x = lengthdir_x(1,image_angle+90);
        var set_y = lengthdir_y(1,image_angle+90);
        var inst = instance_create(x+set_x,y+set_y,obj_col_attack_heavymetalsword);
        inst.image_angle = image_angle+90;
        v_weapon_cd = 85;
        break;
        }
        default:{
        if ( global.c_touch_dc == 1 )
        {item_get_data(v_item_equipped,3);}}
    }
}
}
else
{
v_weapon_cd --;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshot Control
if ( steam_is_screenshot_requested() )
{
    screen_save("PHOTO.png");
    steam_send_screenshot("PHOTO.png",1280,720);
    //file_delete("PHOTO.png");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keep Player Inside Room
if ( x-16 &lt; 0 or x+16 &gt; room_width )
{
    x = xprevious;exit;
}
if ( y-16 &lt; 0 or y+16 &gt; room_height )
{
    y = yprevious;exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// raytrace
/*
angle = image_angle+60;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Achievement Script
if ( global.sa_babysteps == false )
{
if ( x != xprevious &amp;&amp; y != yprevious )
{steam_set_achievement("Baby Steps");}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Mouse Prompt
var sprite_set = spr_mouse_image;
if ( pl_refill_display == true )
    {
    draw_set_alpha(1);draw_set_color(c_white);
    draw_sprite(sprite_set,mouse_frames,x,y-48);
    mouse_frames += 0.025;
    if ( mouse_frames &gt;= 2 ){mouse_frames = 0;}
    }
if ( global.fishing_water_id != noone &amp;&amp; global.tablet_mode == 0 )
{if ( global.fishing_water_id.fishing == false ){
    draw_set_alpha(1);draw_set_color(c_white);
    draw_sprite(sprite_set,mouse_frames,x,y-48);
    mouse_frames += 0.025;
    if ( mouse_frames &gt;= 2 ){mouse_frames = 0;}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Placement
if ( v_item_equipped &gt; 0 ){
if ( global.item_data[#v_item_equipped,4] == 2 ){ // Is it a world placement item?
var obj_id = db_object_get_name(global.item_data[#v_item_equipped,0]);
var place_sprite = global.object_data[#obj_id,2];
var is_rot = real(global.object_data[#obj_id,6]);

// Handle mouse movement and limited distance placement
var get_dir = point_direction(x,y,mouse_x,mouse_y);
if ( point_distance(x,y,mouse_x,mouse_y) &gt; real(global.item_data[#v_item_equipped,5]) )
{v_con_x = x+lengthdir_x(real(global.item_data[#v_item_equipped,5]),get_dir);v_con_y = y+lengthdir_y(real(global.item_data[#v_item_equipped,5]),get_dir);}
else
{v_con_x = mouse_x;v_con_y = mouse_y;}

// Handle rotations
if ( is_rot ){
if ( mouse_wheel_up() ){v_con_angle += 90;}
if ( mouse_wheel_down() ){v_con_angle -= 90;}
if ( v_con_angle &gt;= 360 ){v_con_angle = 0;}
if ( v_con_angle &lt;= -90 ){v_con_angle = 270;}}

// Check for water and collisions
var width = sprite_get_width(place_sprite)*0.5;var height = sprite_get_height(place_sprite)*0.5;var v_con_col = false;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_solid_parent,false,true) != noone ){v_con_col = true;}else{
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_player,false,false) != noone ){v_con_col = true;}else{
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_water_parent,false,true) != noone ){v_con_col = true;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_foundation_parent,false,true) != noone ){v_con_col = false;}}}}
if ( v_con_col == false ){
if ( mouse_check_button_pressed(mb_left) ){var obj_inst = 0;
switch(global.object_data[#obj_id,3]){
case 0:{obj_inst=obj_archetype_storage;break;}
case 1:{obj_inst=obj_archetype_basic;break;}
case 2:{obj_inst=obj_archetype_cooking;break;}}
player_create_object(v_con_x,v_con_y,obj_inst,v_con_angle); // Create instance
inventory_get_item(v_item_equipped,1,1);// Clear it from inventory
}}

// Draw hitbox
if ( !v_con_col ){var col = c_green;}else{var col = c_red;}
draw_sprite_ext(place_sprite,0,v_con_x,v_con_y,1,1,v_con_angle,col,0.75);

// Show arrow to indicate facing direction
draw_set_color(c_black);draw_set_alpha(0.5);
if ( is_rot ){
var dist = sprite_get_width(place_sprite)/1.5;
switch(v_con_angle){
case 0:draw_arrow(v_con_x-(dist*0.5),v_con_y,v_con_x+(dist*0.5),v_con_y,5)break;
case 90:draw_arrow(v_con_x,v_con_y+(dist*0.5),v_con_x,v_con_y-(dist*0.5),5)break;
case 180:draw_arrow(v_con_x+(dist*0.5),v_con_y,v_con_x-(dist*0.5),v_con_y,5)break;
case 270:draw_arrow(v_con_x,v_con_y-(dist*0.5),v_con_x,v_con_y+(dist*0.5),5)break;
}}draw_set_color(c_white);draw_set_alpha(1);

}



if ( global.item_data[#v_item_equipped,4] == 4 ){ // Is it a plantable item?
var _id = v_item_equipped;
var spr_list = global.item_data[#_id,2];
var place_sprite = spr_list[|ds_list_size(spr_list)-1];
var list = convert_string_to_list(global.item_data[#_id,6],",");
var place_range = list[|2];ds_list_destroy(list);

// Handle mouse movement and limited distance placement
var get_dir = point_direction(x,y,mouse_x,mouse_y);
if ( point_distance(x,y,mouse_x,mouse_y) &gt; real(place_range) )
{v_con_x = x+lengthdir_x(real(place_range),get_dir);v_con_y = y+lengthdir_y(real(place_range),get_dir);}
else
{v_con_x = mouse_x;v_con_y = mouse_y;}

v_con_x = (round(v_con_x/32))*32;v_con_y = (round(v_con_y/32))*32;


// Check for water and collisions
var width = sprite_get_width(place_sprite)*0.5;var height = sprite_get_height(place_sprite)*0.5;var v_con_col = false;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_solid_parent,false,true) != noone ){v_con_col = true;}else{
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_water_parent,false,true) != noone ){v_con_col = true;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_foundation_parent,false,true) != noone ){v_con_col = false;}}}
if ( v_con_col == false ){
if ( mouse_check_button_pressed(mb_left) ){var obj_inst = 0;
player_create_plant(v_con_x,v_con_y); // Create instance
inventory_get_item(v_item_equipped,1,1);// Clear it from inventory
}}

// Draw hitbox
if ( !v_con_col ){var col = c_green;}else{var col = c_red;}
var spr_height = sprite_external_get_height(ds_list_find_value(global.item_data[#_id,2],1));
draw_external_sprite_ext(place_sprite,0,v_con_x,v_con_y+(spr_height/2)-4,1,1,0,col,0.75);
draw_set_color(c_white);draw_set_alpha(1);
}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flashlight Test
/*
var i = 0;
var xld = x//round(x+lengthdir_x(12,direction));
var yld = y//round(y+lengthdir_y(12,direction));
draw_primitive_begin(pr_trianglefan);
draw_vertex_color(xld,yld,c_white,1);
for( i = angle-30; i &lt; angle+60+30; i += accuracy; ){
linecast(x,y,x+lengthdir_x(radius,i),y+lengthdir_y(radius,i),obj_solid_parent,false,true);
//draw_vertex_color(round(off_x),round(off_y),color,1 - point_distance(off_x,off_y,x,y) / radius);}
draw_vertex_color(global.contactX,global.contactY,c_white,1 - point_distance(global.contactX,global.contactY,x,y) / radius);}
draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Player
if ( global.render_characters == true )
{
var v_color = c_white;
if ( v_is_moving == true )
{
if ( keyboard_check(key_walk_main) or keyboard_check(key_walk_alt) )
{
image_speed = 0.25;
}
else
{
image_speed = 0.45;
}
}
else
{
image_index = 0;
image_speed = 0;
}

if ( v_item_equipped &gt; 0 ){
var item_type = global.item_data[#v_item_equipped,4];
if ( item_type == 1 or item_type == 6 ){ // If the item is the correct type to be drawn on the player
var list = convert_string_to_list(global.item_data[#v_item_equipped,5],",");
var spr_item = global.item_data[#v_item_equipped,2];
if ( real(list[|4]) != 0 &amp;&amp; real(list[|5]) != 0 ){
sprite_external_set_offset(spr_item,real(list[|4]),real(list[|5]));}
//draw_external_sprite(spr_item,0,x,y);
var y_math = y+lengthdir_y(real(list[|1]),direction+real(list[|3]));
var x_math = x+lengthdir_x(real(list[|0]),direction+real(list[|2]));
draw_external_sprite_ext(spr_item,1,x_math,y_math,0.8,0.8,image_angle,c_white,1);
spr = global.ds_char_skin_item[| global.char_skin];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);
ds_list_destroy(list);
sprite_external_set_offset(spr_item,sprite_external_get_width(spr_item)/2,sprite_external_get_height(spr_item)/2);
}}

var spr = global.ds_char_legs[| global.char_legs];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);

if ( v_draw_equipped == false )
{
spr = global.ds_char_skin_noitem[| global.char_skin];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);
}

spr = global.ds_char_shirt[| global.char_shirt];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);

// Body Clothing
if ( global.clothing_body != "" )
{spr = global.item_data[#global.equip_list[|1],5];
draw_external_sprite_ext(spr,0,x,y,1,1,image_angle,c_white,1);
}

// Head Clothing
if ( global.clothing_head != "" )
{spr = global.item_data[#global.equip_list[|0],5];
draw_external_sprite_ext(spr,0,x,y,1,1,image_angle,c_white,1);
}
else
{
// Render Hair
switch(global.char_hair_style)
{
    case 0:
    {
    spr = global.ds_char_hair1[| global.char_hair_color];break;
    }
    case 1:
    {
    spr = global.ds_char_hair2[| global.char_hair_color];break;
    }
    case 2:
    {
    spr = global.ds_char_hair3[| global.char_hair_color];break;
    }
    case 3:
    {
    spr = global.ds_char_hair4[| global.char_hair_color];break;
    }
    case 4:
    {
    spr = global.ds_char_hair5[| global.char_hair_color];break;
    }
    case 5:
    {
    spr = global.ds_char_hair6[| global.char_hair_color];break;
    }
    case 6:
    {
    spr = global.ds_char_hair7[| global.char_hair_color];break;
    }
    case 7:
    {
    spr = global.ds_char_hair8[| global.char_hair_color];break;
    }
    case 8:
    {
    spr = global.ds_char_hair9[| global.char_hair_color];break;
    }
}
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);
}

// Render Water Refill Rate
if ( pl_water_refill &gt; 0 )
{
draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(font_verdana_12);
draw_text_outline(string(pl_water_refill)+"%",x,y-28,c_white,c_black);
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,21</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
