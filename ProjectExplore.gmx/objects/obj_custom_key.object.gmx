<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_keyboard_key</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_name = "";
key_binding = 0;
key_bind_str = "";
alt_key_binding = 0;
alt_key_bind_str = "";
select_main = 0;
select_alt = 0;
key_pressed = 0;
alt_key_pressed = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse Handles
if ( mouse_x &gt; x-(sprite_width/2) &amp;&amp; mouse_x &lt; x+(sprite_width/2) )
{
    if ( mouse_y &gt; y-(sprite_height/2) &amp;&amp; mouse_y &lt; y+(sprite_height/2) )
    {
        select_main = 1;
        if ( mouse_check_button_pressed(mb_left) == true )
        {
        if ( key_pressed == false )
        {
        with(obj_custom_key){key_pressed=false;alt_key_pressed=false;select_main=0;select_alt=0;}
        alt_key_pressed = false;
        key_pressed = true;
        }
        else
        {
        key_pressed = false;
        }
        exit;
        }
    }
    else
    {
    select_main = 0;
    }
}
else
{
select_main = 0;
}

if ( mouse_x &gt; x+160-(sprite_width/2) &amp;&amp; mouse_x &lt; x+160+(sprite_width/2) )
{
    if ( mouse_y &gt; y-(sprite_height/2) &amp;&amp; mouse_y &lt; y+(sprite_height/2) )
    {
        select_alt = 1;
        if ( mouse_check_button_pressed(mb_left) == true )
        {
        if ( alt_key_pressed == false )
        {
        with(obj_custom_key){key_pressed=false;alt_key_pressed=false;}
        key_pressed = false;
        alt_key_pressed = true;
        }
        else
        {
        alt_key_pressed = false;
        }
        exit;
        }
    }
    else
    {
    select_alt = 0;
    }
}
else
{
select_alt = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Keyboard Input
if ( keyboard_check_pressed(vk_anykey) )
{
if ( key_pressed == true )
{
key_binding = keyboard_set_key(key_binding,keyboard_lastkey);
key_bind_str = keyboard_get_str(key_binding);
keyboard_save_controls(key_name,0,key_binding);
keyboard_lastkey = -1;
}

if ( alt_key_pressed == true )
{
alt_key_binding = keyboard_set_key(alt_key_binding,keyboard_lastkey);
alt_key_bind_str = keyboard_get_str(alt_key_binding);
keyboard_save_controls(key_name,1,alt_key_binding);
keyboard_lastkey = -1;
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_gulim_12);
draw_set_color(c_white);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_text(x-212,y,key_name);
draw_set_halign(fa_center);
draw_set_font(font_verdana_12);
if ( key_pressed == false )
{
draw_sprite(spr_keyboard_key,select_main,x,y);
}
else
{
draw_sprite(spr_keyboard_key,2,x,y);
}
draw_text(x,y,key_bind_str);

if ( alt_key_pressed == false )
{
draw_sprite(spr_keyboard_key,select_alt,x+160,y);
}
else
{
draw_sprite(spr_keyboard_key,2,x+160,y);
}
draw_text(x+160,y,alt_key_bind_str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,24</point>
    <point>48,48</point>
  </PhysicsShapePoints>
</object>
