<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_campfire</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000001</depth>
  <persistent>0</persistent>
  <parentName>obj_solid_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

is_enabled = false;
active = true;
selected = false;
obj_type = 0;
mouse_frames = 0;

c_inv = ds_grid_create(2,2);
c_stack = ds_grid_create(2,2);

burn_time = 0;
burn_spent = 0;
req_time = 0;

audio_emitter1 = audio_emitter_create();
audio_emitter_position(audio_emitter1,x,y,0);
audio_emitter_falloff(audio_emitter1,128,256,1);
audio_emitter_gain(audio_emitter1,1);
audio_index = 0;

world_obj_add(id);

col_orange = make_colour_rgb(210,112,0);;

ps_1 = part_system_create();
part_system_position(ps_1,x,y);
part_system_depth(ps_1,-9999999);
part_system_automatic_draw(ps_1,false);

ps_2 = part_system_create();
part_system_position(ps_2,x,y);
part_system_depth(ps_2,-y-512);
part_system_automatic_draw(ps_2,false);

pe_1 = part_emitter_create(ps_1);
pe_2 = part_emitter_create(ps_2);

// Smoke
pt_1 = part_type_create();
part_type_sprite(pt_1,spr_particle_cloud,false,false,false);
part_type_life(pt_1,140,180);
part_type_direction(pt_1,85,95,0,0);
part_type_speed(pt_1,1,2,0,0);
part_type_colour3(pt_1,c_gray,c_dkgray,c_black);
part_type_size(pt_1,0.5,0.65,0.02,0);
part_type_alpha3(pt_1,0.5,0.15,0);

// Fire
pt_2 = part_type_create();
part_type_sprite(pt_2,spr_particle_flare,false,false,false);
part_type_life(pt_2,45,45);
part_type_direction(pt_2,0,0,0,0);
part_type_speed(pt_2,0,0,0,0);
part_type_colour2(pt_2,col_orange,$0081BF);
part_type_size(pt_2,0.4,0.55,0.01,0);
part_type_alpha2(pt_2,0.75,0.1);
part_type_blend(pt_2,false);

// Fire Glow
pt_3 = part_type_create();
part_type_sprite(pt_3,spr_particle_sphere,false,false,false);
part_type_life(pt_3,25,120);
part_type_direction(pt_3,0,0,0,0);
part_type_speed(pt_3,0,0,0,0);
part_type_colour1(pt_3,$0081BF);
part_type_size(pt_3,4,5,0.05,0);
part_type_alpha2(pt_3,0.13,0.002);
part_type_blend(pt_3,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete Object From World
world_obj_delete(id);
part_system_destroy(ps_1);
part_system_destroy(ps_2);
part_type_destroy(pt_1);
part_type_destroy(pt_2);
part_type_destroy(pt_3);
audio_emitter_free(audio_emitter1);
var i = 0;
var r = 0;
var inst = 0;
var item = 0;
var stack = 0;
for(i=0;i&lt;2;i++)
{
    for(r=0;r&lt;2;r++)
    {
        item = ds_grid_get(c_inv,i,r);
        if ( item != 0 )
        {
        stack = ds_grid_get(c_stack,i,r);
        inst = instance_create(x,y,obj_item_dropped);
        inst.item_id = item;
        inst.item_stack = stack;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Status
world_obj_update(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Emit Particles
if ( is_enabled == true )
{
    if ( audio_index == 0 )
    {
    audio_index = audio_play_sound_on(audio_emitter1,snd_fire_loop1,true,3);
    }
    part_emitter_burst(ps_1,pe_1,pt_3,1);
    part_emitter_burst(ps_1,pe_1,pt_2,1);
    part_emitter_burst(ps_2,pe_2,pt_1,1);
    if ( global.render_particle_quality == 1 )
    {alarm[0]=5;}else{alarm[0]=8;}
}
else
{
alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth Update
if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
depth = w3d_depth(x,y,-y+8);
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check If Indoors
var inst = collision_circle(x,y,8,obj_roof_parent,false,true);
if ( inst != noone )
{v_indoors = true;}
else
{v_indoors = false;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Campfire Toggle &amp;&amp; Collision
if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
    if ( global.render_gui_page == "none" ){
    if ( global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 )
    {
        var x_draw = x-view_xview[0];var y_draw = y-view_yview[0];
        if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw-78,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
        {
            audio_play_sound(snd_click03,4,false);
            if ( is_enabled == true )
            {
            burn_time = 0;
            burn_spent = 0;
            is_enabled = false;
            }
            else
            {
            if ( global.weather_mode &lt;= 1 or global.weather_mode &gt;= 4 or v_indoors == true )
            {is_enabled = true;}
            }
            world_obj_update(id);
        }
        if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
        {
            audio_play_sound(snd_click03,4,false);
            io_clear();
            v_gathering = false;
            global.render_gui_page = "inventory";
            global.render_characters = true;
            global.render_world_tiles = true;
            global.render_gui_1 = false;
            global.render_world_shadows = false;
            global.storage_id = id;
            global.storage_type = 21;
            ds_grid_copy(global.c_inv_storage,c_inv);
            ds_grid_copy(global.c_stack_storage,c_stack);
            inventory_initiate(8);
        }
        if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw+78,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
        {
            var inst = instance_create(x,y,obj_item_dropped);
            inst.item_id = 21;
            inst.item_stack = 1;
            instance_destroy();
        }
        }
    // Check For Mouse
    if ( mouse_x &gt; x - sprite_width/2 &amp;&amp; mouse_x &lt; x + sprite_width/2 )
    {
        if ( mouse_y &gt; y - sprite_height/2 &amp;&amp; mouse_y &lt; y + sprite_height/2 )
        {
            if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 )
            {
            selected = true;
            if ( global.tablet_mode == 0 ){
            if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
            {
            if ( mouse_check_button_pressed(mb_left) )
            {
            audio_play_sound(snd_click03,4,false);
            if ( is_enabled == true )
            {
            burn_time = 0;
            burn_spent = 0;
            is_enabled = false;
            }
            else
            {
            if ( global.weather_mode &lt;= 1 or global.weather_mode &gt;= 4 or v_indoors == true )
            {is_enabled = true;}
            }
            world_obj_update(id);
            }
            else
            {
            if ( keyboard_check_pressed(obj_player.key_interact_main) or keyboard_check_pressed(obj_player.key_interact_alt) )
            {
            audio_play_sound(snd_click03,4,false);
            io_clear();
            v_gathering = false;
            global.render_gui_page = "inventory";
            global.render_characters = true;
            global.render_world_tiles = true;
            global.render_gui_1 = false;
            global.render_world_shadows = false;
            global.storage_id = id;
            global.storage_type = 21;
            ds_grid_copy(global.c_inv_storage,c_inv);
            ds_grid_copy(global.c_stack_storage,c_stack);
            inventory_initiate(8);
            }
            else
            {
            if ( mouse_check_button_pressed(mb_right) )
            {
                var inst = instance_create(x,y,obj_item_dropped);
                inst.item_id = 21;
                inst.item_stack = 1;
                instance_destroy();
            }}}}
            }
        }
        }
        else
        {
        selected = false;
        }
    }
    else
    {
    selected = false;
    }
    }
    else
    {
    selected = false;
    }
    if ( is_enabled == true )
    {
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 128 )
    {
    obj_game.c_temperature += 15;
    obj_player.pl_nearlight = true;
    if ( obj_game.v_lightlevel &gt; 0.8 )
    {
    obj_game.v_lightlevel = 0.8;
    }
    }
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 )
    {
    obj_game.c_temperature += 35;
    }
    }
}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Raining Check
if ( global.weather_mode &gt;= 1 &amp;&amp; global.weather_mode &lt;= 3 ){
if ( !v_indoors ){
burn_time = 0;
burn_spent = 0;
is_indoors = false;
is_enabled = false;
if ( audio_is_playing(audio_index) == true )
{
audio_stop_sound(audio_index);
audio_index = 0;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Burning
if ( is_enabled == false )
{
burn_time = 0;
burn_spent = 0;
}
else
{
var drop_item = false;
burn_time -= 0.0002;

// Get req_time from item in food slot
req_time=item_cook_conversion(c_inv[# 0,0],1);

if ( c_inv[# 0,1] == 3 ) // Wood
{
        if ( burn_time &lt;= 0.003 )
        {
        if ( c_stack[# 0,1] &gt; 0 )
        {
        c_stack[# 0,1]--;
        burn_time ++;
        if(c_stack[# 0,1]==0){c_inv[# 0,1]=0;}
        }
        if ( instance_exists(obj_inv_slot) )
        {
        with(obj_inv_slot){alarm[0]=1;}}
        }
}
else
{if ( c_inv[# 0,1] != 17 &amp;&amp; c_inv[# 0,1] != 154 ){if ( burn_time &lt;= 0 ){is_enabled = false;}}}
if ( c_inv[# 0,1] == 17 ) // Stick
{
        if ( burn_time &lt;= 0.003 )
        {
        if ( c_stack[# 0,1] &gt; 0 )
        {
        c_stack[# 0,1]--;
        burn_time += 0.5;
        if(c_stack[# 0,1]==0){c_inv[# 0,1]=0;}
        }
        if ( instance_exists(obj_inv_slot) )
        {
        with(obj_inv_slot){alarm[0]=1;}}
        }
}
else
{if(c_inv[# 0,1] != 154){if ( burn_time &lt;= 0 ){is_enabled = false;}}
else // Leaf
{
        if ( burn_time &lt;= 0.003 )
        {
        if ( c_stack[# 0,1] &gt; 0 )
        {
        c_stack[# 0,1]--;
        burn_time += 0.3;
        if(c_stack[# 0,1]==0){c_inv[# 0,1]=0;}
        }
        if ( instance_exists(obj_inv_slot) )
        {
        with(obj_inv_slot){alarm[0]=1;}}
        }
}
}
burn_time -= 0.0004;
if ( burn_time &gt; 0 )
{
    if ( burn_spent &lt; req_time )
    {
    if ( ds_list_find_index(global.cook_list,c_inv[# 0,0]) != -1 )
    {burn_spent += 0.002;}else{burn_spent=0;req_time=0;}exit;}
    else
    {
    if ( ds_list_find_index(global.cook_list,c_inv[# 0,0]) != -1 )
    {
    burn_spent=0;
    if ( c_inv[# 1,0] == item_cook_conversion(c_inv[# 0,0],0) )
    {
    if ( c_stack[# 1,0]+1 &lt;= item_get_data(item_cook_conversion(c_inv[# 0,0],0),6) )
    {c_stack[# 1,0]++;}else{drop_item = true;}
    }
    else{if ( c_inv[# 1,0] != 0 ){drop_item = true;}else{c_stack[# 1,0]++;c_inv[# 1,0]=item_cook_conversion(c_inv[# 0,0],0);}}
    if ( drop_item == true )
    {
    inst = instance_create(x,y,objind(obj_item_dropped));
    inst.item_id=item_cook_conversion(c_inv[# 0,0],0);inst.item_stack=1;
    }
    with(obj_inv_slot){alarm[0]=1;}
    c_stack[# 0,0]--;if ( c_stack[# 0,0] &lt;= 0 ){c_inv[# 0,0]=0;req_time=0;}
    }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Sound
if ( is_enabled == true )
{
    if ( audio_index == 0 )
    {
    audio_index = audio_play_sound_on(audio_emitter1,snd_fire_loop1,true,3);
    }
else
{
    if ( !audio_is_playing(audio_index) )
    {
    audio_index = audio_play_sound_on(audio_emitter1,snd_fire_loop1,true,3);
    }
}
}
else
{
if ( audio_is_playing(audio_index) )
{
audio_stop_sound(audio_index);
audio_index = 0;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(ps_1);
part_system_destroy(ps_2);
part_type_destroy(pt_1);
part_type_destroy(pt_2);
part_type_destroy(pt_3);
audio_emitter_free(audio_emitter1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Particles

if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
if ( global.render_gui_page == "none" ){
if ( is_enabled == true ){
draw_set_blend_mode(bm_add);
draw_sprite_ext(spr_lightglow_1,0,x,y,random(1),random(1),0,col_orange,random(0.2));
part_system_drawit(ps_1);
draw_set_blend_mode(bm_normal);}}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render GUI For Usage
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( selected == true or (global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64) )
{if ( v_indoors == obj_player.v_indoors ){
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) or (global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64) )
{
// Set font and alignment
if ( global.tablet_mode == 0 ){draw_set_font(font_gulim_12)}else{draw_set_font(font_gulim_18)}
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var offset_tabx = 0;var offset_taby = 0;var sprite_set = spr_mouse_image;
if ( global.tablet_mode == 1 ){offset_tabx = 14;offset_taby = 20;sprite_set = spr_gui_tablet_tapbutton;}
draw_sprite_ext(sprite_set,mouse_frames,x_draw-64-offset_tabx,y_draw-16-offset_taby,-1,1,0,c_white,1);
draw_sprite_ext(sprite_set,mouse_frames,x_draw+64+offset_tabx,y_draw-16-offset_taby,1,1,0,c_white,1);
if ( is_enabled )
{draw_text_outline("Extinguish",x_draw-64-offset_tabx,y_draw+8,c_white,c_black);}
else
{draw_text_outline("Ignite",x_draw-64-offset_tabx,y_draw+8,c_white,c_black);}
if ( global.tablet_mode == 0 ){
draw_set_font(font_gulim_28);
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_interact_main)),x_draw,y_draw-16,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_interact_main)),x_draw,y_draw-16,c_dkgray,c_black);}
draw_set_font(font_gulim_12);}
else
{
draw_sprite_ext(sprite_set,mouse_frames,x_draw,y_draw-16-offset_taby,1,1,0,c_white,1);
}
draw_text_outline("Destroy",x_draw+64+offset_tabx,y_draw+8,c_white,c_black);
draw_text_outline("Open",x_draw,y_draw+8,c_white,c_black);
}
else
{
if ( global.tablet_mode == 0 ){
// Set font and alignment
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}
}}}

/*
/// Render GUI For Usage
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( v_indoors == obj_player.v_indoors ){
if ( selected == true )
{
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) or (global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64) )
{
// Set font and alignment
if ( global.tablet_mode == 0 ){draw_set_font(font_gulim_12)}else{draw_set_font(font_gulim_18)}
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var offset_tabx = 0;var offset_taby = 0;var sprite_set = spr_mouse_image;
if ( global.tablet_mode == 1 ){offset_tabx = 16;offset_taby = 20;sprite_set = spr_gui_tablet_tapbutton;}
draw_sprite_ext(sprite_set,mouse_frames,x_draw-32-offset_tabx,y_draw-16-offset_taby,-1,1,0,c_white,1);
draw_sprite_ext(sprite_set,mouse_frames,x_draw+32+offset_tabx,y_draw-16-offset_taby,1,1,0,c_white,1);
draw_text_outline("Open",x_draw-32-offset_tabx,y_draw+8,c_white,c_black);
draw_text_outline("Destroy",x_draw+32+offset_tabx,y_draw+8,c_white,c_black);
}
else
{
if ( global.tablet_mode == 0 ){
// Set font and alignment
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
if ( active == true ){
if ( global.render_gui_page == "none" ){
    if ( selected == true or (global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64) )
    {
    draw_set_color(c_green);
    draw_set_alpha(0.25);
    draw_circle(x,y,56,false);
    draw_set_alpha(1);
    }
    if ( is_enabled == true )
    {draw_sprite_ext(spr_lightglow_1,0,x,y,random(1),random(1),0,col_orange,0.5);} 
    w3d_draw_sprite_ext(sprite_index,0,x,y,0,image_xscale,image_yscale,image_angle,c_white,1);
    part_system_drawit(ps_2);
    }
    if ( global.render_gui_page == "none" )
    {
    if ( selected == true &amp;&amp; global.tablet_mode != 1 )
    {
    draw_set_color(c_green);
    draw_set_alpha(0.25);
    draw_circle(x,y,56,false);
    draw_set_alpha(1);
    }
    if ( is_enabled == true )
    {draw_sprite_ext(spr_lightglow_1,0,x,y,random(1),random(1),0,col_orange,0.5);}
    w3d_draw_sprite_ext(sprite_index,0,x,y,0,image_xscale,image_yscale,image_angle,c_white,1);
    part_system_drawit(ps_2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>25,25</point>
    <point>25,25</point>
  </PhysicsShapePoints>
</object>
