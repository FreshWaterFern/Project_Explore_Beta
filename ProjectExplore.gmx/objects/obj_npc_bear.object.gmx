<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_predator_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate AI
ai_path_id = path_add();
ai_path_set = false;
ai_path_update = 60;
ai_update_time = 5;
ai_update_tick = irandom(ai_update_time);
ai_test_path = false;
ai_sprite_frame = 0;
ai_sprite = spr_bear_down;
ai_dir = 0;
ai_bleeding = 0;
ai_hit = 0;
index = 0;
ai_dead = false;
ai_attack_cd = 0;
ai_damage_bite = 10;
ai_expand_search = 0;
ai_reproduce_cd = 0;
ai_knockback_cd = 0;
ai_knockback_time = 0;
ai_knockback_speed = 0;
ai_knockback_dir = 0;
update_count = 0;
image_speed = 0.2;
path_point[0]=0;path_point[1]=0;
inst_cache=0;
v_speed = 3.5;
v_maxspeed = 3.5;
path_try = 0;
death_frames = 0;
death_time = 0;
destroy_obj = false;
move_dir = 0;

collision_adjust();

// NPC stats
npc_food = 100;
npc_thirst = 100;
npc_health = 100;
npc_anger = 0;
npc_fear = 0;
npc_heat = 50;
state = "idle";

c_temperature = 0;

v_bury_prompt = false;

pl_surface_type = 0;
pl_fs_dist = 0;
pl_fs_dist_max = 64;

world_obj_add(id);

/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>world_obj_delete(id);
path_delete(ai_path_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Move Speed
v_speed = v_maxspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Depth
if ( active == true )
{
depth = w3d_depth(x,y,-y);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Footstep Audio Handling

if ( y == yprevious )
{
pl_fs_dist += abs(x-xprevious);
}
else
{
pl_fs_dist += abs(x-xprevious)/1.1;
}
if ( x == xprevious )
{
pl_fs_dist += abs(y-yprevious);
}
else
{
pl_fs_dist += abs(y-yprevious)/1.1;
}

if ( pl_fs_dist &gt;= pl_fs_dist_max )
{
    pl_fs_dist = 0;
    var i = round(other.x/128);
    var r = round(other.y/128);
    pl_surface_type = ds_grid_get(global.world_tiles,i,r);
    switch(pl_surface_type)
    {
        case 0:
        {
        var snd_id = choose(fs_grass1,fs_grass2,fs_grass3,fs_grass4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 1:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 2:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 3:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 4:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 5:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 6:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 7:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 8:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 9:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 10:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 11:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 15:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 16:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update World Data
world_obj_update(id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Knockback Variables And Hit Time
if ( ai_knockback_time &gt; 0 )
{
ai_hit = true;
ai_knockback_time --;
path_end();

if ( ai_knockback_cd &gt; 0 )
{
ai_knockback_cd --;
}

if ( ai_knockback_time &gt; 0 )
{
// Check For Collisions
if ( collision_circle(x,y,32,obj_solid_parent,false,true) )
{
x += lengthdir_x(ai_knockback_speed,direction-180);
y += lengthdir_y(ai_knockback_speed,direction-180);
}
else
{
direction = ai_knockback_dir;
x += lengthdir_x(ai_knockback_speed,direction);
y += lengthdir_y(ai_knockback_speed,direction);
}
// Check For Collisions
if ( collision_circle(x,y,32,obj_water_parent,false,true) )
{
x += lengthdir_x(ai_knockback_speed,direction-180);
y += lengthdir_y(ai_knockback_speed,direction-180);
}
else
{
direction = ai_knockback_dir;
x += lengthdir_x(ai_knockback_speed,direction);
y += lengthdir_y(ai_knockback_speed,direction);
}
// Keep NPC Inside Room
if ( x-16 &lt; 0 or x+16 &gt; room_width )
{
    x = xprevious;
}
if ( y-16 &lt; 0 or y+16 &gt; room_height )
{
    y = yprevious;
}
}
}
else
{
ai_hit = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{active = true;}
else
{active = false;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update NPC

if ( !ai_dead ){
// Temperature Based Hunger/Thirst, Heat
var s1 = ds_grid_get(global.world_temperature,floor(x/512),floor(y/512));
var s2 = ds_grid_get(global.world_temperature,floor(x/512)-1,floor(y/512));
var s3 = ds_grid_get(global.world_temperature,floor(x/512)+1,floor(y/512));
var s4 = ds_grid_get(global.world_temperature,floor(x/512),floor(y/512)-1);
var s5 = ds_grid_get(global.world_temperature,floor(x/512),floor(y/512)+1);
if ( s2 == undefined ){s2=s1;}if ( s3 == undefined ){s3=s1;}
if ( s4 == undefined ){s4=s1;}if ( s5 == undefined ){s5=s1;}
c_temperature = mean(s1,s2,s3,s4,s5,global.world_temperature_base);
npc_get_temperature(c_temperature);

if ( c_temperature &lt; 50 ){npc_heat-=0.0002;}
if ( c_temperature &lt; 65 ){npc_heat-=0.0002;}
if ( c_temperature &gt;= 65 &amp;&amp; c_temperature &lt; 81 ){if (npc_heat &gt; 50){npc_heat-=0.0001;}if (npc_heat &lt; 50){npc_heat+=0.0001;}}
if ( c_temperature &gt; 80 ){npc_heat+=0.0002;}
if ( c_temperature &gt; 90 ){npc_heat+=0.0001;}
if ( c_temperature &gt; 100 ){npc_heat+=0.0002;}

// Health Regeneration
if ( npc_food &gt;= 90 &amp;&amp; npc_thirst &gt;= 90 ){npc_health += 0.0025;}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update State
ai_update_tick++;
if ( npc_health &lt;= 0 ){ai_dead = true;ai_knockback_time=0;ai_nockback_cd=0;ai_hit=false;}
if ( ai_update_tick &gt;= ai_update_time ){ai_update_tick = 0;
var inst = 0;
var path_test = false;
image_speed=0;
if ( !ai_dead &amp;&amp; !ai_hit ){
var dist_math = point_distance(x,y,obj_player.x,obj_player.y);
if ( dist_math &lt; 350 ){npc_anger += 0.06;npc_fear += 0.004;} // Good
if ( dist_math &lt; 275 ){npc_anger += 0.02;npc_fear += 0.002;} // Betterz
//if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1 ){npc_anger += 0.07;npc_fear += 1;} // Testing
ai_dir = direction-1;
switch(state)
{
    case "idle":
    {
    var search = false;
    if(npc_heat &lt; 25){state="cold";update_count=0;}else{search=true}
    if(npc_heat &gt; 75){state="hot";update_count=0;}else{search=true}
    if(npc_food &lt; 60){state="hungry";update_count=0;}else{search=true}
    if(npc_thirst &lt; 60){state="thirsty";update_count=0;}else{search=true}
    if(npc_anger &gt; 25){state="angry";update_count=0;}else{search=true}
    if(npc_fear &gt; 25){state="scared";update_count=0;}else{search=true}
    if(search){
    if ( ai_reproduce_cd &lt;= 0 ){
    inst = collision_circle(x,y,1300,obj_npc_bear,false,true);if ( inst == noone ){path_point[0]=0;path_point[1]=0;}
    if ( inst != noone ){
    if ( point_distance(x,y,inst.x,inst.y) &lt; 1400 ){path_point[0]=floor(inst.x/16)*16;path_point[1]=floor(inst.y/16)*16;}else{path_point[0]=0;path_point[1]=0;}}
    if ( !ai_path_set ){ai_path_set=true;  
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/2,0,true);}
    }else{
    move_dir=random_range(move_dir-(30*ai_expand_search),move_dir+(30*ai_expand_search));ai_path_set=true;ai_dir = point_direction(x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir));
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir),true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/1.5,0,true);ai_expand_search=1;}else{ai_expand_search+=0.25;}
    }}else{
    update_count++;
    if(30 &lt;= update_count){update_count=0;ai_path_set=false;}}
    inst = collision_circle(x,y,32,obj_npc_bear,false,true);
    if ( inst != noone ){state="reproduce";update_count=0;path_end();ai_path_set=false;inst_cache=inst;}
    }else{
    if ( !ai_path_set ){ai_path_set=true;
    move_dir=random_range(move_dir-(30*ai_expand_search),move_dir+(30*ai_expand_search));ai_path_set=true;ai_dir = point_direction(x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir));
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir),true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/2,0,true);ai_expand_search=1;}else{ai_expand_search+=0.25;}}
    update_count++;
    if(15 == update_count){update_count=0;ai_path_set=false;}}
    }
    break;
    }
    case "hungry":
    {
    if(npc_anger &gt; 25){state="angry"}
    if(npc_fear &gt; 25){state="scared"}
    if ( instance_exists(obj_food_bush_parent) ){inst = instance_nearest(x,y,obj_food_bush_parent);}else{inst=noone;path_point[0]=0;path_point[1]=0;
    if ( instance_exists(obj_prey_parent) ){inst = instance_nearest(x,y,obj_prey_parent);}else{inst=noone;path_point[0]=0;path_point[1]=0;}}
    if ( inst != noone ){
    if ( point_distance(x,y,inst.x,inst.y) &lt; 1500 ){path_point[0]=floor(inst.x/16)*16;path_point[1]=floor(inst.y/16)*16;inst_cache=inst;}else{path_point[0]=0;path_point[1]=0;}}
    if ( !ai_path_set ){
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){
    ai_path_set=true;
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}}}}
    }else{
    move_dir=random_range(move_dir-30,move_dir+30);ai_path_set=true;ai_dir = point_direction(x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir));
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir),true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/1.5,0,true);ai_expand_search=1;}else{ai_expand_search+=0.25;}
    }}else{
    update_count++;
    if(10 == update_count){update_count=0;ai_path_set=false;}}
    inst = collision_circle(x,y,32,obj_prey_parent,false,true);
    inst = collision_circle(x,y,32,obj_food_bush_parent,false,true);
    if ( inst != noone ){if(inst==obj_prey_parent){inst.ai_dead=true;}else{inst.leaf_status=0;}state="eating";update_count=0;path_end();ai_path_set=false;inst_cache=inst;}
    break;
    }
    case "thirsty":
    {
    if(npc_anger &gt; 25){state="angry"}
    if(npc_fear &gt; 25){state="scared"}
    if ( instance_exists(obj_world_water2) ){inst = instance_nearest(x,y,obj_world_water2);}else{inst=noone;path_point[0]=0;path_point[1]=0;}
    if ( inst != noone ){
    if ( point_distance(x,y,inst.x,inst.y) &lt; 1400 ){path_point[0]=floor(inst.x/16)*16;path_point[1]=floor(inst.y/16)*16;}else{path_point[0]=0;path_point[1]=0;}}
    if ( !ai_path_set ){
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){
    ai_path_set=true;
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0]+64,path_point[1]+144,true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/2,0,true);}else{
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0]+64,path_point[1]-16,true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/2,0,true);}else{
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0]-16,path_point[1]+64,true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/2,0,true);}else{
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0]+144,path_point[1]+64,true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/2,0,true);}}}}
    }else{
    move_dir=random_range(move_dir-(30*ai_expand_search),move_dir+(30*ai_expand_search));ai_path_set=true;ai_dir = point_direction(x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir));
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir),true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed/1.5,0,true);ai_expand_search=1;}else{ai_expand_search+=0.25;move_dir=-move_dir;}
    }}else{
    update_count++;
    if(ai_path_update == update_count){update_count=0;ai_path_set=false;}}
    inst = collision_circle(x,y,24,obj_world_water2,false,true);
    if ( inst != noone ){state="drinking";update_count=0;path_end();ai_path_set=false;inst_cache=inst;}
    break;
    }
    case "drinking":
    {
    if ( instance_exists(inst_cache) ){
    ai_dir = point_direction(x,y,inst_cache.x,inst_cache.y);}else{state="idle"}
    if(npc_anger &gt; 25){state="angry"}
    if(npc_fear &gt; 25){state="scared"}
    if ( npc_thirst &lt; 99 ){npc_thirst += 0.04;}else{state="idle";}
    update_count=0;
    break;
    }
    case "eating":
    {
    if ( instance_exists(inst_cache) ){
    ai_dir = point_direction(x,y,inst_cache.x,inst_cache.y);}else{state="idle"}
    if(npc_anger &gt; 25){state="angry"}
    if(npc_fear &gt; 25){state="scared"}
    if ( npc_food &lt; 99 ){npc_food += 0.0525;}else{state="idle";}
    update_count=0;
    break;
    }
    case "reproduce":
    {
    ai_dir = point_direction(x,y,inst_cache.x,inst_cache.y);
    if(npc_anger &gt; 25){state="angry"}
    if(npc_fear &gt; 25){state="scared"}
    if ( ai_reproduce_cd &lt;= 0 ){ai_reproduce_cd = 2600;}else{state="idle";
    if ( instance_position(x,y+48,obj_npc_bear) == noone &amp;&amp; instance_position(inst_cache.x,inst_cache.y+48,obj_npc_bear) == noone ){
    inst = instance_create(x,y+48,obj_npc_bear);inst.ai_reproduce_cd = 2600;}}
    update_count=0;
    break;
    }
    case "angry":
    {
    npc_anger -= 0.002;
    if(npc_anger &lt;= 25){state="idle"}else{
    if ( ai_attack_cd &lt;= 0 ){
    inst = instance_nearest(x,y,obj_player);
    path_point[0]=floor(inst.x/16)*16;path_point[1]=floor(inst.y/16)*16;
    if ( inst != noone ){path_point[0]=inst.x;path_point[1]=inst.y;}
    if ( !ai_path_set ){ai_path_set=true;
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){
    
    if ( path_try == 0 &amp;&amp; !path_test ){path_test=true;ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);path_try=0;}else{path_point[0]=inst.x;path_point[1]=inst.y+256;path_try++;}
    
    if ( path_try == 1 &amp;&amp; !path_test ){path_test=true;ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);path_try=0;}else{path_point[0]=inst.x;path_point[1]=inst.y-256;path_try++;}
    
    if ( path_try == 2 &amp;&amp; !path_test ){path_test=true;ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);path_try=0;}else{path_point[0]=inst.x-256;path_point[1]=inst.y;path_try++;}
    
    if ( path_try == 3 &amp;&amp; !path_test ){path_test=true;ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);path_try=0;}else{path_point[0]=inst.x+256;path_point[1]=inst.y;path_try++;}
    
    if ( path_try == 4 &amp;&amp; !path_test ){path_test=true;ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);path_try=0;}else{path_try=0;}}
    }else{
    update_count++;
    if(10 &lt;= update_count){update_count=0;ai_path_set=false;}}
    inst = collision_circle(x,y,40,obj_player,false,true);
    if ( inst != noone ){npc_attack_player(object_index,12.5);ai_attack_cd=120;update_count=0;path_end();ai_path_set=false;inst_cache=inst;}}
    else{ai_attack_cd--;
    inst = instance_nearest(x,y,obj_player);
    if ( inst != noone ){path_point[0]=inst.x+lengthdir_x(128,point_direction(x,y,inst.x,inst.y)+180);path_point[1]=inst.y+lengthdir_y(128,point_direction(x,y,inst.x,inst.y)+180);}
    if ( !ai_path_set ){ai_path_set=true;
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    path_point[0]=inst.x;path_point[1]=inst.y+16;
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    path_point[0]=inst.x;path_point[1]=inst.y-16;
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    path_point[0]=inst.x-16;path_point[1]=inst.y;
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}else{
    path_point[0]=inst.x+16;path_point[1]=inst.y;
    if ( path_point[0] != 0 &amp;&amp; path_point[1] != 0 ){ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,path_point[0],path_point[1],true);}
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);}}}}}
    }else{
    update_count++;
    if(10 &lt;= update_count){update_count=0;ai_path_set=false;}}}}
    if(npc_fear &gt; 25){state="scared";update_count=0;path_end();}
    break;
    }
    case "scared":
    {
    npc_fear -= 0.003;
    if ( !ai_path_set ){ai_path_set=true;
    move_dir=random_range(move_dir-(30*ai_expand_search),move_dir+(30*ai_expand_search));ai_path_set=true;ai_dir = point_direction(x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir));
    ai_test_path=mp_grid_path(global.pathing_grid,ai_path_id,x,y,x+lengthdir_x(200,move_dir),y+lengthdir_y(200,move_dir),true);
    if(ai_test_path){path_start(ai_path_id,v_maxspeed,0,true);ai_expand_search=1;}else{ai_expand_search+=0.25;}}
    update_count++;
    if(update_count == 15){update_count=0;ai_path_set=false;}
    if(npc_fear &lt;= 25){state="idle";update_count=0;path_end();}
    break;
    }
}
}

if ( ai_dead &amp;&amp; death_frames == 0 ){
var inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
inst.item_id = 70;
inst.item_stack = 1;
inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
inst.item_id = 26;
inst.item_stack = 2;
inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
inst.item_id = 27;
inst.item_stack = 1;
var rare = irandom(11);
if ( rare == 5 ){
inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
inst.item_id = 105;
inst.item_stack = 1;
}
world_obj_update(id);}
}
if ( ai_dead &amp;&amp; death_frames &lt; 3 ){
if ( death_frames == 0 ){
var inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);inst.item_id = db_item_get_name("Raw Bear Meat");inst.item_stack = 1;
var inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);inst.item_id = db_item_get_name("Cloth");inst.item_stack = 5;
if(irandom(15)==5){var inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);inst.item_id = db_item_get_name("Bear Hide Mantle");inst.item_stack = 1;}
}death_frames += 0.01;}
if ( !ai_dead ){
npc_anger=clamp(npc_anger,0,100);
npc_fear=clamp(npc_fear,0,100);
npc_thirst=clamp(npc_thirst,0,100);
npc_food=clamp(npc_food,0,100);
npc_heat=clamp(npc_heat,0,100);
npc_health=clamp(npc_health,0,150);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bleeding

if ( ai_bleeding &gt; 0 )
{
ai_bleeding --;
var bleed_chance = round(random_range(0,15));
if ( bleed_chance == 7 )
{
    var blood_spr = choose("spr_bleeding_0","spr_bleeding_1","spr_bleeding_2");
    ds_list_add(global.ai_xdecal,other.x);
    ds_list_add(global.ai_ydecal,other.y);
    ds_list_add(global.ai_sdecal,blood_spr);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bury Animal Script
if ( ai_dead == true )
{
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 == true )
    {
    v_bury_prompt = true;
        if ( keyboard_check_pressed(ord('E')) == true )
        {
        var inst = instance_create(x,y,obj_popup_resourcegain);
        inst.text = "+10 Sanity";
        inst.v_color = c_blue;
        instance_create(x,y,obj_wolf_grave);
        obj_game.c_sanity += 10;
        instance_destroy();
        }
    }
    else
    {
    v_bury_prompt = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Collisions
//if ( collision_rectangle(x-48,y-48,x+48,y+48,obj_solid_parent,false,true) )
//{
//direction = -direction;
//x = xprevious;y = yprevious;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Sprite Based On Direction
if ( ai_dir &gt;= 315 || ai_dir &lt;= 45 ){ai_sprite=spr_bear_right}
if ( ai_dir &gt; 225 &amp;&amp; ai_dir &lt; 315 ){ai_sprite=spr_bear_down}
if ( ai_dir &gt;= 135 &amp;&amp; ai_dir &lt;= 225 ){ai_sprite=spr_bear_left}
if ( ai_dir &gt; 45 &amp;&amp; ai_dir &lt; 135 ){ai_sprite=spr_bear_up}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Stats
if ( global.ai_display ){if ( !ai_dead ){
var vx = x-view_xview[0]-32;var vy = y-view_yview[0];
draw_set_font(font_gulim_12);draw_set_color(c_white);
draw_set_halign(fa_left);draw_set_valign(fa_middle);
draw_text_outline("Hunger: "+string(npc_food),vx,vy-128,c_white,c_black);
draw_text_outline("Thirst: "+string(npc_thirst),vx,vy-112,c_white,c_black);
draw_text_outline("Health: "+string(npc_health),vx,vy-96,c_white,c_black);
draw_text_outline("Anger: "+string(npc_anger),vx,vy-80,c_white,c_black);
draw_text_outline("Fear: "+string(npc_fear),vx,vy-64,c_white,c_black);
draw_text_outline("Temperature: "+string(c_temperature),vx,vy-48,c_white,c_black);
draw_text_outline("Heat: "+string(npc_heat),vx,vy-32,c_white,c_black);
draw_text_outline("State: "+string(state),vx,vy+48,c_white,c_black);}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render AI
if ( active == true )
{
var color = c_white;
if ( global.ai_display ){if ( !ai_dead ){
if ( ai_path_set ){draw_path(ai_path_id,0,0,true)}}}
if ( ai_hit &gt; 0 ){color = c_red;}

// Shadow
//if ( ai_dead == false ){draw_sprite(spr_shadow_wolf,0,x,y+10);}

if ( !ai_dead ){
if ( path_position &gt; path_positionprevious ){ai_sprite_frame+=0.1;}
event_user(0); // Get Sprite Based On Direction
w3d_draw_sprite_ext(ai_sprite,ai_sprite_frame,x,y,-1,1,1,image_angle,color,1);}
else
{draw_sprite_ext(spr_bear_dead,death_frames,x,y,1,1,image_angle,color,1);}

if ( v_bury_prompt == true )
{
    draw_set_alpha(0.25);
    draw_set_font(font_gulim_12);draw_set_color(c_black);draw_set_halign(fa_center);draw_set_valign(fa_middle);
    draw_rectangle(x-(string_width("E")/2)-2,y-(string_height("E")/2)-30,x+(string_width("E")/2)+2,y+(string_height("E")/2)-32,false);
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(x,y-32,"E");
}
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
