<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_id = sprite_add("spr_main_menu_controls.png",0,false,false,0,32);

m_control = true;

m_index = 1;

m_str = "Back";

reset_controls = false;

var inst = 0;

ini_open("settings.ini");
key_up_main = real(ini_read_real("controls","MAIN_UP",ord('W')));
key_up_alt = real(ini_read_real("controls","ALT_UP",vk_up));
key_down_main = real(ini_read_real("controls","MAIN_DOWN",ord('S')));
key_down_alt = real(ini_read_real("controls","ALT_DOWN",vk_down));
key_left_main = real(ini_read_real("controls","MAIN_LEFT",ord('A')));
key_left_alt = real(ini_read_real("controls","ALT_LEFT",vk_left));
key_right_main = real(ini_read_real("controls","MAIN_RIGHT",ord('D')));
key_right_alt = real(ini_read_real("controls","ALT_RIGHT",vk_right));
key_inventory_main = real(ini_read_real("controls","MAIN_INVENTORY",ord('I')));
key_inventory_alt = real(ini_read_real("controls","ALT_INVENTORY",vk_tab));
key_walk_main = real(ini_read_real("controls","MAIN_WALK",vk_lshift));
key_walk_alt = real(ini_read_real("controls","ALT_WALK",vk_lcontrol));
key_interact_main = real(ini_read_real("controls","MAIN_INTERACT",ord('E')));
key_interact_alt = real(ini_read_real("controls","ALT_INTERACT",ord('F')));
if ( ini_section_exists("controls") == false )
{
ini_write_real("controls","MAIN_UP",ord('W'));
ini_write_real("controls","ALT_UP",vk_up);
ini_write_real("controls","MAIN_DOWN",ord('S'));
ini_write_real("controls","ALT_DOWN",vk_down);
ini_write_real("controls","MAIN_LEFT",ord('A'));
ini_write_real("controls","ALT_LEFT",vk_left);
ini_write_real("controls","MAIN_RIGHT",ord('D'));
ini_write_real("controls","ALT_RIGHT",vk_right);
ini_write_real("controls","MAIN_INVENTORY",ord('I'));
ini_write_real("controls","ALT_INVENTORY",vk_tab);
ini_write_real("controls","MAIN_WALK",vk_lshift);
ini_write_real("controls","ALT_WALK",vk_lcontrol);
ini_write_real("controls","MAIN_INTERACT",ord('E'));
ini_write_real("controls","ALT_INTERACT",ord('F'));
}
ini_close();

inst = instance_create(x+256,y+128,obj_custom_key);
inst.key_name="Move Up";inst.key_binding=key_up_main;inst.key_bind_str=keyboard_get_str(key_up_main);
inst.alt_key_binding=key_up_alt;inst.alt_key_bind_str=keyboard_get_str(key_up_alt);

inst = instance_create(x+256,y+192,obj_custom_key);
inst.key_name="Move Left";inst.key_binding=key_left_main;inst.key_bind_str=keyboard_get_str(key_left_main);
inst.alt_key_binding=key_left_alt;inst.alt_key_bind_str=keyboard_get_str(key_left_alt);

inst = instance_create(x+256,y+256,obj_custom_key);
inst.key_name="Move Down";inst.key_binding=key_down_main;inst.key_bind_str=keyboard_get_str(key_down_main);
inst.alt_key_binding=key_down_alt;inst.alt_key_bind_str=keyboard_get_str(key_down_alt);

inst = instance_create(x+256,y+320,obj_custom_key);
inst.key_name="Move Right";inst.key_binding=key_right_main;inst.key_bind_str=keyboard_get_str(key_right_main);
inst.alt_key_binding=key_right_alt;inst.alt_key_bind_str=keyboard_get_str(key_right_alt);

inst = instance_create(x+256,y+384,obj_custom_key);
inst.key_name="Inventory";inst.key_binding=key_inventory_main;inst.key_bind_str=keyboard_get_str(key_inventory_main);
inst.alt_key_binding=key_inventory_alt;inst.alt_key_bind_str=keyboard_get_str(key_inventory_alt);

inst = instance_create(x+256,y+448,obj_custom_key);
inst.key_name="Walk";inst.key_binding=key_walk_main;inst.key_bind_str=keyboard_get_str(key_walk_main);
inst.alt_key_binding=key_walk_alt;inst.alt_key_bind_str=keyboard_get_str(key_walk_alt);

inst = instance_create(x+256,y+512,obj_custom_key);
inst.key_name="Interact";inst.key_binding=key_interact_main;inst.key_bind_str=keyboard_get_str(key_interact_main);
inst.alt_key_binding=key_interact_alt;inst.alt_key_bind_str=keyboard_get_str(key_interact_alt);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unload Memory
sprite_delete(sprite_id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_custom_key)
{
instance_destroy();
}

if ( reset_controls == true )
{
instance_create(x,y,obj_menu_controls);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Mouse Input

if ( m_control == true )
{
// Check for Right Mouse
if ( mouse_check_button_pressed(mb_right) )
{
io_clear();
audio_play_sound(snd_click01,4,false);
obj_menu_options.m_control = true;
m_control = false;
instance_destroy();
exit;
}
else
{
if ( keyboard_check_pressed(vk_escape) &amp;&amp; !keyboard_check(vk_shift) )
{
io_clear();
audio_play_sound(snd_click01,4,false);
obj_menu_options.m_control = true;
m_control = false;
instance_destroy();
exit;
}
}

// button 0
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+128+string_width(m_str) )
{
    if ( mouse_y &gt; y+48-(string_height(m_str)/2) &amp;&amp; mouse_y &lt; y+48+(string_height(m_str)/2) )
    {
        //if ( m_index != 0 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 0;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_controls_menu()}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Control Reset
if ( keyboard_check(vk_shift) == true )
{
    if ( keyboard_check_pressed(vk_escape) == true )
    {
    ini_open("settings.ini");
    ini_write_real("controls","MAIN_UP",ord('W'));
    ini_write_real("controls","ALT_UP",vk_up);
    ini_write_real("controls","MAIN_DOWN",ord('S'));
    ini_write_real("controls","ALT_DOWN",vk_down);
    ini_write_real("controls","MAIN_LEFT",ord('A'));
    ini_write_real("controls","ALT_LEFT",vk_left);
    ini_write_real("controls","MAIN_RIGHT",ord('D'));
    ini_write_real("controls","ALT_RIGHT",vk_right);
    ini_write_real("controls","MAIN_INVENTORY",ord('I'));
    ini_write_real("controls","ALT_INVENTORY",vk_tab);
    ini_write_real("controls","MAIN_WALK",vk_lshift);
    ini_write_real("controls","ALT_WALK",vk_lcontrol);
    ini_write_real("controls","MAIN_INTERACT",ord('E'));
    ini_write_real("controls","ALT_INTERACT",ord('F'));
    ini_close();
    reset_controls = true;
    instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu
draw_set_color(c_white);
draw_set_alpha(1);
draw_sprite(sprite_id,0,x,y);
draw_set_font(font_gulim_28);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

if ( m_index != 0 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+48);}
draw_text(x+38,y+48,m_str);
draw_set_color(c_white);

draw_set_halign(fa_center);
draw_text(x+38+218,y+48,"Main");

draw_text(x+38+384,y+48,"Alternate");

draw_set_halign(fa_left);
draw_set_font(font_gulim_12);
draw_text(x+132,y+584,"Reset Controls: SHIFT + ESCAPE");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>256,256</point>
  </PhysicsShapePoints>
</object>
