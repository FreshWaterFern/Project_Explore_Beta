<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index = 0;
text_list[0] = "Resume";
text_list[1] = "Save Game";
text_list[2] = "Quit";
m_control = true;
save_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls
if ( m_control == true )
{
// Mouse Navigation
var m_x = mouse_x-view_xview[0];
var m_y = mouse_y-view_yview[0];
var mouse_clicked = false;
if ( m_x &gt; 640-((string_width(text_list[0])/2)) &amp;&amp; m_x &lt; 640+((string_width(text_list[0])/2)) )
{
    if ( m_y &gt; 328-((string_height(text_list[0])/2)) &amp;&amp; m_y &lt; 328+((string_height(text_list[0])/2)) )
    {
        index = 0;
        if ( mouse_check_button_pressed(mb_left) == true )
        {mouse_clicked = true;io_clear();}
    }
}
if ( m_x &gt; 640-((string_width(text_list[1])/2)) &amp;&amp; m_x &lt; 640+((string_width(text_list[1])/2)) )
{
    if ( m_y &gt; 360-((string_height(text_list[1])/2)) &amp;&amp; m_y &lt; 360+((string_height(text_list[1])/2)) )
    {
        index = 1;
        if ( mouse_check_button_pressed(mb_left) == true )
        {mouse_clicked = true;io_clear();}
    }
}
if ( m_x &gt; 640-((string_width(text_list[2])/2)) &amp;&amp; m_x &lt; 640+((string_width(text_list[2])/2)) )
{
    if ( m_y &gt; 392-((string_height(text_list[2])/2)) &amp;&amp; m_y &lt; 392+((string_height(text_list[2])/2)) )
    {
        index = 2;
        if ( mouse_check_button_pressed(mb_left) == true )
        {mouse_clicked = true;io_clear();}
    }
}

// Keyboard Navigation
if ( keyboard_check_pressed(vk_down) or keyboard_check_pressed(ord('S')) )
{
index ++;
}
if ( keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W')) )
{
index --;
}

if ( index == -1 )
{
index = 2;
exit;
}
if ( index == 3 )
{
index = 0;
exit;
}

if ( keyboard_check_pressed(vk_escape) )
{
pause_game(1);
io_clear();
exit;
}

if ( keyboard_check_pressed(vk_enter) or mouse_clicked == true )
{
    io_clear();
    switch(index)
    {
        case 0:
        {
        pause_game(1);
        break;
        }
        case 1:
        {
        save_alpha = 1;
        var str = "";if(os_type == os_windows){str=".sav"}
        world_data_save(global.world_name+str);
        m_control = false;
        break;
        }
        case 2:
        {
        unload_world_data();
        with(obj_game){instance_destroy();}
        with(obj_game_render){instance_destroy();}
        with(obj_player){instance_destroy();}
        audio_stop_all();
        room_goto(room_main_menu);
        break;
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(application_surface);
shader_reset();
draw_set_alpha(1);
draw_set_color(c_black);
draw_rectangle(0,0,1280,720,false);
draw_set_color(c_white);
draw_set_font(font_gulim_12);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
if ( m_control == true )
{
if ( save_alpha &lt;= 0 )
{
if ( index == 0 )
{draw_set_color(c_green)}
else
{draw_set_color(c_white);}
draw_text(640,360-32,text_list[0]);
if ( index == 1 )
{draw_set_color(c_green)}
else
{draw_set_color(c_white);}
draw_text(640,360,text_list[1]);
if ( index == 2 )
{draw_set_color(c_green)}
else
{draw_set_color(c_white);}
draw_text(640,360+32,text_list[2]);
}
}

if ( save_alpha &gt; 0 )
{
draw_set_font(font_gulim_28);
draw_set_alpha(save_alpha);
save_alpha -= 0.05;
draw_text(640,360,"Game Saved");
if ( save_alpha &lt;= 0 )
{m_control = true;}
draw_set_alpha(1);
}

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
