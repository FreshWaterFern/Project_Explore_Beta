<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_online = false;
global.ingame = false;
server_socket = 0;
username = "";
steam_id = "";
connect_ip = get_string("Server IP?","192.168.0.2");
public_ip = get_string("My IP?","50.113.16.98");
udp_socket = network_create_socket(network_socket_udp);
my_socket = network_create_socket(network_socket_tcp);
net_socket = network_connect(my_socket,connect_ip,25565);
if ( net_socket &lt; 0 )
{
    //show_message_async("Failed to connected");
    global.game_online = false;
}
else
{
    //show_message_async("Connected to server");
    global.game_online = true;
    alarm[0] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var send_buffer = buffer_create(1,buffer_grow,1);
username = string(steam_get_persona_name());
steam_id = string(steam_get_user_steam_id());
buffer_write(send_buffer,buffer_u16,1);
buffer_write(send_buffer,buffer_string,username);
buffer_write(send_buffer,buffer_string,steam_id);
network_send_packet(my_socket,send_buffer,buffer_tell(send_buffer));
buffer_delete(send_buffer);
/*
send_buffer = buffer_create(1,buffer_grow,1);
buffer_write(send_buffer,buffer_u8,2);
buffer_write(send_buffer,buffer_string,public_ip);
network_send_udp(udp_sock,send_buffer,buffer_tell(send_buffer));
buffer_delete(send_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Async Network

var type = ds_map_find_value(async_load,"type");
if ( type == network_type_connect )
{
}

if ( type == network_type_disconnect )
{
}

if ( type == network_type_data )
{
    var net_buffer = ds_map_find_value(async_load,"buffer");
    var msg_id = buffer_read(net_buffer,buffer_u16);
    switch(msg_id)
    {
        case 1: // Client Connecting
        {
        var get_socket = buffer_read(net_buffer,buffer_s32);
        server_socket = get_socket;
        var get_login = buffer_read(net_buffer,buffer_bool);
        // Verify that the connection and login were successful
        if ( get_login == true )
        {
        var send_buffer = buffer_create(1,buffer_grow,1);
        buffer_write(send_buffer,buffer_u16,2);
        buffer_write(send_buffer,buffer_string,steam_id);
        network_send_packet(my_socket,send_buffer,buffer_tell(send_buffer));
        buffer_delete(send_buffer);
        }
        else
        {
        // End connection
        }
        break;
        }
        case 2: // Client Receive Data
        {
        var obj1 = instance_create(0,0,obj_player);
        var obj2 = instance_create(0,0,obj_game);
        var world_size_w = buffer_read(net_buffer,buffer_u32);
        var world_size_h = buffer_read(net_buffer,buffer_u32);
        room_set_width(room_world_editor,world_size_w);
        room_set_height(room_world_editor,world_size_h);
        room_goto(room_world_editor);
        obj1.x = buffer_read(net_buffer,buffer_s32);
        obj1.y = buffer_read(net_buffer,buffer_s32);
        obj2.c_health = buffer_read(net_buffer,buffer_s32);
        obj2.c_food = buffer_read(net_buffer,buffer_s32);
        ds_grid_read(global.c_inventory_pack,buffer_read(net_buffer,buffer_string));
        var world_tiles = buffer_read(net_buffer,buffer_bool);
        if ( world_tiles == true )
        {
        ds_grid_read(global.world_tiles,buffer_read(net_buffer,buffer_string));
        }
        else
        {
        // Client generates world_tiles in their chunk
        }
        var world_chunks = buffer_read(net_buffer,buffer_bool);
        if ( world_chunks == true )
        {
        ds_grid_read(global.world_chunks,buffer_read(net_buffer,buffer_string));
        }
        else
        {
        }
        global.ingame = true;
        break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(net_socket);
network_destroy(my_socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
