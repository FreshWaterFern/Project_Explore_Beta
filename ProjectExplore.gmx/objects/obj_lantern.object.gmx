<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lantern</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000001</depth>
  <persistent>0</persistent>
  <parentName>obj_solid_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

is_enabled = false;
v_indoors = false;
active = true;
selected = false;
obj_type = 0;
mouse_frames = 0;

if ( collision_circle(x,y,9,obj_roof_parent,false,true) )
{
is_indoors = true;
}
else
{
is_indoors = false;
}

world_obj_add(id);

ps_1 = part_system_create();
part_system_depth(ps_1,-9999999);
part_system_position(ps_1,x,y);
part_system_automatic_draw(ps_1,false);

col_orange = $00818F;

pe_1 = part_emitter_create(ps_1);

// Fire Glow
pt_1 = part_type_create();
part_type_shape(pt_1,pt_shape_sphere);
part_type_life(pt_1,80,120);
part_type_direction(pt_1,0,0,0,0);
part_type_speed(pt_1,0,0,0,0);
part_type_colour1(pt_1,$0081BF);
part_type_size(pt_1,2,4,0.03,0);
part_type_alpha2(pt_1,0.1,0.005);
part_type_blend(pt_1,false);

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete Object From World
world_obj_delete(id);
part_system_destroy(ps_1);
part_type_destroy(pt_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Status
world_obj_update(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Emit Particles
if ( is_enabled == true )
{
    part_emitter_burst(ps_1,pe_1,pt_1,1);
    if ( global.render_particle_quality == 1 )
    {alarm[0]=5;}else{alarm[0]=8;}
}
else
{
alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth Update
if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
depth = w3d_depth(x,y,-y+8);}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check If Indoors
var inst = collision_circle(x,y,8,obj_roof_parent,false,true);
if ( inst != noone )
{v_indoors = true;}
else
{v_indoors = false;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open Storage
if ( active == true )
{
    if ( v_indoors == obj_player.v_indoors ){
    if ( global.render_gui_page == "none" )
    {
    if ( mouse_x &gt; x - sprite_width/2 &amp;&amp; mouse_x &lt; x + sprite_width/2 or global.tablet_mode == 1 )
    {
        if ( mouse_y &gt; y - sprite_height/2 &amp;&amp; mouse_y &lt; y + sprite_height/2 or global.tablet_mode == 1 )
        {
            if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 )
            {
            selected = true;
            if ( global.tablet_mode == 0 ){
            if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
            {
            if ( mouse_check_button_pressed(mb_left) )
            {
            audio_play_sound(snd_click03,4,false);
            if ( is_enabled == true )
            {
            is_enabled = false;
            }
            else
            {
            is_enabled = true;
            }
            world_obj_update(id);
            }
            if ( mouse_check_button_pressed(mb_right) )
            {
            var inst = instance_create(x,y,obj_item_dropped);
            inst.item_id = 28;
            inst.item_stack = 1;
            instance_destroy();
            }
            }
            }else{
            var x_draw = x-view_xview[0];var y_draw = y-view_yview[0];
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw-48,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
            {
            audio_play_sound(snd_click03,4,false);
            if ( is_enabled == true )
            {
            is_enabled = false;
            }
            else
            {
            is_enabled = true;
            }
            world_obj_update(id);
            }
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw+48,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
            {
            var inst = instance_create(x,y,obj_item_dropped);
            inst.item_id = 28;
            inst.item_stack = 1;
            instance_destroy();
            }
            }
        }
        else
        {selected = false;}
        }
        else
        {selected = false;}
    }
    else
    {selected = false;}
    }
    else
    {
    if ( global.storage_id == id )
    {world_obj_update(id);}
    else
    {selected = false;}
    }
}}

/*
/// Lantern Toggle &amp;&amp; Collision
if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
    if ( global.render_gui_page == "none" ){
    // Check For Mouse
    if ( mouse_x &gt; x - sprite_width/2 &amp;&amp; mouse_x &lt; x + sprite_width/2 )
    {
        if ( mouse_y &gt; y - sprite_height/2 &amp;&amp; mouse_y &lt; y + sprite_height/2 )
        {
            if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 )
            {
            selected = true;
            if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
            {
            if ( mouse_check_button_pressed(mb_left) )
            {
            audio_play_sound(snd_click03,4,false);
                if ( is_enabled == true )
                {
                is_enabled = false;
                }
                else
                {
                is_enabled = true;
                }
                world_obj_update(id);
            }
            if ( mouse_check_button_pressed(mb_right) )
            {
                var inst = instance_create(x,y,obj_item_dropped);
                inst.item_id = 28;
                inst.item_stack = 1;
                instance_destroy();
            }
            }
            }
            else
        {
        selected = false;
        }
        }
        else
        {
        selected = false;
        }
    }
    else
    {
    selected = false;
    }
    }
    else
    {
    selected = false;
    }
    if ( is_enabled == true )
    {
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 160 )
    {
    obj_player.pl_nearlight = true;
    if ( obj_game.v_lightlevel &gt; 0.5 )
    {
    obj_game.v_lightlevel = 0.5;
    }
    }
    }
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(ps_1);
part_type_destroy(pt_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
    if ( global.render_gui_page == "none" )
    {
    draw_set_blend_mode(bm_add);
    part_system_drawit(ps_1);
    draw_set_blend_mode(bm_normal);
    }
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render GUI For Usage
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( v_indoors == obj_player.v_indoors ){
if ( selected == true )
{
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) or (global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64) )
{
// Set font and alignment
if ( global.tablet_mode == 0 ){draw_set_font(font_gulim_12)}else{draw_set_font(font_gulim_18)}
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var offset_tabx = 0;var offset_taby = 0;var sprite_set = spr_mouse_image;
if ( global.tablet_mode == 1 ){offset_tabx = 16;offset_taby = 20;sprite_set = spr_gui_tablet_tapbutton;}
draw_sprite_ext(sprite_set,mouse_frames,x_draw-32-offset_tabx,y_draw-16-offset_taby,-1,1,0,c_white,1);
draw_sprite_ext(sprite_set,mouse_frames,x_draw+32+offset_tabx,y_draw-16-offset_taby,1,1,0,c_white,1);
if ( is_enabled == false )
{
draw_text_outline("Ignite",x_draw-32-offset_tabx,y_draw+8,c_white,c_black);
}
else
{
draw_text_outline("Extinguish",x_draw-32-offset_tabx,y_draw+8,c_white,c_black);
}
draw_text_outline("Destroy",x_draw+32+offset_tabx,y_draw+8,c_white,c_black);
}
else
{
if ( global.tablet_mode == 0 ){
// Set font and alignment
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}}}}

/*
/// Render GUI For Usage
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( v_indoors == obj_player.v_indoors ){
if ( selected == true )
{
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
{
// Set font and alignment
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
draw_sprite_ext(spr_mouse_image,mouse_frames,x_draw-32,y_draw-16,-1,1,0,c_white,1);
draw_sprite_ext(spr_mouse_image,mouse_frames,x_draw+32,y_draw-16,1,1,0,c_white,1);
if ( is_enabled == false )
{
draw_text_outline("Ignite",x_draw-32,y_draw+8,c_white,c_black);
}
else
{
draw_text_outline("Extinguish",x_draw-32,y_draw+8,c_white,c_black);
}
draw_set_font(font_gulim_12);
draw_text_outline("Destroy",x_draw+32,y_draw+8,c_white,c_black);
}
else
{
// Set font and alignment
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
if ( active == true )
{
    if ( v_indoors == obj_player.v_indoors ){
    if ( global.render_gui_page == "none" )
    {
    if ( selected == true )
    {
    draw_set_color(c_green);
    draw_set_alpha(0.25);
    draw_circle(x,y,56,false);
    draw_set_alpha(1);
    }
    if ( is_enabled == true )
    {draw_sprite_ext(spr_lightglow_1,0,x,y,1,1,0,col_orange,0.25);} 
    w3d_draw_sprite_ext(sprite_index,0,x,y,0,image_xscale,image_yscale,image_angle,c_white,1);
    }
    if ( global.render_gui_page == "none" )
    {
    if ( selected == true )
    {
    draw_set_color(c_green);
    draw_set_alpha(0.25);
    draw_circle(x,y,56,false);
    draw_set_alpha(1);
    }
    if ( is_enabled == true )
    {draw_sprite_ext(spr_lightglow_1,0,x,y,1,1,0,col_orange,0.25);} 
    w3d_draw_sprite_ext(sprite_index,0,x,y,0,image_xscale,image_yscale,image_angle,c_white,1);
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>25,25</point>
    <point>25,25</point>
  </PhysicsShapePoints>
</object>
