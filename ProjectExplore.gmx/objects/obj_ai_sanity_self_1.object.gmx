<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_exploder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid_ai_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate AI
image_speed = 0.2;
foot_index = 0;
v_speed = 3;
v_maxspeed = 3;

// Particles

ps_1 = part_system_create();
pt_1 = part_type_create();
pe_1 = part_emitter_create(ps_1);

part_type_sprite(pt_1,spr_particle_cloud,0,0,0);
part_type_life(pt_1,20,30);
part_type_direction(pt_1,-direction,-direction,0,0);
part_type_speed(pt_1,0.5,1,0,0);
part_type_colour1(pt_1,c_black);
part_type_alpha3(pt_1,0,0.2,0);
part_type_size(pt_1,0.5,1,0,0);

part_system_automatic_draw(ps_1,false);

/*
ai_state has multiple modes.
0 = asleep, 1 = wondering, 2 = attacking, 3 = sleeping
*/
ai_state = 1;
ai_agro_time = 30;
ai_agro_count = 0;
ai_attack_cd = 240;
ai_pathing = false;
ai_wonder_time = 0;
ai_scream = false;
ai_path_id = path_add();
ai_path_update_time = 15;
ai_path_update_cd = 0;

ai_hit = 0;
ai_health = 100;
ai_dead = false;

pl_surface_type = 0;
pl_fs_dist = 0;
pl_fs_dist_max = 64;

world_obj_add(id);

/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>world_obj_delete(id);
path_delete(ai_path_id);
audio_stop_sound(snd_exploder_scream1);
audio_stop_sound(snd_exploder_scream2);
part_emitter_destroy(ps_1,pe_1);
part_system_destroy(ps_1);
part_type_destroy(pt_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Move Speed
v_speed = v_maxspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Depth
if ( active == true )
{
if ( ai_dead == false )
{
depth = w3d_depth(x,y,-y);
}
else
{
depth = w3d_depth(x,y,-y+128);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Footstep Audio Handling

if ( y == yprevious )
{
pl_fs_dist += abs(x-xprevious);
}
else
{
pl_fs_dist += abs(x-xprevious)/1.1;
}
if ( x == xprevious )
{
pl_fs_dist += abs(y-yprevious);
}
else
{
pl_fs_dist += abs(y-yprevious)/1.1;
}

if ( pl_fs_dist &gt;= pl_fs_dist_max )
{
    pl_fs_dist = 0;
    var i = round(other.x/128);
    var r = round(other.y/128);
    pl_surface_type = ds_grid_get(global.world_tiles,i,r);
    switch(pl_surface_type)
    {
        case 0:
        {
        var snd_id = choose(fs_grass1,fs_grass2,fs_grass3,fs_grass4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 1:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 2:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 3:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 4:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 5:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 6:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 7:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 8:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 9:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 10:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
        case 11:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        audio_play_sound_at(snd_id,x,y,0,200,600,1,false,1);
        break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Sanity
if ( obj_game.c_sanity &gt;= 90 )
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update World Data
world_obj_update(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI Update
if ( ai_state != 0 )
{
    // Update Logic
    if ( ai_state == 1 )
    {
        if ( global.render_particle_quality == 1 )
        {
        part_type_direction(pt_1,direction-165,direction-195,0,0);
        part_system_position(ps_1,x,y);
        part_emitter_burst(ps_1,pe_1,pt_1,1);
        }
        if ( ai_wonder_time &lt;= 0 )
        {
        randomize();
        direction = choose(0,25,45,65,90,115,135,155,180,200,225,245,270,290,315,340);
        ai_wonder_time = choose(30,60,120,180,240);
        image_angle = direction;
        }
        else
        {
        speed = v_speed/2;
        ai_wonder_time --;
        if ( collision_rectangle(x-48,y-48,x+48,y+48,obj_solid_parent,false,true) )
            {
            direction = -direction;
            x = xprevious;y = yprevious;
            }
        }
        
        if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 200 )
        {
        ai_state = 2;
        ai_attack_cd = 120;
        ai_agro_count = 0;
        }
    }

if ( ai_state == 2 )
{
    if ( global.render_particle_quality == 1 )
    {
    part_type_direction(pt_1,direction-165,direction-195,0,0);
    part_system_position(ps_1,x,y);
    part_type_size(pt_1,1,2,0,0);
    part_type_speed(pt_1,3,4,0,0);
    part_emitter_burst(ps_1,pe_1,pt_1,3);
    }
    if ( point_distance(x,y,obj_player.x,obj_player.y) &gt; 1200 )
    {
    ai_state = 1;
    }
    else
    {
        if ( ai_attack_cd &lt; 0 )
        {
        instance_create(x,y,obj_blood_explosion1);
        instance_destroy();
        }
        if ( point_distance(x,y,obj_player.x,obj_player.y) &gt; 24 )
        {
            ai_attack_cd --;
            if ( ai_pathing == false )
            {
                if ( ai_path_update_cd == ai_path_update_time )
                {
                    if ( mp_grid_path( global.pathing_grid,ai_path_id,x,y,obj_player.x,obj_player.y,true) == 1 )
                    {
                    path_start(ai_path_id,v_speed,0,true);
                    path_speed = v_speed;
                    ai_path_update_cd = 0;
                    }
                    else
                    {
                    path_end();
                    instance_create(x,y,obj_blood_explosion1);
                    instance_destroy();
                    }
                }
                else
                {
                ai_path_update_cd ++;
                if ( ai_path_update_cd &gt; ai_path_update_time )
                {
                ai_path_update_cd = ai_path_update_time;
                }
                }
            }
            else
            {
            ai_pathing = false;
            }
        }
    else
    {
        instance_create(x,y,obj_blood_explosion1);
        instance_destroy();
    }
    }
}

// Update image_angle
image_angle = direction;

// Prevent the AI from walking off screen.
if ( x &lt;= 0 )
{
    x = xprevious;
    direction = -direction;
}
if ( x &gt;= room_width )
{
    x = xprevious;
    direction = -direction;
}
if ( y &lt;= 0 )
{
    y = yprevious;
    direction = -direction;
}
if ( y &gt;= room_height )
{
    y = yprevious;
    direction = -direction;
}

    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 2500 )
    {
    ai_state = 1;
    }
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 300 )
    {
    ai_state = 2;
    }
}

if ( point_distance(x,y,obj_player.x,obj_player.y) &gt; 2500 )
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render AI &amp; Decals
if ( active == true )
{
var color = c_white;

if ( ai_state != 2 )
{
foot_index += image_speed;
if ( foot_index &gt; 8 )
{
foot_index = 0;
}
}
else
{
foot_index += 0.4;
if ( foot_index &gt; 8 )
{
foot_index = 0;
}
}

part_system_drawit(ps_1);

w3d_draw_sprite_ext(spr_char_feet_walking,foot_index,x,y,0,1,1,image_angle-90,color,1);
w3d_draw_sprite_ext(sprite_index,0,x,y,-1,1,1,image_angle-90,color,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
