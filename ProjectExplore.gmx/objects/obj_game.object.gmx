<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-99999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Data Structures For Clothing
global.equip_list = ds_list_create();
ds_list_add(global.equip_list,0);
ds_list_add(global.equip_list,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// World Modifiable Data
global.sv_item_remove_time = 300; // Enter second value
global.sv_tree_growth_time = 0.000375; // Enter tick value (64 * value)
global.sv_tick_rate = 3; // Enter tick value ( 60 / value )

global.sv_tick_step = 0;

global.last_delta = delta_time;

global.tick_rate_math = (60 / global.sv_tick_rate);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Initiate
debug_set = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music data
music_track = 0;
music_list = ds_list_create();
ds_list_add(music_list,audio_create_stream("music\02 Vastness.oga"));
ds_list_add(music_list,audio_create_stream("music\03 Freedom.oga"));
ds_list_add(music_list,audio_create_stream("music\04 Circumnavigation.oga"));
ds_list_add(music_list,audio_create_stream("music\05 Entropy.oga"));
ds_list_add(music_list,audio_create_stream("music\06 Ostracization.oga"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
global.world_folder = string_replace(global.world_name,".sav","");
globalvar biome_data;
biome_data = mod_biome_list();

// Load Audio Into Memory

if ( audio_group_is_loaded(audiogroup_default) == false )
{audio_group_load(audiogroup_default);}
if ( audio_group_is_loaded(audiogroup_footstep) == false )
{audio_group_load(audiogroup_footstep);}

// A* Path Finding
global.pathing_grid = mp_grid_create(0,0,floor(room_width/32),floor(room_height/32),32,32);

load_game_settings();

// Temporary Variable Use
temp_x = 0;temp_y = 0;temp_i = 0;temp_t = 0;
temp_str1 = "";temp_str2 = "";temp_str3 = "";
temp_str4 = "";temp_str5 = "";temp_str6 = "";
i = 0;

loading = true;
loading_step = 0;
save_id = 0;
autosave_time = 7200;
food_loss = 0;

// Get Autosave Setting
switch(global.setting_autosave){
case 0:{autosave_time=-1;break;}
case 1:{autosave_time=1800;break;}
case 2:{autosave_time=3600;break;}
case 3:{autosave_time=7200;break;}
case 4:{autosave_time=18000;break;}
case 5:{autosave_time=36000;break;}
}

render_saving = 0;

save_buffer1=buffer_create(1,buffer_grow,1);
save_buffer2=buffer_create(1,buffer_grow,1);

// Heartbeat Effect Variables
heartbeat_effect_ini();

// World Data Structures
world_data_ini();

// Render Variables
global.render_characters = true;
global.render_world_tiles = true;
global.render_gui_1 = true;
global.render_clock_1 = true;
global.render_gui_page = "none";
global.render_waypoint_state = 0;
global.render_world_shadows = true;
global.render_vignette_shader = m_vignette;
global.render_particle_quality = m_particles;
global.render_blood = m_blood;
global.render_temp = m_temp;
global.game_pause = false;
global.render_gui_page = "none";

/// Item Inventory Bonuses Variables
slot_1_id = 0;slot_2_id = 0;slot_3_id = 0;slot_4_id = 0;

// World Variables
global.ai_check = 0;
buffer_pos = 0;
music_track = 0;

global.world_loading = false;
global.map_loaded = false;

// Player Stats
player_stats_ini();

// Inventory
player_inventory_ini();

// Clothing
global.clothing_head = "";global.clothing_body = "";global.inv_item_id = 0;

// Hotbar
v_hotbar_set = -1;v_item_equipped = -1;

// Sanity
v_lightlevel = 1;

// GUI
hotbar_alpha = 5;

temperature_grid_ini();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check 'Get Baked!' Achievement
if ( c_temperature &gt;= 250 )
{
    if ( !steam_get_achievement("Get Baked!") )
    {
    steam_set_achievement("Get Baked!");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.game_pause</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>loading</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic Checks

// Health Check
if ( c_health &gt; 150 )
{
c_health = 150;
}
if ( c_health &gt; 100 )
{
c_health -= 0.0006;
}
if ( c_health &lt;= 25 &amp;&amp; c_health &gt; 0 )
{
if ( start_hurt == true )
{
if ( !audio_is_playing(audio_heartbeat_main) &amp;&amp; !audio_is_playing(audio_heartbeat_start) )
{audio_heartbeat_main = audio_play_sound(snd_heartbeat_main,3,false);}}
else{start_hurt=true;audio_heartbeat_start=audio_play_sound(snd_heartbeat_start,3,false);}
}
if ( c_health &gt; 25 &amp;&amp; start_hurt == true &amp;&amp; !audio_is_playing(audio_heartbeat_main) )
{audio_heartbeat_fade = audio_play_sound(snd_heartbeat_fade,3,false);start_hurt=false;}
if ( c_health &lt;= 0 )
{
if ( audio_is_playing(audio_heartbeat_main) )
{audio_stop_sound(audio_heartbeat_main);}
c_health = 0;
screen_save("DeathScreen.png");
unload_world_data();
if ( audio_is_playing(music_track) == true )
{audio_stop_sound(music_track);}
with(obj_game_render){instance_destroy();}
with(obj_player){instance_destroy();}
room_goto(room_deathscreen);
instance_destroy();
exit;
}

// Sanity Check
if ( c_sanity &gt; 100 )
{
c_sanity = 100;
}
var time = global.world_time;
if ( time &gt;= 15 &amp;&amp; time &lt;= 20 )
{
if ( c_sanity &gt; 0 )
{
c_sanity -= 0.0075*v_lightlevel;
}
}
else
{
if ( c_sanity &lt; 100 )
{
c_sanity += 0.0025;
}
}
if ( c_sanity &lt; 0 )
{
c_sanity = 0;
}

// Food Check
if ( c_food &gt; 100 )
{
c_food = 100;
}
if ( c_food &gt;= 50 &amp;&amp; c_health &lt; 100 )
{
    if ( global.pl_bleeding &gt; 0 )
    {
    c_health += 0.001;
    }
}
if ( c_food &lt;= 0 )
{
c_food = 0;
c_health -= 0.002;
}

// Thirst Check
if ( c_thirst &gt; 100 )
{
c_thirst = 100;
}
if ( c_thirst &gt;= 50 &amp;&amp; c_thirst &lt; 100 )
{
    if ( global.pl_bleeding &gt; 0 )
    {
    c_health += 0.0005;
    }
}
if ( c_thirst &lt;= 0 )
{
c_thirst = 0;
c_health -= 0.002;
}

// Health Regeneration
if ( c_thirst &gt; 85 &amp;&amp; c_food &gt; 85 ){c_health += 0.0075;}

// Inventory Clothing Update
// Update Clothing Drawing And Data
if ( global.render_gui_page == "inventory" )
{
    // Update Item Drop
    var view_xcenter = view_xview[0]+view_wview[0]/2;
    var view_ycenter = view_yview[0]+view_hview[0]/2;
    if ( global.tablet_mode == 0 ){
    if ( global.v_item_moving == true )
    {
        if ( mouse_x &gt; view_xcenter+184 &amp;&amp; mouse_x &lt; view_xcenter+296 )
        {
            if ( mouse_y &gt; view_ycenter-70 &amp;&amp; mouse_y &lt; view_ycenter+128 )
            {
                global.v_item_drop = true;
            }
            else
            {
                global.v_item_drop = false;
            }
        }
        else
        {
            global.v_item_drop = false;
        }
    }}
    else{
    if ( global.v_item_moving == true )
    {
        if ( mouse_x &gt; view_xcenter+528 &amp;&amp; mouse_x &lt; view_xcenter+640 )
        {
            if ( mouse_y &gt; view_ycenter-70 &amp;&amp; mouse_y &lt; view_ycenter+128 )
            {
                global.v_item_drop = true;
            }
            else
            {
                global.v_item_drop = false;
            }
        }
        else
        {
            global.v_item_drop = false;
        }
    }}
    // Check for item drop box
    if ( mouse_check_button_released(mb_left) )
    {
        if ( global.v_item_drop == true ){
        if ( global.v_slot_inst.item_id != 0 )
        {
            inventory_drop_item(global.v_slot_inst.grid_x,global.v_slot_inst.grid_y,global.v_slot_inst.inv_part);
            with(obj_inv_slot){event_user(0);}
        }
        global.v_item_drop = false;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Temperature Check
var x_floor = floor(obj_player.x/512);var y_floor = floor(obj_player.y/512);
var s1 = global.world_temperature[#x_floor,y_floor];
var s2 = global.world_temperature[#clamp(x_floor-1,0,x_floor),y_floor];
var s3 = global.world_temperature[#x_floor+1,y_floor];
var s4 = global.world_temperature[#x_floor,clamp(y_floor-1,0,y_floor)];
var s5 = global.world_temperature[#x_floor,y_floor+1];
if ( s2 == undefined ){s2=s1;}if ( s3 == undefined ){s3=s1;}
if ( s4 == undefined ){s4=s1;}if ( s5 == undefined ){s5=s1;}
c_temperature = mean(s1,s2,s3,s4,s5,global.world_temperature_base);
if ( global.pl_sickness &gt; 0 ){c_temperature += 10;}

if ( global.equip_list[|0] &gt; 0 ){
var list1 = convert_string_to_list(global.item_data[#global.equip_list[|0],7],",");c_temperature += real(list1[|1]);ds_list_destroy(list1);}
if ( global.equip_list[|1] &gt; 0 ){
var list2 = convert_string_to_list(global.item_data[#global.equip_list[|1],7],",");c_temperature += real(list2[|1]);ds_list_destroy(list2);}

get_temperature_effect(c_temperature);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Atmosphere Script

// Birds
var chance = round(random_range(0,1000));
if ( chance == 50 )
{
var inst = instance_create(view_xview[0]+round(random_range(10,1270)),view_yview[0],obj_bird1);
inst.image_angle = round(random_range(185,355));inst.speed = round(random_range(7,12))
}
if ( chance == 100 )
{
var inst = instance_create(view_xview[0]+round(random_range(10,1270)),view_yview[0]+720,obj_bird1);
inst.image_angle = round(random_range(5,175));inst.speed = round(random_range(7,12))
}
if ( chance == 150 )
{
var inst = instance_create(view_xview[0],view_yview[0]+round(random_range(10,710)),obj_bird1);
inst.image_angle = round(random_range(85,-85));inst.speed = round(random_range(7,12))
}
if ( chance == 200 )
{
var inst = instance_create(view_xview[0]+1280,view_yview[0]+round(random_range(10,710)),obj_bird1);
inst.image_angle = round(random_range(265,95));inst.speed = round(random_range(7,12))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Item Inventory Bonuses

// Reset Bonuses
global.speed_multiplier = 0;
global.v_backpack = 0;
global.v_carryinglantern = 0;

// Execute Bonus Check
if ( slot_1_id != 0 )
{
switch(slot_1_id)
{
    case 53:
    {
        c_sanity += 0.0025;break;
    }
    case 54:
    {
        global.speed_multiplier = 0.5;break;
    }
    case 55:
    {
        global.speed_multiplier = 0.5;break;
    }
    case 56:
    {
        global.speed_multiplier = 1;break;
    }
    case 71:
    {
        global.v_backpack = 1;break;
    }
    case 80:
    {
        global.v_carryinglantern = 1;break;
    }
}
}

if ( slot_2_id != 0 )
{
switch(slot_2_id)
{
    case 53:
    {
        c_sanity += 0.005;break;
    }
    case 54:
    {
        global.speed_multiplier = 0.5;break;
    }
    case 55:
    {
        global.speed_multiplier = 0.5;break;
    }
    case 56:
    {
        global.speed_multiplier = 1;break;
    }
    case 71:
    {
        global.v_backpack = 1;break;
    }
    case 80:
    {
        global.v_carryinglantern = 1;break;
    }
}
}

if ( slot_3_id != 0 )
{
switch(slot_3_id)
{
    case 53:
    {
        c_sanity += 0.005;break;
    }
    case 54:
    {
        global.speed_multiplier = 0.5;break;
    }
    case 55:
    {
        global.speed_multiplier = 0.5;break;
    }
    case 56:
    {
        global.speed_multiplier = 1;break;
    }
    case 71:
    {
        global.v_backpack = 1;break;
    }
    case 80:
    {
        global.v_carryinglantern = 1;break;
    }
}
}

// Execute Various Bonuses
if ( global.v_carryinglantern == 1 )
{
    if ( instance_number(obj_light_carryinglantern) == 0 )
    {
    instance_create(obj_player.x,obj_player.y,obj_light_carryinglantern);
    }
}
else
{
    with(obj_light_carryinglantern){instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update &amp; Misc

// GUI
hotbar_alpha -= 0.075;
if ( hotbar_alpha &lt; 0 )
{
    hotbar_alpha = 0;
}
if ( hotbar_alpha &gt; 5 )
{
    hotbar_alpha = 5;
}

// Position
x = obj_player.x;
y = obj_player.y;

// Update World Time
//global.world_time += 0.01; //debugging
global.world_time += time_speed;
if ( global.world_time &gt;= 20 )
{
global.world_time = 0;
// Show Current Day
global.world_days ++;
var inst = instance_create(obj_player.x,obj_player.y,obj_popup_days_survived);
inst.days = global.world_days;
// Achievements
if ( global.world_days &gt; 1 )
{
    if ( !steam_get_achievement("One Night Stand") )
    {
    steam_set_achievement("One Night Stand");
    }
}
if ( global.world_days &gt; 5 )
{
    if ( !steam_get_achievement("Survivor") )
    {
    steam_set_achievement("Survivor");
    }
}

if ( global.world_days &gt; 20 )
{
    if ( !steam_get_achievement("Stoical") )
    {
    steam_set_achievement("Stoical");
    }
}

}

// Audio Listener Update
audio_listener_set_position(0,x,y,0);
audio_listener_set_orientation(0,x,y,500,0,1,0);

// UI Controls
if ( keyboard_check_pressed(ord('T')) == true )
{
    if ( global.render_clock_1 == false )
    {
    global.render_clock_1 = true;
    }
    else
    {
    global.render_clock_1 = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sanity Events
c_sanity = 100;
if ( c_sanity &lt; 70 )
{
    // Level 1 Madness
    if ( c_sanity &gt;= 50 )
    {
        if ( instance_number(obj_sanity_1) == 0 )
        {
            instance_create(view_xview[0],view_yview[0],obj_sanity_1);
        }
    }
    // Level 2 Madness
        if ( c_sanity &lt; 50 &amp;&amp; c_sanity &gt;= 25 )
        {
        if ( instance_number(obj_sanity_2) == 0 )
        {
            instance_create(view_xview[0],view_yview[0],obj_sanity_2);
        }
        }
    }
    // Level 3 Madness
        if ( c_sanity &lt; 25 &amp;&amp; c_sanity &gt;= 0 )
        {
        if ( instance_number(obj_sanity_3) == 0 )
        {
            instance_create(view_xview[0],view_yview[0],obj_sanity_3);
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music/Ambience Player
if ( irandom(5) == 5 ){
if ( music_track == 0 ){
music_track = audio_play_sound(ds_list_find_value(music_list,irandom(4)),5,false);
ds_list_add(obj_volume.list_music,music_track);
}else{
if(!audio_is_playing(music_track)){music_track=0;
ds_list_delete(obj_volume.list_music,ds_list_find_index(obj_volume.list_music,music_track));}}
}

if ( global.world_time &gt;= 11.5 &amp;&amp; global.world_time &lt;= 20 )
{if(audio_is_playing(ambience_morning)){audio_stop_sound(ambience_morning)}
if (audio_group_is_loaded(Ambience_Track1)){audio_group_unload(Ambience_Track1);}
if (!audio_group_is_loaded(Ambience_Track2)){audio_group_load(Ambience_Track2);}
}
else
{if(audio_is_playing(ambience_night)){audio_stop_sound(ambience_night)}
if (audio_group_is_loaded(Ambience_Track2)){audio_group_unload(Ambience_Track2);}
if (!audio_group_is_loaded(Ambience_Track1)){audio_group_load(Ambience_Track1);}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tick Rate

global.sv_tick_step += 1 - (((global.last_delta - delta_time)/1000000)*1);
if ( global.sv_tick_step &gt; global.sv_tick_rate ){
global.sv_tick_step -= global.sv_tick_rate;}

global.last_delta = delta_time;

v_lightlevel = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Tutorial
if ( global.game_pause == false &amp;&amp; loading_step &gt; 4 )
{
if ( keyboard_check(vk_control) == true )
{
    if ( keyboard_check_pressed(ord('Z')) == true )
    {
    if ( instance_number(obj_tutorial_1) == 0 )
    {
    instance_create(obj_player.x,obj_player.y,obj_tutorial_1);
    }
    else
    {
    if ( instance_exists(obj_tutorial_1) == true )
    {
    with(obj_tutorial_1){instance_destroy();}
    instance_create(obj_player.x,obj_player.y,obj_tutorial_1);
    }
    }
    exit;
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto-save Feature
/*
render_saving = 0;
if ( autosave_time == 0 ){
/// world_data_save(string)

// Save Data Structures
if ( os_type == os_macosx )
{
var str1 = file_find_first(string(global.world_name),0);
if ( string_count(".sav",str1) == 0 )
{
str1 = ".sav";
}
else
{
str1 = "";
}
file_find_close();


buffer_resize(save_buffer1,2);buffer_resize(save_buffer2,2);
buffer_seek(save_buffer1,0,0);buffer_seek(save_buffer2,0,0);

//var file = file_text_open_write(string(global.world_name)+str1);
buffer_write(save_buffer1,buffer_u32,room_width);
buffer_write(save_buffer1,buffer_u32,room_height);
buffer_write(save_buffer1,buffer_s16,global.char_hair_style);
buffer_write(save_buffer1,buffer_s16,global.char_hair_color);
buffer_write(save_buffer1,buffer_s16,global.char_shirt);
buffer_write(save_buffer1,buffer_s16,global.char_skin);
buffer_write(save_buffer1,buffer_s16,global.char_legs);
buffer_write(save_buffer1,buffer_string,string(global.clothing_body));
buffer_write(save_buffer1,buffer_string,string(global.clothing_head));
buffer_write(save_buffer1,buffer_s8,obj_game.v_hotbar_set);
buffer_write(save_buffer1,buffer_f64,obj_game.x); // Player Position X
buffer_write(save_buffer1,buffer_f64,obj_game.y); // Player Position Y
buffer_write(save_buffer1,buffer_f32,global.pl_bleeding);
buffer_write(save_buffer1,buffer_f32,obj_game.c_food); // Food
buffer_write(save_buffer1,buffer_f32,obj_game.c_thirst); // Thirst
buffer_write(save_buffer1,buffer_f32,obj_game.c_health); // Health
buffer_write(save_buffer1,buffer_f32,obj_game.c_sanity); // Sanity
buffer_write(save_buffer1,buffer_f32,global.fishing_multiplier);
buffer_write(save_buffer1,buffer_f32,global.distance_travelled);
buffer_write(save_buffer1,buffer_u32,global.wolves_killed);
buffer_write(save_buffer1,buffer_u32,global.bears_killed);
buffer_write(save_buffer1,buffer_u32,global.bucks_killed);
buffer_write(save_buffer1,buffer_u32,global.stalkers_killed);
buffer_write(save_buffer1,buffer_u32,global.rippers_killed);
buffer_write(save_buffer1,buffer_u32,global.fish_caught);
buffer_write(save_buffer1,buffer_u32,global.trees_cut);
buffer_write(save_buffer1,buffer_u32,global.rocks_cut);
buffer_write(save_buffer1,buffer_f32,global.world_time); // Time Of Day
buffer_write(save_buffer1,buffer_u32,global.world_days); // Days Passed
buffer_write(save_buffer1,buffer_bool,obj_game_weather.rain_active); // Rain Active
buffer_write(save_buffer1,buffer_s32,obj_game_weather.rain_ini);
buffer_write(save_buffer1,buffer_s32,obj_game_weather.rain_time);
buffer_write(save_buffer1,buffer_f32,obj_game_weather.previous_temperature);
buffer_write(save_buffer1,buffer_u8,global.weather_mode);
buffer_write(save_buffer1,buffer_f32,global.world_temperature_base);
buffer_write(save_buffer1,buffer_f32,global.waypoint_x);
buffer_write(save_buffer1,buffer_f32,global.waypoint_y);
buffer_write(save_buffer1,buffer_string,ds_list_write(global.equip_list));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.waypoint_data_x));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.waypoint_data_y));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.waypoint_data_name));
buffer_write(save_buffer1,buffer_string,ds_grid_write(global.c_inventory_pack));
buffer_write(save_buffer1,buffer_string,ds_grid_write(global.c_stack_pack));;
buffer_write(save_buffer1,buffer_string,ds_grid_write(global.world_chunks));
buffer_write(save_buffer1,buffer_string,ds_grid_write(global.world_biomes));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_index));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_x));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_y));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_var1));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_var2));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_var3));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_var4));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.w_obj_angle));
//buffer_write(save_buffer1,buffer_string,ds_grid_write(global.world_tiles));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.ai_xdecal));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.ai_ydecal));
buffer_write(save_buffer1,buffer_string,ds_list_write(global.ai_sdecal));
file_delete(string(global.world_name+"_autosave")+str1);
//buffer_save(save_buffer1,string(global.world_name)+str1);


// Tile Saving
var ds_grid = global.world_tiles;
var width = ds_grid_width(ds_grid);
var height = ds_grid_height(ds_grid);
var i = 0;var r = 0;var next_id = 0;var first_id = 0;var index_add = 0;

buffer_write(save_buffer2,buffer_u16,width);
buffer_write(save_buffer2,buffer_u16,height);

var tile_list = ds_list_create();
for(i=0;i&lt;width;i++)
{
    for(r=0;r&lt;height;r++)
    {
        ds_list_add(tile_list, ds_grid[# i, r]);
    }
}

var list_size = ds_list_size(tile_list);
for (i = 0; i &lt; list_size; i++) {
    var consec_tiles = 1;
    first_id = tile_list[| i];
    next_id = tile_list[| i+1];
    while (first_id == next_id) {
        consec_tiles++; i++;
        next_id = tile_list[| i+1];
    }
    buffer_write(save_buffer2,buffer_u8,first_id);
    buffer_write(save_buffer2,buffer_u16,consec_tiles);
}

file_delete(string(global.world_name+"_autosave.sav"));
file_delete(string(global.world_name+"_autosave.world"));
buffer_async_group_begin(working_directory);
save_id=buffer_save_async(save_buffer1,string(global.world_name+"_autosave.sav"),0,buffer_tell(save_buffer1));
buffer_save_async(save_buffer2,string(global.world_name+"_autosave.world"),0,buffer_tell(save_buffer2));
buffer_async_group_end();
switch(global.setting_autosave){
case 0:{autosave_time=-1;break;}
case 1:{autosave_time=1800;break;}
case 2:{autosave_time=3600;break;}
case 3:{autosave_time=7200;break;}
case 4:{autosave_time=18000;break;}
case 5:{autosave_time=36000;break;}
}}
else
{
render_saving = 1;
world_data_save(global.world_name+"_autosave.sav");
switch(global.setting_autosave){
case 0:{autosave_time=-1;break;}
case 1:{autosave_time=1800;break;}
case 2:{autosave_time=3600;break;}
case 3:{autosave_time=7200;break;}
case 4:{autosave_time=18000;break;}
case 5:{autosave_time=36000;break;}}
}
}
else
{
autosave_time --;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Loading
switch(loading_step)
{
case 0:{
if ( global.save_loading == false ){loading_step=1;global.new_game = true;}
else{loading_step=2;}
break;}

case 1:{
// Generate water around map sides
i = 3;
repeat(room_width/128){
instance_create((i*128)-64,-64,obj_world_water1);
instance_create((i*128)-64,64,obj_world_water1);
instance_create((i*128)-64,192,obj_world_water1);
i++;}
i = 3;
repeat((room_width/128)-5){
instance_create((i*128)-64,room_height-64,obj_world_water1);
instance_create((i*128)-64,room_height-192,obj_world_water1);
instance_create((i*128)-64,room_height-320,obj_world_water1);
i++;}
i = 0;
repeat(room_height/128){
instance_create(-64,i*128,obj_world_water1);
instance_create(64,i*128,obj_world_water1);
instance_create(192,i*128,obj_world_water1);
i++;}
i = 3;
repeat(room_height/128){
instance_create(room_width-64,(i*128)-64,obj_world_water1);
instance_create(room_width-192,(i*128)-64,obj_world_water1);
instance_create(room_width-320,(i*128)-64,obj_world_water1);
i++;}
with(obj_world_water1){world_obj_delete(id);instance_destroy();}
loading_step = 3;global.map_loaded = false;
break;}

case 2:{
global.new_game = false;
global.world_loading = true;
if ( !global.map_loaded ){
world_data_load(global.world_name);
global.map_loaded = true;}
global.world_name = string_replace(global.world_name,".sav","");
global.world_name = string_replace(global.world_name,"_autosave","");
global.world_folder = global.world_name;
loading_step = 3;
break;}

case 3:{

loading_step = 4;
global.world_loading = false;

obj_player.previous_chunk_x = global.chunk_x;
obj_player.previous_chunk_y = global.chunk_y;

with(obj_player){event_user(0)}
break;}

case 4:{
var inst = instance_create(obj_player.x,obj_player.y,obj_popup_days_survived);
inst.days = global.world_days;
slot_1_id = ds_grid_get(global.c_inventory_pack,0,4);slot_2_id = ds_grid_get(global.c_inventory_pack,1,4);
slot_3_id = ds_grid_get(global.c_inventory_pack,2,4);slot_4_id = ds_grid_get(global.c_inventory_pack,3,4);
loading = false;
var prefix = "worlds\"+global.world_folder+"\chunks\";
var chunk_get = world_get_chunk(obj_player.x,obj_player.y);
var file = 0;

if ( global.new_game == true ){loading_step = 7;}else{loading_step = 7;}
/*
// Row 1
if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0]-1,chunk_get[1]-1);
if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}}

if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0],chunk_get[1]-1);
if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0]+1,chunk_get[1]-1);
if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}}

// Row 2
if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0]-1,chunk_get[1]);
if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}}

if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0],chunk_get[1]);
if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0]+1,chunk_get[1]);
if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}}

// Row 3
if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0]-1,chunk_get[1]+1);
if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}}

if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0],chunk_get[1]+1);
if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}else{
world_generate_chunk(chunk_get[0]+1,chunk_get[1]+1);
if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}}*/
break;}

case 5:{
loading_step = 6;
var i = 0;var list = ds_list_size(global.world_obj_ind);
for(i=list-1;i&gt;-1;i--){
with(global.world_obj_ind[|i]){instance_destroy();}
ds_list_delete(global.world_obj_data,i);
ds_list_delete(global.world_obj_ind,i);
}
var prefix = "worlds\"+global.world_folder+"\chunks\";
var chunk_get = world_get_chunk(obj_player.x,obj_player.y);
var file = 0;

if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]+1)+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0])+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]-1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]-1)+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1])+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1])+".txt");
world_generate_from_file(file);}

if ( file_exists(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]+1)+".txt") ){
file = file_text_open_read(prefix+"chunk"+string(chunk_get[0]-1)+"_"+string(chunk_get[1]+1)+".txt");
world_generate_from_file(file);}

break;}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Script
if ( mouse_check_button_pressed(mb_right) )
{switch(debug_set){
case "tree_mode":{instance_create(mouse_x,mouse_y,obj_world_tree_1);break;}
case "rock_mode":{instance_create(mouse_x,mouse_y,obj_world_rock_1);break;}
case "metal_mode":{instance_create(mouse_x,mouse_y,obj_world_rock_2);break;}
case "wolf_mode":{instance_create(mouse_x,mouse_y,obj_npc_wolf);break;}
case "bear_mode":{instance_create(mouse_x,mouse_y,obj_npc_bear);break;}
case "deer_mode":{instance_create(mouse_x,mouse_y,obj_npc_buck);break;}
case "bush_mode":{instance_create(mouse_x,mouse_y,
choose(obj_env_bush1,obj_env_plant1,obj_env_plant2,obj_env_plant3));break;}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save/Load Audio
if ( async_load[? "type"] == "audiogroup_load" ){
if(audio_track_started==false){
audio_play_sound(music_track,3,false);audio_track_started=true;}
if ( async_load[? "group_id"] == Ambience_Track1 ){
audio_play_sound(ambience_morning,3,true);}
if ( async_load[? "group_id"] == Ambience_Track2 ){
audio_play_sound(ambience_night,3,true);}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,10</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
