<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_solid_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
active = true;
selected = false;
col_orange = make_colour_rgb(210,112,0);
str1 = "";str2 = "";
mouse_frames = 0;
obj_name = "";
texture = 0;
type = 0;
rot = 0;
is_3d = 0;
index = 0;
alarm[0] = 1;
is_enabled = false;
fire_effect = true;
glow_effect = true;
smoke_effect = true;
fuel_max = 1;
cook_rate = 0.0004;
burn_rate = 0.0004;
fuel_count = 0;
fuel_item = ds_list_create();
fuel_gain = ds_list_create();
c_inv = ds_grid_create(2,2);
c_stack = ds_grid_create(2,2);
cooking_grid = ds_grid_create(2,2);
data_x = ds_list_create();
data_y = ds_list_create();
data_z1 = ds_list_create();
data_z2 = ds_list_create();
data_xsize = ds_list_create();
data_ysize = ds_list_create();

audio_index = 0;
audio_emitter1 = audio_emitter_create();
audio_emitter_position(audio_emitter1,x,y,0);
audio_emitter_falloff(audio_emitter1,128,256,1);
audio_emitter_gain(audio_emitter1,1);

ps_1 = part_system_create();
part_system_position(ps_1,x,y);
part_system_depth(ps_1,-9999999);
part_system_automatic_draw(ps_1,false);

ps_2 = part_system_create();
part_system_position(ps_2,x,y);
part_system_depth(ps_2,-y-512);
part_system_automatic_draw(ps_2,false);

part_system_automatic_draw(ps_1,false);
part_system_automatic_draw(ps_2,false);

pe_1 = part_emitter_create(ps_1);
pe_2 = part_emitter_create(ps_2);

// Smoke
pt_1 = part_type_create();
part_type_sprite(pt_1,spr_particle_cloud,false,false,false);
part_type_life(pt_1,140,180);
part_type_direction(pt_1,85,95,0,0);
part_type_speed(pt_1,1,2,0,0);
part_type_colour3(pt_1,c_gray,c_dkgray,c_black);
part_type_size(pt_1,0.5,0.65,0.02,0);
part_type_alpha3(pt_1,0.5,0.15,0);

// Fire
pt_2 = part_type_create();
part_type_sprite(pt_2,spr_particle_flare,false,false,false);
part_type_life(pt_2,45,45);
part_type_direction(pt_2,0,0,0,0);
part_type_speed(pt_2,0,0,0,0);
part_type_colour2(pt_2,col_orange,$0081BF);
part_type_size(pt_2,0.4,0.55,0.01,0);
part_type_alpha2(pt_2,0.75,0.1);
part_type_blend(pt_2,false);

// Fire Glow
pt_3 = part_type_create();
part_type_sprite(pt_3,spr_particle_sphere,false,false,false);
part_type_life(pt_3,25,120);
part_type_direction(pt_3,0,0,0,0);
part_type_speed(pt_3,0,0,0,0);
part_type_colour1(pt_3,$0081BF);
part_type_size(pt_3,4,5,0.05,0);
part_type_alpha2(pt_3,0.13,0.002);
part_type_blend(pt_3,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Event

part_system_destroy(ps_1);
part_system_destroy(ps_2);
part_type_destroy(pt_1);
part_type_destroy(pt_2);
part_type_destroy(pt_3);
audio_emitter_free(audio_emitter1);

// Drop contained items
var i = 0;var r = 0;var inst = 0;var item = 0;var stack = 0;
for(i=0;i&lt;ds_grid_width(c_inv);i++){
for(r=0;r&lt;ds_grid_height(c_inv);r++){
item = ds_grid_get(c_inv,i,r);
if ( item &gt; 0 ){
stack = ds_grid_get(c_stack,i,r);
inst = instance_create(x,y,obj_item_dropped);
inst.item_id = item;inst.item_stack = stack;
}}}

ds_list_destroy(fuel_item);
ds_list_destroy(fuel_gain);
ds_list_destroy(data_x);
ds_list_destroy(data_y);
ds_list_destroy(data_z1);
ds_list_destroy(data_z2);
ds_list_destroy(data_xsize);
ds_list_destroy(data_ysize);
ds_grid_destroy(c_inv);
ds_grid_destroy(c_stack);
ds_grid_destroy(cooking_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Emit Particles
if ( is_enabled == true )
{
    if ( audio_index == 0 )
    {audio_index = audio_play_sound_on(audio_emitter1,snd_fire_loop1,true,3);}
    if(glow_effect){part_emitter_burst(ps_1,pe_1,pt_3,1);}
    if(fire_effect){part_emitter_burst(ps_1,pe_1,pt_2,1);}
    if(smoke_effect){part_emitter_burst(ps_2,pe_2,pt_1,1);}
    if ( global.render_particle_quality == 1 )
    {alarm[0]=5;}else{alarm[0]=8;}
}
else
{
alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth Update
depth = w3d_depth(x,y,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cooking Logic
if ( is_enabled ){
var i = 0;var r = 0;var list = 0;var test = 0;
for(i=0;i&lt;ds_grid_height(c_inv);i++){
for(r=0;r&lt;ds_grid_width(c_inv);r++){
if ( c_inv[#r,i] &gt; 0 ){list = convert_string_to_list(global.item_data[#c_inv[#r,i],9],",");
if ( list[|1] != "0" ){if(cooking_grid[#r,i]&lt;real(list[|0])){cooking_grid[#r,i]+=cook_rate;}
// else it is finished cooking and we need to add the new item
else{cooking_grid[#r,i]=0;
// If it is a single item then we can just replace it with the cooked item
if(c_stack[#r,i]==1){c_inv[#r,i]=real(db_item_get_name(list[|1]));if(instance_exists(obj_inv_slot)){with(obj_inv_slot){event_user(0);}}}
// otherwise we will subtract one from the stack and use inventory_add() for the new item
else{test = inventory_add_object(real(db_item_get_name(list[|1])),1);c_stack[#r,i]--;
if(!test){inst = instance_create(x,y,objind(obj_item_dropped));inst.item_id=real(db_item_get_name(list[|1]));inst.item_stack=1;}
if(instance_exists(obj_inv_slot)){with(obj_inv_slot){event_user(0);global.v_item_moving = false;}}}
}}ds_list_destroy(list);}
if ( fuel_count &lt;= 0 &amp;&amp; c_inv[#r,i] != 0 ){var get_index = ds_list_find_index(fuel_item,global.item_data[#c_inv[#r,i],0]);
if ( get_index != -1 ){fuel_count+=real(fuel_gain[|get_index]);
if ( c_stack[#r,i] &gt; 1 ){c_stack[#r,i]--;}
else{c_stack[#r,i]=0;c_inv[#r,i]=0;}
if ( instance_exists(obj_inv_slot) ){with(obj_inv_slot){event_user(0);}}}}
}}
// Did we get re-fueled? if not then put out our fire and reset our cooking grid
if ( fuel_count &lt;= 0 ){ds_grid_clear(cooking_grid,0);fuel_count=0;is_enabled = false;}
else{fuel_count-=burn_rate;}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interact
/// Open Storage
if ( active == true )
{
    if ( global.render_gui_page == "none" ){
    if ( mouse_x &gt; x - sprite_width/2 &amp;&amp; mouse_x &lt; x + sprite_width/2 &amp;&amp; mouse_y &gt; y - sprite_height/2 &amp;&amp; mouse_y &lt; y + sprite_height/2 ){
            if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 ){
            selected = true;
            if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) ){
            if ( keyboard_check_pressed(obj_player.key_interact_main) or keyboard_check_pressed(obj_player.key_interact_alt) ){
            audio_play_sound(snd_click03,4,false);
            io_clear();
            v_gathering = false;
            global.render_gui_page = "inventory";
            global.render_characters = true;
            global.render_world_tiles = true;
            global.render_gui_1 = false;
            global.render_world_shadows = false;
            global.storage_id = id;
            inventory_ini_player();
            inventory_ini_storage(clamp(ds_grid_width(c_inv),1,8),clamp(ds_grid_height(c_inv),1,8),c_inv,c_stack);
            }
            if ( mouse_check_button_pressed(mb_left) ){
            audio_play_sound(snd_click03,4,false);
            if ( is_enabled == true )
            {
            burn_time = 0;
            burn_spent = 0;
            is_enabled = false;
            }
            else
            {
            if ( global.weather_mode &lt;= 1 or global.weather_mode &gt;= 4 )
            {is_enabled = true;}}}
            if ( mouse_check_button_pressed(mb_right) ){
            var inst = instance_create(x,y,obj_item_dropped);
            inst.item_id = db_item_get_name(obj_name);
            inst.item_stack = 1;
            instance_destroy();}}
        }else
        {selected = false;}
    }else
    {selected = false;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
