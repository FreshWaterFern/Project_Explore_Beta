<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_nomadstalker_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid_ai_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate AI
ai_path_id = path_add();
image_speed = 0.2;
v_speed = 4;
v_maxspeed = 4;
death_frames = 0;
destroy_obj = false;

collision_adjust();

/*
ai_state has multiple modes.
0 = asleep, 1 = wondering, 2 = watching, 3 = attacking, 4 = sleeping, 5 = walking away
*/
ai_knockback_cd = 0;
ai_knockback_time = 0;
ai_knockback_speed = 0;
ai_knockback_dir = 0;
ai_distance = 0;
ai_wait_time = 0;
ai_wait_max = 800;
ai_distance_set = 400;

ai_state = 0;
ai_wonder_time = 0;
ai_wonder_pause_time = 0;
ai_agro_time = 30;
ai_agro_count = 0;
ai_attack_cd = 0;
ai_pathing = false;
ai_path_update_time = 15;
ai_path_update_cd = 0;
ai_walkaway_time = 0;
no_spawn_items = false;

ai_hit = 0;
npc_health = 100;
ai_dead = false;
ai_spawn_resource = false;
ai_bleeding = 0;

v_bury_prompt = false;

pl_surface_type = 0;
pl_fs_dist = 0;
pl_fs_dist_max = 64;

world_obj_add(id);

/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>world_obj_delete(id);
path_delete(ai_path_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Move Speed
v_speed = v_maxspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Depth
if ( active == true )
{
if ( ai_dead == false )
{
depth = w3d_depth(x,y,-y);
}
else
{
depth = w3d_depth(x,y,-y+128);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Footstep Audio Handling

if ( y == yprevious )
{
pl_fs_dist += abs(x-xprevious);
}
else
{
pl_fs_dist += abs(x-xprevious)/1.1;
}
if ( x == xprevious )
{
pl_fs_dist += abs(y-yprevious);
}
else
{
pl_fs_dist += abs(y-yprevious)/1.1;
}

if ( pl_fs_dist &gt;= pl_fs_dist_max )
{
    pl_fs_dist = 0;
    var i = round(other.x/128);
    var r = round(other.y/128);
    pl_surface_type = ds_grid_get(global.world_tiles,i,r);
    switch(pl_surface_type)
    {
        case 0:
        {
        var snd_id = choose(fs_grass1,fs_grass2,fs_grass3,fs_grass4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 1:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 2:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 3:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 4:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 5:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 6:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 7:
        {
        var snd_id = choose(fs_concrete1,fs_concrete2,fs_concrete3,fs_concrete4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 8:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 9:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 10:
        {
        var snd_id = choose(fs_dirt1,fs_dirt2,fs_dirt3,fs_dirt4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 11:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 15:
        {
        var snd_id = choose(fs_gravel1,fs_gravel2,fs_gravel3,fs_gravel4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
        case 16:
        {
        var snd_id = choose(fs_wood1,fs_wood2,fs_wood3,fs_wood4);
        var sound = audio_play_sound_at(snd_id,x,y,0,128,1024,1,false,1);
        audio_sound_gain(sound,0.5,0);
        break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update World Data
world_obj_update(id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Knockback Variables And Hit Time

if ( ai_knockback_time &gt; 0 )
{
ai_knockback_time --;

if ( ai_knockback_cd &gt; 0 )
{
ai_knockback_cd --;
}

if ( ai_hit &gt; 0 )
{
    ai_hit --;
}
if ( !ai_hit &gt; 0 )
{
// Reset Move Speed
v_speed = v_maxspeed;
}

if ( ai_knockback_time &gt; 0 )
{
// Check For Collisions
if ( collision_circle(x,y,32,obj_solid_parent,false,true) )
{
x += lengthdir_x(ai_knockback_speed,direction-180);
y += lengthdir_y(ai_knockback_speed,direction-180);
}
else
{
direction = ai_knockback_dir;
x += lengthdir_x(ai_knockback_speed,direction);
y += lengthdir_y(ai_knockback_speed,direction);
}
// Check For Collisions
if ( collision_circle(x,y,32,obj_water_parent,false,true) )
{
x += lengthdir_x(ai_knockback_speed,direction-180);
y += lengthdir_y(ai_knockback_speed,direction-180);
}
else
{
direction = ai_knockback_dir;
x += lengthdir_x(ai_knockback_speed,direction);
y += lengthdir_y(ai_knockback_speed,direction);
}
// Keep Player Inside Room
if ( x-16 &lt; 0 or x+16 &gt; room_width )
{
    x = xprevious;
}
if ( y-16 &lt; 0 or y+16 &gt; room_height )
{
    y = yprevious;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Pathing Grid
//mp_grid_clear_rectangle(global.pathing_grid,xprevious-8,yprevious-8,xprevious+8,yprevious+8);
//mp_grid_add_rectangle(global.pathing_grid,x-8,y-8,x+8,y+8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI Update
if ( ai_dead == false &amp;&amp; ai_knockback_time == 0 )
{

// Collision Fix
var col_inst = collision_circle(x,y,8,obj_solid_ai_parent,false,true);
if ( col_inst != noone )
{
    x += lengthdir_x(v_speed/2,-point_direction(x,y,col_inst.x,col_inst.y));
    y += lengthdir_y(v_speed/2,-point_direction(x,y,col_inst.x,col_inst.y));
}

if ( ai_state != 0 )
{
    // Update Logic
    if ( ai_state == 1 )
    {
        if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; ai_distance_set )
        {
        ai_state = 2;
        ai_agro_count = 0;
        }
        else
        {
        image_index = 0;
        }
    }

if ( ai_state == 2 )
{
    ai_wait_time ++;
    if ( ai_wait_time &lt; ai_wait_max )
    {
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; ai_distance_set )
    {
    var i = 0;var r = 0;var collision = true;
    x += lengthdir_x(v_speed,-point_direction(x,y,obj_player.x,obj_player.y));
    y += lengthdir_y(v_speed,-point_direction(x,y,obj_player.x,obj_player.y));
    }
    else
    {
    x += lengthdir_x(v_speed/2,point_direction(x,y,obj_player.x,obj_player.y));
    y += lengthdir_y(v_speed/2,point_direction(x,y,obj_player.x,obj_player.y));
    }
    }
    else
    {
    ai_wait_time = 0;
    ai_state = 3;
    }
}

if ( ai_state == 3 )
{
    if ( point_distance(x,y,obj_player.x,obj_player.y) &gt; 1200 )
    {
    ai_state = 1;
    }
    else
    {
        if ( ai_attack_cd &lt; 120 )
        {
        ai_attack_cd ++;
        }
        if ( point_distance(x,y,obj_player.x,obj_player.y) &gt; 32 )
        {
            if ( ai_pathing == false )
            {
                if ( ai_path_update_cd == ai_path_update_time )
                {
                    if ( mp_grid_path( global.pathing_grid,ai_path_id,x,y,obj_player.x,obj_player.y,true) == 1 )
                    {
                    path_start(ai_path_id,v_speed,0,true);
                    path_speed = v_speed;
                    ai_path_update_cd = 0 ;                   
                    }
                    else
                    {
                    path_end();
                    ai_state = 5;
                    }
                }
                else
                {
                ai_path_update_cd ++;
                if ( ai_path_update_cd &gt; ai_path_update_time )
                {
                ai_path_update_cd = ai_path_update_time;
                }
                }
            }
            else
            {
            ai_pathing = false;
            }
        }
    else
    {
        if ( ai_attack_cd &gt;= 120 )
        {
        npc_attack_player(object_index,2);
        ai_attack_cd = 0;
        }
    }
    }
}

// Prevent the AI from walking off screen.
if ( x &lt;= 0 )
{
    x = xprevious;
    direction = -direction;
}
if ( x &gt;= room_width )
{
    x = xprevious;
    direction = -direction;
}
if ( y &lt;= 0 )
{
    y = yprevious;
    direction = -direction;
}
if ( y &gt;= room_height )
{
    y = yprevious;
    direction = -direction;
}

// Update Sprites
if ( direction &lt;= 330 &amp;&amp; direction &gt;= 215 )
{sprite_index = spr_nomadstalker_down;}else{
if ( direction &lt;= 145 &amp;&amp; direction &gt;= 35 )
{sprite_index = spr_nomadstalker_up;}else{
if ( direction &lt;= 215 &amp;&amp; direction &gt;= 145 )
{sprite_index = spr_nomadstalker_left;}else
if ( direction &lt; 35 or direction &gt; 330 )
{sprite_index = spr_nomadstalker_right;}}}

// Update Hit Check
if ( real(npc_health) &lt;= 0 )
    {ai_dead = true;}
}
else
{
    if ( ai_state != 5 )
    {
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 2500 )
    {
    ai_state = 1;
    }
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 300 )
    {
    ai_state = 3;
    }
    }
}
}

// AI Walk Away (No Path)
if ( ai_state == 5 )
{
    if ( ai_walkaway_time == 0 )
    {
    if ( mp_grid_path(global.pathing_grid,ai_path_id,x,y,xstart,ystart,true) == 1 )
    {
    path_start(ai_path_id,v_speed,0,true);
    path_speed = v_speed;
    ai_walkaway_time = point_distance(x,y,xstart,ystart);
    }
    else
    {ai_state = 1}
    }
    if ( x == xstart &amp;&amp; y == ystart )
    {
    ai_state = 1;
    }
    if ( ai_walkaway_time == 1 )
    {
    ai_state = 1;
    }
    if ( ai_walkaway_time &lt;= 0 )
    {
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 32 )
    {
    ai_state = 3;
    }
    }
    ai_walkaway_time --;
}

// If AI is Dead
if ( ai_dead == true )
{
    if ( death_frames &lt; 3 )
    {
    sprite_index = spr_nomadstalker_dead;death_frames += 0.025;image_index = death_frames;
    }
    else
    {
    death_frames = 4;image_speed = 0;sprite_index = spr_nomadstalker_dead;image_index = 3;
    }
    path_end();
    v_speed = 0;
    ai_hit = 0;speed = 0;
    if ( ai_spawn_resource == false )
    {
    var inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
    inst.item_id = world_get_item(irandom(7));
    inst.item_stack = 1;
    inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
    inst.item_id = world_get_item(irandom(7));
    inst.item_stack = 1;
    inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
    inst.item_id = world_get_item(irandom(7));
    inst.item_stack = 1;
    if ( irandom(8) == 4 )
    {
    inst = instance_create(x+random_range(-16,16),y+random_range(-16,16),obj_item_dropped);
    inst.item_id = choose(102);
    inst.item_stack = 1;
    }
    ai_spawn_resource = true;
    world_obj_update(id);
    }
    if ( point_distance(x,y,obj_player.x,obj_player.y) &gt; 2500 )
    {
    instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bleeding
if ( ai_bleeding &gt; 0 )
{
ai_bleeding --;
var bleed_chance = round(random_range(0,15));
if ( bleed_chance == 7 )
{
    var blood_spr = choose("spr_bleeding_0","spr_bleeding_1","spr_bleeding_2");
    ds_list_add(global.ai_xdecal,other.x);
    ds_list_add(global.ai_ydecal,other.y);
    ds_list_add(global.ai_sdecal,blood_spr);
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bury Animal Script
if ( ai_dead == true )
{
    if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 == true )
    {
    v_bury_prompt = true;
        if ( keyboard_check_pressed(ord('E')) == true )
        {
        var inst = instance_create(x,y,obj_popup_resourcegain);
        inst.text = "+10 Sanity";
        inst.v_color = c_blue;
        instance_create(x,y,obj_wolf_grave);
        obj_game.c_sanity += 10;
        instance_destroy();
        }
    }
    else
    {
    v_bury_prompt = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Collisions
if ( collision_rectangle(x-48,y-48,x+48,y+48,obj_solid_parent,false,true) )
{
direction = -direction;
x = xprevious;y = yprevious;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render AI
if ( active == true )
{
var color = c_white;
if ( ai_hit &gt; 0 )
{
color = c_red;
}

// Shadow
if ( ai_dead == false )
{
    draw_sprite(spr_shadow_wolf,0,x,y+4);
}
w3d_draw_sprite_ext(sprite_index,image_index,x,y,-1,1,1,image_angle,color,1);

if ( v_bury_prompt == true )
{
    draw_set_alpha(0.25);
    draw_set_font(font_gulim_12);draw_set_color(c_black);draw_set_halign(fa_center);draw_set_valign(fa_middle);
    draw_rectangle(x-(string_width("E")/2)-2,y-(string_height("E")/2)-30,x+(string_width("E")/2)+2,y+(string_height("E")/2)-32,false);
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(x,y-32,"E");
}
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
