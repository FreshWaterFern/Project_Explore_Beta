<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_furn_woodchest1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solid_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
obj_type = 0;
height = 32;
tex1 = sprite_get_texture(texture_woodchest_1,0);
tex2 = sprite_get_texture(texture_woodchest_2,0);
v_indoors = false;
alarm[0]=1;
mouse_frames = 0;
selected = false;
active = false;

index = 0;

c_inv = ds_grid_create(6,4);
c_stack = ds_grid_create(6,4);

world_obj_add(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove From World And Drop Contained Items
ai_grid_remove_self(x-(sprite_width/2),y-(sprite_height/2),x+(sprite_width/2),y+(sprite_height/2));
var i = 0;
var r = 0;
var inst = 0;
var item = 0;
var stack = 0;
for(i=0;i&lt;6;i++)
{
    for(r=0;r&lt;4;r++)
    {
        item = ds_grid_get(c_inv,i,r);
        if ( item != 0 )
        {
        stack = ds_grid_get(c_stack,i,r);
        inst = instance_create(x,y,obj_item_dropped);
        inst.item_id = item;
        inst.item_stack = stack;
        }
    }
}
world_obj_delete(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add To World Data &amp; AI Grid
world_obj_add(id);
ai_grid_add_self(x-(sprite_width/2),y-(sprite_height/2),x+(sprite_width/2),y+(sprite_height/2));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Depth
if ( active == true )
{if ( v_indoors == obj_player.v_indoors ){
depth=w3d_depth(x,y,-y+15);
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check If Indoors
var inst = collision_circle(x,y,8,obj_roof_parent,false,true);
if ( inst != noone )
{v_indoors = true;}
else
{v_indoors = false;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 or global.render_world_map == true )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open Storage
if ( active == true )
{
    if ( v_indoors == obj_player.v_indoors ){
    if ( global.render_gui_page == "none" )
    {
    if ( mouse_x &gt; x - sprite_width/2 &amp;&amp; mouse_x &lt; x + sprite_width/2 or global.tablet_mode == 1 )
    {
        if ( mouse_y &gt; y - sprite_height/2 &amp;&amp; mouse_y &lt; y + sprite_height/2 or global.tablet_mode == 1 )
        {
            if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 64 )
            {
            selected = true;
            if ( global.tablet_mode == 0 ){
            if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
            {
            if ( mouse_check_button_pressed(mb_left) )
            {
                audio_play_sound(snd_click03,4,false);
                io_clear();
                v_gathering = false;
                global.render_gui_page = "inventory";
                global.render_characters = true;
                global.render_world_tiles = true;
                global.render_gui_1 = false;
                global.render_world_shadows = false;
                global.storage_id = id;
                global.storage_type = 104;
                ds_grid_copy(global.c_inv_storage,c_inv);
                ds_grid_copy(global.c_stack_storage,c_stack);
                inventory_initiate(5);
            }
            if ( mouse_check_button_pressed(mb_right) )
            {
            var inst = instance_create(x,y,obj_item_dropped);
            inst.item_id = 104;
            inst.item_stack = 1;
            instance_destroy();
            }
            }
            }else{
            var x_draw = x-view_xview[0];var y_draw = y-view_yview[0];
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw-48,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
            {
                audio_play_sound(snd_click03,4,false);
                io_clear();
                v_gathering = false;
                global.render_gui_page = "inventory";
                global.render_characters = true;
                global.render_world_tiles = true;
                global.render_gui_1 = false;
                global.render_world_shadows = false;
                global.storage_id = id;
                global.storage_type = 104;
                ds_grid_copy(global.c_inv_storage,c_inv);
                ds_grid_copy(global.c_stack_storage,c_stack);
                inventory_initiate(5);
            }
            if ( device_mouse_check_button_pressed(0,mb_left) &amp;&amp; point_distance(x_draw+48,y_draw-36,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0)) &lt; 27 )
            {
            var inst = instance_create(x,y,obj_item_dropped);
            inst.item_id = 104;
            inst.item_stack = 1;
            instance_destroy();
            }
            }
        }
        else
        {selected = false;}
        }
        else
        {selected = false;}
    }
    else
    {selected = false;}
    }
    else
    {
    if ( global.storage_id == id )
    {world_obj_update(id);}
    else
    {selected = false;}
    }
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render GUI For Usage
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( v_indoors == obj_player.v_indoors ){
if ( selected == true )
{
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) or (global.tablet_mode == 1 &amp;&amp; point_distance(x,y,obj_player.x,obj_player.y) &lt; 64) )
{
// Set font and alignment
if ( global.tablet_mode == 0 ){draw_set_font(font_gulim_12)}else{draw_set_font(font_gulim_18)}
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var offset_tabx = 0;var offset_taby = 0;var sprite_set = spr_mouse_image;
if ( global.tablet_mode == 1 ){offset_tabx = 16;offset_taby = 32;sprite_set = spr_gui_tablet_tapbutton;}
draw_sprite_ext(sprite_set,mouse_frames,x_draw-32-offset_tabx,y_draw-16-offset_taby,-1,1,0,c_white,1);
draw_sprite_ext(sprite_set,mouse_frames,x_draw+32+offset_tabx,y_draw-16-offset_taby,1,1,0,c_white,1);
draw_text_outline("Open",x_draw-32-offset_tabx,y_draw+8,c_white,c_black);
draw_text_outline("Destroy",x_draw+32+offset_tabx,y_draw+8,c_white,c_black);
}
else
{
if ( global.tablet_mode == 0 ){
// Set font and alignment
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
if ( active == true )
{
if ( v_indoors == obj_player.v_indoors )
{
    if ( global.render_gui_page == "none" )
    {
    if ( selected == true )
    {
    draw_set_color(c_green);
    draw_set_alpha(0.25);
    draw_circle(x,y,56,false);
    draw_set_alpha(1);
    }
    }
draw_set_alpha(1);
draw_set_color(c_white);
if ( image_angle == 0 or image_angle == 180 )
{w3d_draw_cube_ext(tex2,tex1,x,y,0,24,48,24)}
else
{w3d_draw_cube_ext(tex2,tex1,x,y,0,24,24,48)}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>50,162</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
