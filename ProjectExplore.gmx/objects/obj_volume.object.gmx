<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ======================================= | Variable to change mode | == ========================================
/* Can handle this variable to your liking. Supports only two values ("0 and 1
When 0 is the normal state, when in 1 is the special or state Invisible */

if ( instance_number(obj_volume) &gt; 1 )
{
instance_destroy();
}
else
{

//========================================|Slipped activation buttons|=========================================

a0=false; //glide[MASTER Volume]
a1=false; //glide[Music]
a2=false; //glide[Sound]
a3=false; //glide[Ambience]

//==============================================|Enabling buttons "ON-OFF"|===========================================

         // Ini opens with the Registered Values Variables Of The Buttons "On-Off" There is not, you will be assigned to each, the UN value "ON" / true
         ini_open(working_directory + "audio.ini")
           


//=================================|Button starting position of each volume bar on axis X|==========================

         /* An ini file is opened for reading the value of the last position of the button of each volume bar when the game is closed,
          and if there is set to a value of "x + 70", which represents the maximum volume */
         
          xm=ini_read_real("Volume","xm",0.5) //Button[MASTER Volume]
          x1=ini_read_real("Volume","x1",0.5) //Button[Music]
          x2=ini_read_real("Volume","x2",0.5) //Button[Sound]
          x3=ini_read_real("Volume","x3",0.5) //Button[Ambience]
         ini_close()

//======================================================|Lists of audio|===================================================

/* Lists * ds_list * for each volume bar is created, here you must add the audio to be controlled
for each volume bar * With the function: "ds_list_add ()" *
*/

//Music list
list_music=ds_list_create();
ds_list_add(list_music,snd_splashintro);

//Sounds list
list_sounds=ds_list_create();
ds_list_add(list_sounds,snd_click01);
ds_list_add(list_sounds,fs_grass1);
ds_list_add(list_sounds,fs_grass2);
ds_list_add(list_sounds,fs_grass3);
ds_list_add(list_sounds,fs_grass4);
ds_list_add(list_sounds,fs_concrete1);
ds_list_add(list_sounds,fs_concrete2);
ds_list_add(list_sounds,fs_concrete3);
ds_list_add(list_sounds,fs_concrete4);
ds_list_add(list_sounds,fs_dirt1);
ds_list_add(list_sounds,fs_dirt2);
ds_list_add(list_sounds,fs_dirt3);
ds_list_add(list_sounds,fs_dirt4);
ds_list_add(list_sounds,fs_gravel1);
ds_list_add(list_sounds,fs_gravel2);
ds_list_add(list_sounds,fs_gravel3);
ds_list_add(list_sounds,fs_gravel4);
ds_list_add(list_sounds,fs_wood1);
ds_list_add(list_sounds,fs_wood2);
ds_list_add(list_sounds,fs_wood3);
ds_list_add(list_sounds,fs_wood4);
ds_list_add(list_sounds,snd_blood_explosion);
ds_list_add(list_sounds,snd_fire_loop1);
ds_list_add(list_sounds,snd_rain_loop1);
ds_list_add(list_sounds,snd_wind_loop1);
ds_list_add(list_sounds,snd_flesh_hit);
ds_list_add(list_sounds,snd_wood_chop);
ds_list_add(list_sounds,snd_rock_hit1);
ds_list_add(list_sounds,snd_rock_hit2);
ds_list_add(list_sounds,snd_rock_hit3);
ds_list_add(list_sounds,snd_weapon_swing1);
ds_list_add(list_sounds,snd_weapon_swing2);
ds_list_add(list_sounds,snd_weapon_swing3);
ds_list_add(list_sounds,snd_weapon_swing4);
ds_list_add(list_sounds,snd_exploder_scream1);
ds_list_add(list_sounds,snd_exploder_scream2);
ds_list_add(list_sounds,snd_sanity_loss1);
ds_list_add(list_sounds,snd_click01);
ds_list_add(list_sounds,snd_click02);
ds_list_add(list_sounds,snd_click03);
ds_list_add(list_sounds,snd_heartbeat_start);
ds_list_add(list_sounds,snd_heartbeat_main);
ds_list_add(list_sounds,snd_heartbeat_fade);

//Ambience list
list_ambience=ds_list_create();
ds_list_add(list_ambience,ambience_morning);
ds_list_add(list_ambience,ambience_night);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
  size_list=max(ds_list_size(list_music),ds_list_size(list_sounds),ds_list_size(list_ambience))
for(i=0; i &lt; size_list; i++){

 if(i &lt; ds_list_size(list_music)){
  music[i]=ds_list_find_value(list_music,i)
   if(audio_is_playing(music[i])){
    audio_sound_gain(music[i],x1*xm,0); //Volume music
   }
 }

 if(i &lt; ds_list_size(list_sounds)){
  sounds[i]=ds_list_find_value(list_sounds,i)
  if(audio_is_playing(sounds[i])){
   audio_sound_gain(sounds[i],x2*xm,0) //Volume sounds
  } 
 }

 if(i &lt; ds_list_size(list_ambience)){
  voices[i]=ds_list_find_value(list_ambience,i)
  if(audio_is_playing(voices[i])){
   audio_sound_gain(voices[i],x3*xm,0)//Volume voices
  } 
 } 
}

// ================================================ ========== | Master Volume | ==================================== ================
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//==============================================|Enabling buttons "ON-OFF"|===========================================

         ini_open(working_directory + "audio.ini");
//==========================|Pin end position of each volume bar on axis X (before closing the game)|==========================

          ini_write_real("Volume","xm",xm) //X MASTER start
          ini_write_real("Volume","x1",x1) //X Music start
          ini_write_real("Volume","x2",x2) //X Sound start
          ini_write_real("Volume","x3",x3) //X Ambience start
         ini_close()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//==============================================|Enabling buttons "ON-OFF"|===========================================

         ini_open(working_directory + "audio.ini")
//==========================|Pin end position of each volume bar on axis X (before closing the game)|==========================

          ini_write_real("Volume","xm",xm) //X MASTER start
          ini_write_real("Volume","x1",x1) //X Music start
          ini_write_real("Volume","x2",x2) //X Sound start
          ini_write_real("Volume","x3",x3) //X Ambience start
         ini_close()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>214,181</point>
    <point>214,214</point>
  </PhysicsShapePoints>
</object>
