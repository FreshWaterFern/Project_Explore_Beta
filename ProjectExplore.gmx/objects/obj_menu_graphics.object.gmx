<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_id = sprite_add("spr_main_menu_controls.png",0,false,false,0,32);

m_control = true;

ini_open("settings.ini");
global.m_vsync = real(ini_read_string("graphics","vsync","0"));
if ( !ini_key_exists("graphics","vsync") ){ini_write_string("graphics","vsync","0");}
global.m_vignette = real(ini_read_string("graphics","vignette","0"));
if ( !ini_key_exists("graphics","vignette") ){ini_write_string("graphics","vignette","1");}
global.m_blood = real(ini_read_string("graphics","blood","0"));
if ( !ini_key_exists("graphics","blood") ){ini_write_string("graphics","blood","0");}
global.m_particles = real(ini_read_string("graphics","particles","1"));
if ( !ini_key_exists("graphics","particles") ){ini_write_string("graphics","particles","0");}
global.m_res = ini_read_string("graphics","resolution","1280x720");
if ( !ini_key_exists("graphics","resolution") ){ini_write_string("graphics","resolution","1280x720");global.m_res="1280x720";}
global.m_fullscreen = real(ini_read_string("graphics","fullscreen","1"));
if ( !ini_key_exists("graphics","fullscreen") ){ini_write_string("graphics","fullscreen","0");}
global.render_temp = real(ini_read_string("graphics","temperature","1"));
if ( !ini_key_exists("graphics","temperature") ){ini_write_string("graphics","temperature","0");}
ini_close();
m_index = 0;

m_str[0] = "Back";
m_str[1] = "Shaders: ";
m_str[2] = "Blood: ";
m_str[3] = "V-Sync: ";
m_str[4] = "Particles: ";
m_str[5] = "Resolution: ";
m_str[6] = "Fullscreen: ";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unload Memory
sprite_delete(sprite_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Mouse Input

if ( m_control == true )
{
// Check for Right Mouse
if ( mouse_check_button_pressed(mb_right) or keyboard_check_pressed(vk_escape) )
{
io_clear();
audio_play_sound(snd_click01,4,false);
obj_menu_options.m_control = true;
m_control = false;
var get_aa_level = 0;
if ( global.m_aa == 0 ){get_aa_level = 0};if ( global.m_aa == 1 ){get_aa_level = 2};
if ( global.m_aa == 2 ){get_aa_level = 4};if ( global.m_aa == 3 ){get_aa_level = 8};
var display_w = 0;var display_h = 0;
if ( global.m_res == "800x600" ){display_w=800;display_h=600;}
if ( global.m_res == "1024x600" ){display_w=1024;display_h=600;}
if ( global.m_res == "1024x768" ){display_w=1024;display_h=768;}
if ( global.m_res == "1152x864" ){display_w=1152;display_h=864;}
if ( global.m_res == "1280x720" ){display_w=1280;display_h=720;}
if ( global.m_res == "1280x768" ){display_w=1280;display_h=768;}
if ( global.m_res == "1280x800" ){display_w=1280;display_h=800;}
if ( global.m_res == "1280x960" ){display_w=1280;display_h=960;}
if ( global.m_res == "1280x1024" ){display_w=1280;display_h=1024;}
if ( global.m_res == "1360x768" ){display_w=1360;display_h=768;}
if ( global.m_res == "1366x768" ){display_w=1366;display_h=768;}
if ( global.m_res == "1400x1050" ){display_w=1400;display_h=1050;}
if ( global.m_res == "1440x900" ){display_w=1440;display_h=900;}
if ( global.m_res == "1600x900" ){display_w=1600;display_h=900;}
if ( global.m_res == "1600x1200" ){display_w=1600;display_h=1200;}
if ( global.m_res == "1680x1050" ){display_w=1680;display_h=1050;}
if ( global.m_res == "1920x1080" ){display_w=1920;display_h=1080;}
display_reset(get_aa_level,global.m_vsync);
window_set_size(display_w,display_h);
instance_destroy();
exit;
}

draw_set_font(font_gulim_28);
// button 0
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[0]) )
{
    if ( mouse_y &gt; y+48-(string_height(m_str[0])/2) &amp;&amp; mouse_y &lt; y+48+(string_height(m_str[0])/2) )
    {
        //if ( m_index != 0 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 0;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }

// button 1
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[1]) )
{
    if ( mouse_y &gt; y+98-(string_height(m_str[1])/2) &amp;&amp; mouse_y &lt; y+98+(string_height(m_str[1])/2) )
    {
        //if ( m_index != 1 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 1;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }

// button 2
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[1]) )
{
    if ( mouse_y &gt; y+148-(string_height(m_str[2])/2) &amp;&amp; mouse_y &lt; y+148+(string_height(m_str[2])/2) )
    {
        //if ( m_index != 2 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 2;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }
// button 3
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[3]) )
{
    if ( mouse_y &gt; y+198-(string_height(m_str[3])/2) &amp;&amp; mouse_y &lt; y+198+(string_height(m_str[3])/2) )
    {
        //if ( m_index != 3 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 3;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }
// button 4
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[4]) )
{
    if ( mouse_y &gt; y+248-(string_height(m_str[4])/2) &amp;&amp; mouse_y &lt; y+248+(string_height(m_str[4])/2) )
    {
        //if ( m_index != 4 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 4;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }

// button 5
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[5]) )
{
    if ( mouse_y &gt; y+298-(string_height(m_str[5])/2) &amp;&amp; mouse_y &lt; y+298+(string_height(m_str[5])/2) )
    {
        //if ( m_index != 4 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 5;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }
    
// button 6
if ( mouse_x &gt; x+28 &amp;&amp; mouse_x &lt; x+160+string_width(m_str[6]) )
{
    if ( mouse_y &gt; y+348-(string_height(m_str[6])/2) &amp;&amp; mouse_y &lt; y+348+(string_height(m_str[6])/2) )
    {
        //if ( m_index != 4 ){audio_play_sound(snd_mouseover1,4,false);}
        m_index = 6;
        if ( mouse_check_button_pressed(mb_left) == true )
        {scr_graphics_menu(m_index)}exit;
    }
    else
    {
    m_index = -1;
    }
}
else
    {
    m_index = -1;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu
draw_set_color(c_white);
draw_set_alpha(1);
draw_sprite(sprite_id,0,x,y);
draw_set_font(font_gulim_28);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

if ( m_index != 0 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+48);}
draw_text(x+38,y+48,m_str[0]);
draw_set_color(c_white);

var str = "";
if ( global.m_vignette == 0 ){str = "Off"}if ( global.m_vignette == 1 ){str = "On"}

if ( m_index != 1 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+98);}
draw_text(x+38,y+98,m_str[1]+" "+string(str));
draw_set_color(c_white);

var str = "";
if ( global.m_blood == 0 ){str = "Off"}if ( global.m_blood == 1 ){str = "On"}

if ( m_index != 2 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+148);}
draw_text(x+38,y+148,m_str[2]+" "+string(str));
draw_set_color(c_white);

if ( global.m_vsync == 0 ){str = "Off"}if ( global.m_vsync == 1 ){str = "On"}

if ( m_index != 3 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+198);}
draw_text(x+38,y+198,m_str[3]+" "+string(str));
draw_set_color(c_white);

if ( global.m_particles == 0 ){str = "Low"}if ( global.m_particles == 1 ){str = "Normal"}

if ( m_index != 4 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+248);}
draw_text(x+38,y+248,m_str[4]+" "+string(str));
draw_set_color(c_white);

str = string(global.m_res);

if ( m_index != 5 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+298);}
draw_text(x+38,y+298,m_str[5]+" "+string(str));
draw_set_color(c_white);

if ( global.m_fullscreen == 0 ){str = "Off"}if ( global.m_fullscreen == 1 ){str = "On"}

if ( m_index != 6 )
{draw_set_color(c_gray);}
else
{draw_set_color(c_white);draw_sprite(spr_main_menu_arrow,0,x+22,y+348);}
draw_text(x+38,y+348,m_str[6]+" "+string(str));
draw_set_color(c_white);

if ( m_control == false )
{
draw_sprite_ext(sprite_id,0,x,y,1,1,0,c_dkgray,0.4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>256,256</point>
  </PhysicsShapePoints>
</object>
