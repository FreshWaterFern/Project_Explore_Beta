<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Steam System

randomize();

global.steam_api = false;
global.sa_babysteps = false;
global.sa_proudrockwarrior = false;
global.sa_lightupthenight = false;
global.sa_myfirstgun = false;
global.sa_gettingfishy = false;
global.sa_fishtacos = false;
global.sa_onenightstand = false;
global.sa_survivor = false;
global.sa_howtonotgocrazy = false;
global.sa_stoical = false;
global.sa_novicenavigator = false;
global.sa_28daysprior = false;
global.sa_getbaked = false;

global.ss_fishcaught = 0;
global.ss_wolfkills = 0;
global.ss_bearkills = 0;
global.ss_buckkills = 0;
global.ss_treescut = 0;
global.ss_rockscut = 0;

alarm[0]=60;

if steam_initialised()
{
   if ( steam_stats_ready() )
      {
      global.steamapi = true;
      if ( steam_is_overlay_enabled() )
      {
      }
      }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Graphics System

math_set_epsilon(0.0001);

if ( file_exists("graphics.ini") ){
ini_open("graphics.ini");
g_fxaa = ini_read_real("data","fxaa",0);
g_vsync = ini_read_real("data","vsync",0);
g_fs = ini_read_real("data","fullscreen",0);
g_res = ini_read_real("data","resolution",0);
}else{
ini_open("graphics.ini");
ini_write_real("data","fxaa",0);
ini_write_real("data","vsync",0);
ini_write_real("data","fullscreen",0);
ini_write_real("data","resolution",0);
g_fxaa = 0;g_vsync = 0;g_fs = 0;g_res = 0;}
ini_close();

res_count = 0;res_x=0;res_y=0;

display_reset(0,g_vsync);

resolution_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Progress Of All Achievements

if ( steam_get_achievement("Baby Steps") == true )
{global.sa_babysteps = true;}
      
if ( steam_get_achievement("Proud Rock Warrior") == true )
{global.sa_proudrockwarrior = true;}
      
if ( steam_get_achievement("Light Up The Night") == true )
{global.sa_lightupthenight = true;}
      
if ( steam_get_achievement("My First Gun") == true )
{global.sa_myfirstgun = true;}

if ( steam_get_achievement("Getting Fishy") == true )
{global.sa_gettingfishy = true;}

if ( steam_get_achievement("Fish Tacos") == true )
{global.sa_fishtacos = true;}

if ( steam_get_achievement("One Night Stand") == true )
{global.sa_onenightstand = true;}

if ( steam_get_achievement("Survivor") == true )
{global.sa_survivor = true;}

if ( steam_get_achievement("How To Not Go Crazy") == true )
{global.sa_howtonotgocrazy = true;}

if ( steam_get_achievement("Stoical") == true )
{global.sa_stoical = true;}

if ( steam_get_achievement("Novice Navigator") == true )
{global.sa_novicenavigator = true;}

if ( steam_get_achievement("28 Days Prior") == true )
{global.sa_28daysprior = true;}

if ( steam_get_achievement("Get Baked!") == true )
{global.sa_getbaked = true;}

// Steam Stat Retrieve
global.ss_fishcaught = steam_get_stat_int("fish_caught");

global.ss_wolfkills = steam_get_stat_int("wolf_kills");

global.ss_bearkills = steam_get_stat_int("bear_kills");

global.ss_buckkills = steam_get_stat_int("buck_kills");

global.ss_treescut = steam_get_stat_int("trees_cut");

global.ss_rockscut = steam_get_stat_int("rocks_cut");

room_goto(room_intro);

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Graphics System
ini_open("settings.ini");
global.m_vsync = real(ini_read_string("graphics","vsync","0"));
if ( !ini_key_exists("graphics","vsync") ){ini_write_string("graphics","vsync","0");}
global.m_shadow = real(ini_read_string("graphics","shadows","0"));
if ( !ini_key_exists("graphics","shadows") ){ini_write_string("graphics","shadows","0");}
global.m_aa = real(ini_read_string("graphics","aa","0"));
if ( !ini_key_exists("graphics","aa") ){ini_write_string("graphics","aa","0");}
global.m_particles = real(ini_read_string("graphics","particles","1"));
if ( !ini_key_exists("graphics","particles") ){ini_write_string("graphics","particles","0");}
global.m_res = ini_read_string("graphics","resolution","1280x720");
if ( !ini_key_exists("graphics","resolution") ){ini_write_string("graphics","resolution","1280x720");global.m_res="1280x720";}
global.m_fullscreen = real(ini_read_string("graphics","fullscreen","1"));
if ( !ini_key_exists("graphics","fullscreen") ){ini_write_string("graphics","fullscreen","0");}
ini_close();

    global.window_focus = true;

    var get_aa_level = 0;
    if ( global.m_aa == 0 ){get_aa_level = 0};if ( global.m_aa == 1 ){get_aa_level = 2};
    if ( global.m_aa == 2 ){get_aa_level = 4};if ( global.m_aa == 3 ){get_aa_level = 8};
    var display_w = 0;var display_h = 0;
    if ( global.m_res == "800x600" ){display_w=800;display_h=600;}
    if ( global.m_res == "1024x600" ){display_w=1024;display_h=600;}
    if ( global.m_res == "1024x768" ){display_w=1024;display_h=768;}
    if ( global.m_res == "1152x864" ){display_w=1152;display_h=864;}
    if ( global.m_res == "1280x720" ){display_w=1280;display_h=720;}
    if ( global.m_res == "1280x768" ){display_w=1280;display_h=768;}
    if ( global.m_res == "1280x800" ){display_w=1280;display_h=800;}
    if ( global.m_res == "1280x960" ){display_w=1280;display_h=960;}
    if ( global.m_res == "1280x1024" ){display_w=1280;display_h=1024;}
    if ( global.m_res == "1360x768" ){display_w=1360;display_h=768;}
    if ( global.m_res == "1366x768" ){display_w=1366;display_h=768;}
    if ( global.m_res == "1400x1050" ){display_w=1400;display_h=1050;}
    if ( global.m_res == "1440x900" ){display_w=1440;display_h=900;}
    if ( global.m_res == "1600x900" ){display_w=1600;display_h=900;}
    if ( global.m_res == "1600x1200" ){display_w=1600;display_h=1200;}
    if ( global.m_res == "1680x1050" ){display_w=1680;display_h=1050;}
    if ( global.m_res == "1920x1080" ){display_w=1920;display_h=1080;}
    display_reset(get_aa_level,global.m_vsync);
    window_set_size(display_w,display_h);
    if ( global.m_fullscreen == 1 )
    {
    window_set_fullscreen(true);
    }
    else
    {
    window_set_fullscreen(false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
draw_set_font(font_gulim_28);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_white);
if ( os_type != os_android ){
draw_text(view_wview[0]/2,view_hview[0]/2,"Connecting To Steam");}
else
{draw_text(view_wview[0]/2,view_hview[0]/2,"Loading...");}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
