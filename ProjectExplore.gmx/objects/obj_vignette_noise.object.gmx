<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.vignette_surface = 0;
//global.screen_surface = 0;
//global.glow_pass_surface = 0;
//global.blur_first_surface = 0;
//global.blur_final_surface = 0;
if ( global.render_vignette_shader == 1 )
{
uni_settings = shader_get_uniform(shd_vignette_noise, "u_settings");
uni_vignette_colour = shader_get_uniform(shd_vignette_noise, "u_vignette_colour");
col1 = 0;
col2 = 0;
col3 = 0;
vig_incircle = 0;
vig_outcircle = 0;
vig_noise = 0;

move=0;

var_resolution_x = view_wview;
var_resolution_y = view_hview;

global.vignette_surface = surface_create(view_wview,view_hview);
/*
global.screen_surface = surface_create(view_wview,view_hview);
global.glow_pass_surface = surface_create(view_wview,view_hview);
global.blur_first_surface = surface_create(view_wview,view_hview);
global.blur_final_surface = surface_create(view_wview,view_hview);*/

// Brightness/Contrast
uni_time = shader_get_uniform(shd_bright_contrast,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_bright_contrast,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_bright_contrast,"resolution");

uni_brightness_amount = shader_get_uniform(shd_bright_contrast,"brightness_amount");
var_brightness_amount = -0.1;

uni_contrast_amount = shader_get_uniform(shd_bright_contrast,"contrast_amount");
var_contrast_amount = 0.15;

/*
// Glow settings
hoz_sigma = shader_get_uniform(shd_hoz_blur, "sigma");
hoz_blurSize = shader_get_uniform(shd_hoz_blur, "blurSize");

vert_sigma = shader_get_uniform(shd_vert_blur, "sigma");
vert_blurSize = shader_get_uniform(shd_vert_blur, "blurSize");

tex_glow = shader_get_sampler_index(shd_glow, "s_multitex");
glow_boost = shader_get_uniform(shd_glow, "glow_boost");
size=4.0;
var_glow_boost = -0.4;*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader Transition List
global.ambient_shader = ds_grid_create(6,417);

var a = 0;var r = 0;var g = 0;var b = 0;

// Dawn
for(i=0;i&lt;24;i++)
{
global.ambient_shader[#0,i] = 255;global.ambient_shader[#1,i] = 229;
global.ambient_shader[#2,i] = 209;global.ambient_shader[#3,i] = 0.25;
}

// Dawn ==&gt; Day
r = 255;g = 229;b = 209;a = 0.25;
for(i=23;i&lt;63;i++)
{
r -= 0.00625g += 0.625;b += 0.775;
global.ambient_shader[#0,i] = r;global.ambient_shader[#1,i] = g;
global.ambient_shader[#2,i] = b;global.ambient_shader[#3,i] = a;
}

// Day
for(i=63;i&lt;169;i++)
{
global.ambient_shader[#0,i] = r;global.ambient_shader[#1,i] = g;
global.ambient_shader[#2,i] = b;global.ambient_shader[#3,i] = a;
}

//r = 255;g = 254;b = 232;a = 0;

// Day ==&gt; Dusk
for(i=169;i&lt;250;i++)
{
g -= 0.975;b -= 1.5625;
global.ambient_shader[#0,i] = 255;global.ambient_shader[#1,i] = g;
global.ambient_shader[#2,i] = b;global.ambient_shader[#3,i] = a;
}

//r = 255;g = 176;b = 107;a = 0.25;

// Dusk ==&gt; Night
for(i=250;i&lt;331;i++)
{
//r -= 0.4125;g -= 0.4625;b -= 1.3375;
global.ambient_shader[#0,i] = r;global.ambient_shader[#1,i] = g;
global.ambient_shader[#2,i] = b;global.ambient_shader[#3,i] = a;
}

//r = 255;g = 176;b = 107;a = 0.35;

// Night ==&gt; Morning
for(i=331;i&lt;417;i++)
{
g += 0.62352;b += 1.2;
global.ambient_shader[#0,i] = r;global.ambient_shader[#1,i] = g;
global.ambient_shader[#2,i] = b;global.ambient_shader[#3,i] = a;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wview[0],view_hview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vignette
// OLD VERSION \\
if ( global.render_vignette_shader == 1 )
{
if ( !surface_exists(global.vignette_surface) )
{global.vignette_surface = surface_create(view_wview,view_hview);}
var time = global.world_time;
/*
size=8.0;var_glow_boost = 0.25;

// Light Bloom
surface_set_target(global.screen_surface);
draw_surface(application_surface,0,0);
surface_reset_target();

surface_set_target(global.blur_first_surface);
shader_set(shd_hoz_blur);
shader_set_uniform_f(hoz_sigma,size);
draw_surface(application_surface,0,0);
shader_reset();
surface_reset_target();

surface_set_target(global.blur_final_surface);
shader_set(shd_vert_blur);
shader_set_uniform_f(vert_sigma,size);
draw_surface(global.blur_first_surface,0,0);
shader_reset();
surface_reset_target();

var glow_texture = surface_get_texture(global.blur_final_surface);

shader_set(shd_glow);
texture_set_stage(tex_glow, glow_texture);
shader_set_uniform_f(glow_boost, var_glow_boost);
draw_surface(global.screen_surface,0,0);
shader_reset();
*/

surface_set_target(global.vignette_surface);

shader_set(shd_vignette_noise);

/*
if ( time &gt;= 0 &amp;&amp; time &lt;= 3 )
{
if ( global.weather_mode == 0 )
{
shader_set_uniform_f(uni_settings, 1.1, 1.4, 0.06, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,203,195,156); //R,G,B - 0 to 255
}
if ( global.weather_mode == 1 )
{
shader_set_uniform_f(uni_settings, 1.2, 1.4, 0.1, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,203,195,156); //R,G,B - 0 to 255
}
}
if ( time &gt; 3 &amp;&amp; time &lt; 11 )
{
if ( global.weather_mode == 0 )
{
shader_set_uniform_f(uni_settings, 1.4, 1.1, 0.03, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,255,255,235); //R,G,B - 0 to 255
}
if ( global.weather_mode == 1 )
{
shader_set_uniform_f(uni_settings, 1.5, 1.1, 0.07, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,159,161,146); //R,G,B - 0 to 255
}
}
if ( time &gt;= 11 &amp;&amp; time &lt; 15 )
{
if ( global.weather_mode == 0 )
{
shader_set_uniform_f(uni_settings, 1.15, 1.3, 0.06, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,173,189,202); //R,G,B - 0 to 255
}
if ( global.weather_mode == 1 )
{
shader_set_uniform_f(uni_settings, 1.25, 1.3, 0.08, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,136,146,158); //R,G,B - 0 to 255
}
}
if ( time &gt;= 15 &amp;&amp; time &lt;= 20 )
{
if ( global.weather_mode == 0 )
{
shader_set_uniform_f(uni_settings, 1.2, 1.5, 0.07, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,90,96,137); //R,G,B - 0 to 255
}
if ( global.weather_mode == 1 )
{
shader_set_uniform_f(uni_settings, 1.2, 1.5, 0.07, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,60,64,92); //R,G,B - 0 to 255
}
}*/
shader_set_uniform_f(uni_settings,0.8,0.7,0.03,1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,global.ambient_shader[#0,floor((time/20)*416)],global.ambient_shader[#1,floor((time/20)*416)],global.ambient_shader[#2,floor((time/20)*416)]); //R,G,B - 0 to 255

draw_surface_ext(application_surface,0,0,1,1,0,c_white,1);
shader_reset();
surface_reset_target();
}

// NEW VERSION \\
/*
if ( time &gt;= 0 &amp;&amp; time &lt;= 3 )
{
shader_set_uniform_f(uni_settings, 1.1, 1.4, 0.06, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,203,195,156); //R,G,B - 0 to 255
col1 = 203;col2 = 195;col3 = 156;vig_incircle = 1.1;vig_outcircle = 1.4;vig_noise = 0.06;
}
if ( time &gt; 2 &amp;&amp; time &lt;= 3 )
{
    if ( col1 &lt; 255 )
    {col1 += 1;}
    if ( col2 &lt; 255 )
    {col2 += 1;}
    if ( col3 &lt; 255 )
    {col3 += 1;}
    if ( vig_incircle &lt; 1.4 )
    {vig_incircle += 0.002;}
    if ( vig_outcircle &gt; 1.1 )
    {vig_incircle -= 0.002;}
    if ( vig_noise &gt; 0.03 )
    {vig_incircle -= 0.0002;}
    shader_set_uniform_f(uni_settings,vig_incircle,vig_outcircle,vig_noise, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
    shader_set_uniform_f(uni_vignette_colour,col1,col2,col3); //R,G,B - 0 to 255
}
if ( time &gt; 3 &amp;&amp; time &lt; 11 )
{
shader_set_uniform_f(uni_settings, 1.4, 1.1, 0.03, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,255,255,235); //R,G,B - 0 to 255
}
if ( time &gt;= 11 &amp;&amp; time &lt; 15 )
{
shader_set_uniform_f(uni_settings, 1.15, 1.3, 0.06, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,173,189,202); //R,G,B - 0 to 255
}
if ( time &gt;= 15 &amp;&amp; time &lt;= 20 )
{
shader_set_uniform_f(uni_settings, 1.2, 1.5, 0.07, 1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_vignette_colour,90,96,137); //R,G,B - 0 to 255
}

draw_surface(application_surface,0,0);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Brightness Shader

if ( global.render_vignette_shader == 1 )
{

shader_set(shd_bright_contrast);
if ( global.weather_mode == 0 )
{
var_brightness_amount = 0.05;
var_contrast_amount = 0.2;
}
if ( global.weather_mode &gt;= 1 &amp;&amp; global.weather_mode &lt; 4 )
{
var_brightness_amount = -0.125;
var_contrast_amount = 0.25;
}
if ( global.weather_mode &gt;= 4 &amp;&amp; global.weather_mode &lt; 7 )
{
var_brightness_amount = -0.075;
var_contrast_amount = 0.15;
}
shader_set_uniform_f(uni_brightness_amount, var_brightness_amount);
shader_set_uniform_f(uni_contrast_amount, var_contrast_amount );
draw_surface(global.vignette_surface,0,0);
shader_reset();
surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
