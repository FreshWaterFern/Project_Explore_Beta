<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_door_wood</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_special_solid_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
obj_type = 2;
str_display = "";
mouse_over = false;
door_construct = 1;
door_closed = true;
door_locked = 0;
fake_x = 0;
fake_y = 0;
alarm[0]=1;
tex = sprite_get_texture(texture_wood_6,0);
construct_health = 500;
construct_maxhealth = 500;
display_health = 0;

active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete From World Data
world_obj_delete(id);
if ( image_angle == 0 )
{
ai_grid_remove_self(x-(sprite_width/2),y-(sprite_height/2),x+(sprite_width/2),y+(sprite_height/2));
}
else
{
ai_grid_remove_self(x-(sprite_height/2),y-(sprite_width/2),x+(sprite_height/2),y+(sprite_width/2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add To World Data &amp; AI Grid
if ( construct_health == 0 )
{
construct_health = construct_maxhealth;
}
world_obj_add(id);


if ( image_angle == 0 )
{
ai_grid_add_self(x-(sprite_width/2),y-(sprite_height/2),x+(sprite_width/2),y+(sprite_height/2));
}
else
{
ai_grid_add_self(x-(sprite_height/2),y-(sprite_width/2),x+(sprite_height/2),y+(sprite_width/2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Depth &amp;&amp; Special Collision
if ( active == true )
{
depth=w3d_depth(x,y,-y+10);

if ( image_angle == 0 )
{
    depth=w3d_depth(x,y,-y+10);
    sprite_index = spr_door_wood;
}
else
{
    depth=w3d_depth(x,y,-y+10);
    sprite_index = spr_door_wood_flipped;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Activity

if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 1400 or global.render_world_map == true )
{
active = true;
}
else
{
active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if mouse is over &amp;&amp; Deletion
if ( global.render_gui_page == "none" &amp;&amp; obj_player.v_item_equipped == 68 &amp;&amp; global.tablet_mode == 0 )
{
if ( door_construct == 1 )
{
var point_dist_test = point_distance(x,y,obj_player.x,obj_player.y);
if ( point_dist_test &lt; 96 )
{
if ( image_angle == 0 )
{
if ( mouse_x &gt; x+23-(sprite_width/2) &amp;&amp; mouse_x &lt; x+23+(sprite_width/2) &amp;&amp; mouse_y &gt; y-(sprite_height/2) &amp;&amp; mouse_y &lt; y+(sprite_height/2) )
{
        mouse_over = true;
}
else{mouse_over = false;}
}
else
{
if ( mouse_x &gt; x-(sprite_height/2) &amp;&amp; mouse_x &lt; x+(sprite_height/2) &amp;&amp; mouse_y &gt; y+23-(sprite_width/2) &amp;&amp; mouse_y &lt; y+23+(sprite_width/2) )
{
        mouse_over = true;
}
else{mouse_over = false;}
}

if ( mouse_over == true &amp;&amp; keyboard_check(vk_shift) == false )
{
    str_display = keyboard_get_str(obj_player.key_walk_main);
}
if ( mouse_over == true &amp;&amp; keyboard_check(vk_shift) == true )
{
    str_display = "Right Mouse Button";
}

if ( mouse_over == false )
{
    str_display = "";
}

if ( point_dist_test &lt; 96 )
{
if ( mouse_over == true &amp;&amp; keyboard_check(vk_shift) == true &amp;&amp; mouse_check_button_pressed(mb_right) == true )
{
var inst = instance_create(x,y,obj_item_dropped);
inst.item_id = 57;
inst.item_stack = 1;
instance_destroy();
}
}
}
else{mouse_over=false;str_display="";}
}
else{mouse_over=false;str_display="";}
}
else{mouse_over=false;str_display="";}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check For Foundation And Door
if ( door_construct == 1 )
{
var inst = instance_nearest(x,y,obj_foundation_parent);
var dist = point_distance(x,y,inst.x,inst.y);
if ( dist &gt; 96 )
{
var inst = instance_create(x,y,obj_item_dropped);
inst.item_id = 57;
inst.item_stack = 1;
instance_destroy();
}
}
else
{
var door = collision_point(x,y,obj_construct_door,false,true);
if ( door != noone ){instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open Door Controls
if ( point_distance(x,y,obj_player.x,obj_player.y) &lt; 48 &amp;&amp; global.render_gui_page == "none" )
{
    if ( image_angle == 0 ){fake_x=x+(sprite_width/2);fake_y=y+(sprite_height/2);}
    else {fake_x=x+(sprite_width/2);fake_y=y+(sprite_height/2);}
    var check_touch = 0;
    if ( global.tablet_mode == 1 ){if(device_mouse_check_button_pressed(0,mb_left)){
    if(point_distance(x,y,device_mouse_x(0),device_mouse_y(0))&lt;48){check_touch=1;}}}
    if ( keyboard_check_pressed(obj_player.key_interact_main) == true or keyboard_check_pressed(obj_player.key_interact_alt) == true or check_touch == 1 )
    {
    if ( door_locked == 0 )
    {
        var i = 0;var inst = 0;var dist = 2;var cleared = false;
        if ( instance_nearest(obj_player.x,obj_player.y,obj_construct_door) == id )
        {
        if ( image_angle == 0 )
        {
            image_angle = 90;
            // Loop Through Y Distance First
            dist = 2;
            for(i=0;i&lt;2;i++)
            {
                inst = collision_rectangle(x-16,y-66,x+16,y+66,obj_player,false,true)
                if ( inst != noone )
                {
                    inst.x += dist;
                    inst = collision_rectangle(x-16,y-66,x+16,y+66,obj_player,false,true)
                    if ( inst != noone )
                    {
                        inst.x = inst.xprevious;
                        inst.x -= dist;
                        inst = collision_rectangle(x-16,y-66,x+16,y+66,obj_player,false,true)
                        if ( inst != noone )
                        {
                        inst.x = inst.xprevious;
                        dist += 2;
                        i --;
                            if ( dist &gt; 128 )
                            {
                            cleared = false;break;
                            }
                        }else{cleared = true;break;}
                    }else{cleared = true;break;}
                }else{cleared = true;break;}
            }
        }
        else
        {
            image_angle = 0;
            // Loop Through Y Distance First
            dist = 2;
            for(i=0;i&lt;2;i++)
            {
                inst = collision_rectangle(x-66,y-24,x+66,y+14,obj_player,false,true)
                if ( inst != noone )
                {
                    inst.y += dist;
                    inst = collision_rectangle(x-66,y-24,x+66,y+14,obj_player,false,true)
                    if ( inst != noone )
                    {
                        inst.y = inst.yprevious;
                        inst.y -= dist;
                        inst = collision_rectangle(x-66,y-24,x+66,y+14,obj_player,false,true)
                        if ( inst != noone )
                        {
                        inst.y = inst.yprevious;
                        dist += 2;
                        i --;
                            if ( dist &gt; 128 )
                            {
                            cleared = false;break;
                            }
                        }else{cleared = true;break;}
                    }else{cleared = true;break;}
                }else{cleared = true;break;}
            }
        }
        world_obj_update(id);
        }
    }
    else
        {
        var inst = instance_create(fake_x,fake_y,obj_popup_resourcegain);
        inst.text = "Locked";
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Item Destruction Prompt

if ( global.render_gui_page == "none" )
{
if ( str_display != "" )
{
draw_set_color(c_white);
draw_set_font(font_gulim_12);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_outline(str_display,x,y,c_white,c_black);
}

// Render Health
if ( display_health &gt; 0 )
{
display_health -= 0.01;
draw_set_alpha(display_health);
draw_set_color(c_black);
draw_rectangle(x-35,y-6,x+35,y+6,false);
draw_set_color(c_red);
draw_rectangle(x-34,y-5,x+34,y+5,false);
draw_set_color(c_green);
draw_rectangle(x-34,y-5,x-34+((construct_health/construct_maxhealth)*68),y+5,false);
draw_set_color(c_white);
draw_set_font(font_gulim_8);
draw_set_halign(fa_center);draw_set_valign(fa_middle);
draw_set_color(c_white);
draw_text(x,y,string(construct_health)+"/"+string(construct_maxhealth));
draw_set_alpha(1);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render UI Pop-up
// Set font and alignment
if ( instance_nearest(obj_player.x,obj_player.y,obj_construct_door) == id ){
var color = 0;
if ( keyboard_check(obj_player.key_interact_main) == true or keyboard_check(obj_player.key_interact_alt) == true ){color=c_gray;}else{color=c_white;}
draw_set_font(font_gulim_22);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
if ( global.tablet_mode == 0 ){
if ( image_angle == 0 ){if ( point_distance(x+25,y,obj_player.x,obj_player.y) &lt; 42 ){
draw_text_outline(keyboard_get_str(obj_player.key_interact_main),x+25-view_xview[0],y-view_yview[0],color,c_black);}}
else{if ( point_distance(x,y+25,obj_player.x,obj_player.y) &lt; 46 ){
draw_text_outline(keyboard_get_str(obj_player.key_interact_main),x-view_xview[0],y+25-view_yview[0],color,c_black);}}}
else
{
if ( image_angle == 0 ){if ( point_distance(x+25,y,obj_player.x,obj_player.y) &lt; 42 ){
draw_text_outline("Tap",x+25-view_xview[0],y-view_yview[0],color,c_black);}}
else{if ( point_distance(x,y+25,obj_player.x,obj_player.y) &lt; 46 ){
draw_text_outline("Tap",x-view_xview[0],y+25-view_yview[0],color,c_black);}}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render
if ( active == true )
{
if ( mouse_over == false )
{
draw_set_color(c_white);
}
else
{
draw_set_color(c_dkgray);
}
if ( image_angle == 0 )
{
w3d_draw_cube(tex,x+26,y,32,46,8);
}
else
{
w3d_draw_cube(tex,x,y+26,32,8,46);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>50,162</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
