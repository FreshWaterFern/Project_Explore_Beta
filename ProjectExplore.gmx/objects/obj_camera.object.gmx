<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Post Processing Effects
render_surface = surface_create(view_wview,view_hview);
color_surface = surface_create(4,4);
tex_overlay = shader_get_sampler_index(shd_overlay,"texOverlay");


// Brightness/Contrast
uni_brightness_amount = shader_get_uniform(shd_bright_contrast,"brightness_amount");
var_brightness_amount = -0.1;

uni_contrast_amount = shader_get_uniform(shd_bright_contrast,"contrast_amount");
var_contrast_amount = 0.15;


// Vignette Noise
uni_settings = shader_get_uniform(shd_vignette_noise, "u_settings");
uni_vignette_colour = shader_get_uniform(shd_vignette_noise, "u_vignette_colour");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Camera Movement &amp; Surface Fix

if ( !global.game_pause ){

x+= (obj_player.x-x)/14; //10 is faster, 40 slower
y+= (obj_player.y-y)/14;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Application

// DISABLE ALPHABLEND BECAUSE SURFACES //
draw_enable_alphablend(0);
draw_set_color(c_black);
draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+1280,view_yview[0]+720,false);

draw_set_color(c_white);

var offset = application_get_position();

res_x = window_get_width();res_y = window_get_height();
better_scaling_draw_surface(application_surface,0,0,res_x/1280,res_y/720,0,c_white,1,obj_main_logic.g_sampling+1);

var base_h = 720;
var aspect = res_x/res_y;
var ww = display_get_width();
var hh = display_get_height();

if ( ww/hh &lt; 1.76 or ww/hh &gt; 1.79 ){
display_set_gui_maximise(res_x,res_y, 0, res_y-(res_y*1.7777));}

draw_enable_alphablend(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render GUIs

if ( !global.game_pause ){
surface_set_target(application_surface);

draw_set_alpha(1);

// obj_food_bush_parent
if (instance_exists(obj_food_bush_parent)){
with(obj_food_bush_parent){
if ( global.render_gui_page == "none" &amp;&amp; active ){
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];
if ( selected == true )
{
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
{
draw_set_alpha(1);
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
draw_sprite_ext(spr_mouse_image,mouse_frames,x_draw,y_draw-16,-1,1,0,c_white,1);
draw_text_outline("Collect Berries",x_draw,y_draw+8,c_white,c_black);
}
else
{
draw_set_alpha(1);
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}
}}}}

// obj_food_plant_parent
if (instance_exists(obj_food_plant_parent)){
with(obj_food_plant_parent){
if ( global.render_gui_page == "none" &amp;&amp; active ){
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];
if ( selected == true )
{
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
{
draw_set_alpha(1);
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
draw_sprite_ext(spr_mouse_image,mouse_frames,x_draw,y_draw-16,-1,1,0,c_white,1);
draw_text_outline("Collect Leaves",x_draw,y_draw+8,c_white,c_black);
}
else
{
draw_set_alpha(1);
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}
}}}}

// Basic Objects
if (instance_exists(obj_archetype_basic)){
with(obj_archetype_basic){
if ( global.render_gui_page == "none" &amp;&amp; active ){
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( selected == true ){
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) )
{
// Set font and alignment
draw_set_font(font_gulim_12)draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var sprite_set = spr_mouse_image;
draw_sprite_ext(sprite_set,mouse_frames,x_draw,y_draw-16,1,1,0,c_white,1);
draw_set_font(font_gulim_12);
draw_text_outline("Destroy",x_draw,y_draw+8,c_white,c_black);
}else{
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}}}}}

// Storage Objects
if (instance_exists(obj_archetype_storage)){
with(obj_archetype_storage){
if ( global.render_gui_page == "none" &amp;&amp; active ){
/// Render GUI For Usage
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];
draw_set_alpha(1);draw_set_color(c_white);
if ( selected == true ){
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) ){
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var sprite_set = spr_mouse_image;
draw_sprite_ext(sprite_set,mouse_frames,x_draw+48,y_draw-16,1,1,0,c_white,1);
draw_sprite_ext(sprite_set,mouse_frames,x_draw-48,y_draw-16,-1,1,0,c_white,1);
draw_set_font(font_gulim_12);
draw_text_outline("Open",x_draw-48,y_draw+8,c_white,c_black);
draw_text_outline("Destroy",x_draw+48,y_draw+8,c_white,c_black);
}else{
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}
}}}}}

// Cooking Objects
if (instance_exists(obj_archetype_cooking)){
with(obj_archetype_cooking){
if ( global.render_gui_page == "none" &amp;&amp; active ){
var x_draw = x-view_xview[0];
var y_draw = y-view_yview[0];

if ( selected == true ){
if ( keyboard_check(obj_player.key_walk_main) or keyboard_check(obj_player.key_walk_alt) ){
// Set font and alignment
draw_set_font(font_gulim_12)draw_set_halign(fa_center);draw_set_valign(fa_middle);

// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
var offset_tabx = 0;var offset_taby = 0;var sprite_set = spr_mouse_image;
draw_sprite_ext(sprite_set,mouse_frames,x_draw-80-offset_tabx,y_draw-16-offset_taby,-1,1,0,c_white,1);
draw_sprite_ext(sprite_set,mouse_frames,x_draw+80+offset_tabx,y_draw-16-offset_taby,1,1,0,c_white,1);
if ( is_enabled )
{draw_text_outline("Extinguish",x_draw-80-offset_tabx,y_draw+8,c_white,c_black);}
else
{draw_text_outline("Ignite",x_draw-80-offset_tabx,y_draw+8,c_white,c_black);}
draw_set_font(font_gulim_28);
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_interact_main)),x_draw,y_draw-24,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_interact_main)),x_draw,y_draw-24,c_dkgray,c_black);}
draw_set_font(font_gulim_12);
draw_text_outline("Destroy",x_draw+80+offset_tabx,y_draw+8,c_white,c_black);
draw_text_outline("Open",x_draw,y_draw+8,c_white,c_black);
}
else
{
// Set font and alignment
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
// Draw prompts
mouse_frames += 0.025;
if ( mouse_frames &gt;= 2 )
{mouse_frames = 0;}
if ( mouse_frames &lt; 1 )
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_white,c_black);}
else
{draw_text_outline(string(keyboard_get_str(obj_player.key_walk_main)),x_draw,y_draw,c_dkgray,c_black);}}}}}}


// LOADING SCREEN
draw_set_alpha(1);draw_set_halign(fa_center);draw_set_valign(fa_middle);
draw_set_font(font_gulim_28);draw_set_color(c_white);
switch(obj_game.loading_step)
{
case 0:{draw_background_ext(bg_loading,0,0,1,1,0,c_white,0.9);draw_text(640,360,"Initializing");break;}
case 1:{draw_background_ext(bg_loading,0,0,1,1,0,c_white,0.85);draw_text(640,360,"Generating island borders");break;}
case 2:{draw_background_ext(bg_loading,0,0,1,1,0,c_white,0.8);draw_text(640,360,"Reading save data");break;}
case 3:{draw_background_ext(bg_loading,0,0,1,1,0,c_white,0.75);draw_text(640,360,"Creating World And Objects");break;}
}

/*if ( autosave_time == 0 or render_saving &gt; 0 )
{
render_saving = 1000;
draw_set_alpha(0.5);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(font_gulim_28);
draw_set_color(c_white);
draw_text(640,256,"Saving...");
draw_set_alpha(1);
}*/

surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shaders

if ( !global.game_pause ){

if ( !surface_exists(render_surface) ){
render_surface = surface_create(view_wview,view_hview);}

if ( !surface_exists(color_surface) ){
color_surface = surface_create(4,4);}

draw_set_color(c_white);draw_set_alpha(1);

var time = global.world_time;
var env_color = make_colour_rgb(obj_game_render.color_red_blend,obj_game_render.color_green_blend,obj_game_render.color_blue_blend)

surface_set_target(color_surface);
draw_clear_alpha(0,0);
draw_set_color(env_color);
draw_set_alpha(obj_game_render.alpha);
draw_rectangle(0,0,4,4,0);
surface_reset_target();

draw_set_color(c_white);draw_set_alpha(1);

surface_set_target(render_surface);
draw_clear_alpha(0,0);
shader_set(shd_overlay);
texture_set_stage(tex_overlay,surface_get_texture(color_surface));
draw_surface(application_surface,0,0);
shader_reset();
surface_reset_target();

surface_set_target(render_surface);
shader_set(shd_bright_contrast);
var var_brightness_amount = -0.35;
var var_contrast_amount = 0.2;
shader_set_uniform_f(uni_brightness_amount, var_brightness_amount);
shader_set_uniform_f(uni_contrast_amount, var_contrast_amount );
draw_surface(application_surface,0,0);
shader_reset();
surface_reset_target();

// Vignette changes based on various parts of day

var vig_alpha = 0.75;
if ( global.world_time &gt;= 1 &amp;&amp; global.world_time &lt;= 4 ){
vig_alpha = clamp(0.75-((global.world_time-1)/6),0,1);}

if ( global.world_time &gt; 4 &amp;&amp; global.world_time &lt;= 9 ){
vig_alpha = clamp(0.25-((global.world_time-4)/40),0,1);}

if ( global.world_time &gt; 9 &amp;&amp; global.world_time &lt;= 14 ){
vig_alpha = clamp(0.125+((global.world_time-9)/72.5),0,1);}

if ( global.world_time &gt; 14 &amp;&amp; global.world_time &lt;= 20 ){
vig_alpha = clamp(0.25+((global.world_time-14)/12),0,1);}

surface_set_target(render_surface);
shader_set(shd_vignette_noise);
//shader_set_uniform_f(uni_settings,(0.8*(vig_alpha+1)),(0.7*(vig_alpha+1))/2,0.03,1); //vignette inner circle size, vignette outter circle size, noise strength, noise enable (1 or 0 only).
shader_set_uniform_f(uni_settings,0.8,0.5,0.07,1);
shader_set_uniform_f(uni_vignette_colour,obj_game_render.color_red,obj_game_render.color_green,obj_game_render.color_blue); //R,G,B - 0 to 255
draw_surface_ext(application_surface,0,0,1,1,0,c_white,vig_alpha+0.5);
shader_reset();
surface_reset_target();

draw_surface(render_surface,0,0);

draw_set_color(c_white);draw_set_alpha(1);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Mouse Prompt
if ( instance_exists(obj_water_parent) ){
with(obj_player){
var sprite_set = spr_mouse_image;
if ( pl_refill_display == true )
    {
    draw_set_alpha(1);draw_set_color(c_white);
    draw_sprite(sprite_set,mouse_frames,x,y-48);
    mouse_frames += 0.025;
    if ( mouse_frames &gt;= 2 ){mouse_frames = 0;}
    }
if ( global.fishing_water_id != noone &amp;&amp; global.tablet_mode == 0 )
{if ( global.fishing_water_id.fishing == false ){
    draw_set_alpha(1);draw_set_color(c_white);
    draw_sprite(sprite_set,mouse_frames,x,y-48);
    mouse_frames += 0.025;
    if ( mouse_frames &gt;= 2 ){mouse_frames = 0;}
}}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render World Objects ( Batches )

if ( !global.game_pause ){

draw_set_color(c_white);draw_set_alpha(1);

// Water
if ( instance_exists(obj_water_parent) ){
with(obj_water_parent){
if ( active == true )
{draw_sprite(spr_water_still,image_index,x,y);
if ( fishing == true )
{
    draw_set_alpha(1);
    draw_set_color(c_red);
    draw_circle(bobber_x+64,bobber_y+64,4,false);
    draw_set_color(c_white);
    draw_circle(bobber_x+64,bobber_y+64,2,false);
    draw_set_color(c_black);
    draw_circle(bobber_x+64,bobber_y+64,4,true);
    var length_dirx = obj_player.x+lengthdir_x(26,obj_player.image_angle+90);
    var length_diry = obj_player.y+lengthdir_y(26,obj_player.image_angle+90);
    draw_line_width(bobber_x+64,bobber_y+64,length_dirx,length_diry,2);
    bobber_x += random_range(-0.5,0.5);
    bobber_y += random_range(-0.5,0.5);
    // Keep bobber in water
    if ( bobber_x &gt; x+124 )
    {
        bobber_x --;
    }
    if ( bobber_x &lt; x+4 )
    {
        bobber_x ++;
    }
    if ( bobber_y &gt; y+124 )
    {
        bobber_y --;
    }
    if ( bobber_y &lt; y+4 )
    {
        bobber_y ++;
    }
}}}}

// Detail Parent
if ( instance_exists(obj_detail_parent) ){
with(obj_detail_parent){
if ( active == true ){
if ( selected == true ){
draw_set_color(c_green);
draw_set_alpha(0.25);
draw_circle(x,y,56,false);
draw_set_alpha(1);}
draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,c_white,1);}}}

// Plants
if ( instance_exists(obj_archetype_plant) ){
with(obj_archetype_plant){
if ( active ){
if ( selected == true ){
draw_set_alpha(0.25);draw_set_color(c_green);
draw_circle(x,y+(spr_height/2),16,false);
draw_set_color(c_white);draw_set_alpha(1);}
draw_image(sprite,0,x,y+(spr_height/2));
}}}

// Rocks
if (instance_exists(obj_world_rock_1)){
with(obj_world_rock_1){if ( active == true ){
draw_sprite_ext(sprite_index,0,x,y,scale_x,scale_y,direction,c_white,1);}}}
if (instance_exists(obj_world_rock_2)){
with(obj_world_rock_2){if ( active == true ){
draw_sprite_ext(sprite_index,0,x,y,scale_x,scale_y,direction,c_white,1);}}}

// Rocks
if (instance_exists(obj_world_rock_2)){
with(obj_world_rock_2){if ( active == true ){
draw_sprite_ext(sprite_index,0,x,y,scale_x,scale_y,direction,c_white,1);}}}
if (instance_exists(obj_world_rock_2)){
with(obj_world_rock_2){if ( active == true ){
draw_sprite_ext(sprite_index,0,x,y,scale_x,scale_y,direction,c_white,1);}}}

// obj_archetype_basic
if ( instance_exists(obj_archetype_basic) ){
with(obj_archetype_basic){
if ( selected == true ){
draw_set_color(c_green);
draw_set_alpha(0.25);
draw_circle(x,y,sprite_width*2,false);
draw_set_alpha(1);
draw_set_color(c_white);}

draw_set_alpha(1);
draw_set_color(c_white);
if ( is_3d != 0 ){
var i = 0;var px = 0;var py = 0;var theta = degtorad(angle);
if ( !rot ){for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y+data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}}else{
switch(angle){
case 0:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y+data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}break;}
case 90:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_ysize[|i],data_xsize[|i]);}break;}
case 180:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x-data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}break;}
case 270:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_ysize[|i],data_xsize[|i]);}break;}}}
}else
{w3d_draw_sprite_ext(sprite_index,0,x,y,0,1,1,angle,c_white,1);}
}}

// obj_archetype_storage
if ( instance_exists(obj_archetype_storage) ){
with(obj_archetype_storage){
if ( selected == true ){
draw_set_color(c_green);
draw_set_alpha(0.25);
draw_circle(x,y,sprite_width*2,false);
draw_set_alpha(1);
draw_set_color(c_white);}

draw_set_alpha(1);
draw_set_color(c_white);
if ( is_3d != 0 ){
var i = 0;var px = 0;var py = 0;var theta = degtorad(angle);
if ( !rot ){for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y+data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}}else{
switch(angle){
case 0:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y+data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}break;}
case 90:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_ysize[|i],data_xsize[|i]);}break;}
case 180:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x-data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}break;}
case 270:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_ysize[|i],data_xsize[|i]);}break;}}}
}else
{w3d_draw_sprite_ext(sprite_index,0,x,y,0,1,1,angle,c_white,1);}
}}

// obj_archetype_cooking
if ( instance_exists(obj_archetype_cooking) ){
with(obj_archetype_cooking){
if ( selected == true ){
draw_set_color(c_green);
draw_set_alpha(0.25);
draw_circle(x,y,sprite_width*2,false);
draw_set_alpha(1);
draw_set_color(c_white);}

draw_set_alpha(1);
draw_set_color(c_white);
if ( is_3d != 0 ){
var i = 0;var px = 0;var py = 0;var theta = degtorad(angle);
if ( !rot ){for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y+data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}}else{
switch(angle){
case 0:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y+data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}break;}
case 90:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_ysize[|i],data_xsize[|i]);}break;}
case 180:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x-data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_xsize[|i],data_ysize[|i]);}break;}
case 270:{for(i=0;i&lt;ds_list_size(data_x);i++)
{w3d_draw_cube_ext(texture,texture,x+data_x[|i],y-data_y[|i],data_z1[|i],data_z2[|i],data_ysize[|i],data_xsize[|i]);}break;}}}
}else
{w3d_draw_sprite_ext(sprite_index,0,x,y,0,1,1,angle,c_white,1);}

if ( global.sv_tick_step == global.sv_tick_rate ){world_obj_update(id);}

}}

/// Items On The Ground
if ( instance_exists(obj_item_dropped) ){
draw_set_color(c_black);draw_set_alpha(0.2);
with(obj_item_dropped){
if ( active == true ){
draw_circle(x,y,12+((z/15)*2),false);}}
draw_set_color(c_white);draw_set_alpha(1);
with(obj_item_dropped){
if ( global.item_data[#item_id,4] != 4 ){var spr = global.item_data[#item_id,2];}else{var spr = ds_list_find_value(global.item_data[#item_id,2],0);}
if ( mouse_over == true ){
if ( pl_inrange == false )
{w3d_draw_image_ext(spr,0,x,y,z,image_xscale,image_yscale,image_angle,c_red,1);}
else
{w3d_draw_image_ext(spr,0,x,y,z,image_xscale,image_yscale,image_angle,c_lime,1);}
}
else
{w3d_draw_image_ext(spr,0,x,y,z,image_xscale,image_yscale,image_angle,c_white,1);}}
with(obj_item_dropped){
if ( active == true ){
if ( mouse_over == true ){
draw_set_color(c_white);draw_set_font(font_gulim_8);
draw_set_halign(fa_center);draw_set_valign(fa_middle);
draw_text_outline(string(global.item_data[#item_id,0]+" ("+string(item_stack)+"x)"),x,y-20,c_white,c_black);
}}}}

// Tree Shadows
if (instance_exists(obj_world_tree_1)){
with(obj_world_tree_1){if ( active == true ){
if ( global.render_world_shadows == true &amp;&amp; resource_count &gt;= resource_max ){
draw_sprite_ext(spr_tree_top1,0,x,y,1.2,1.2,tree_top_rot,c_black,0.3);}}}}

// Cooking Objects
/*|| Light Glow ||*/
if (instance_exists(obj_archetype_cooking)){
with(obj_archetype_cooking){
if ( global.render_gui_page == "none" &amp;&amp; is_enabled &amp;&amp; active ){
if(glow_effect){draw_sprite_ext(spr_lightglow_1,0,x,y,random(1),random(1),0,col_orange,0.5);}
}}}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Placement &amp; Player
if ( instance_exists(obj_player) ){
with(obj_player){
if ( v_item_equipped &gt; 0 ){
if ( global.item_data[#v_item_equipped,4] == 2 ){ // Is it a world placement item?
var obj_id = db_object_get_name(global.item_data[#v_item_equipped,0]);
var place_sprite = global.object_data[#obj_id,2];
var is_rot = real(global.object_data[#obj_id,6]);

// Handle mouse movement and limited distance placement
var get_dir = point_direction(x,y,mouse_x,mouse_y);
if ( point_distance(x,y,mouse_x,mouse_y) &gt; real(global.item_data[#v_item_equipped,5]) )
{v_con_x = x+lengthdir_x(real(global.item_data[#v_item_equipped,5]),get_dir);v_con_y = y+lengthdir_y(real(global.item_data[#v_item_equipped,5]),get_dir);}
else
{v_con_x = mouse_x;v_con_y = mouse_y;}

// Handle rotations
if ( is_rot ){
if ( mouse_wheel_up() ){v_con_angle += 90;}
if ( mouse_wheel_down() ){v_con_angle -= 90;}
if ( v_con_angle &gt;= 360 ){v_con_angle = 0;}
if ( v_con_angle &lt;= -90 ){v_con_angle = 270;}}

// Check for water and collisions
var width = sprite_get_width(place_sprite)*0.5;var height = sprite_get_height(place_sprite)*0.5;var v_con_col = false;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_solid_parent,false,true) != noone ){v_con_col = true;}else{
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_player,false,false) != noone ){v_con_col = true;}else{
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_water_parent,false,true) != noone ){v_con_col = true;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_foundation_parent,false,true) != noone ){v_con_col = false;}}}}
if ( v_con_col == false ){
if ( mouse_check_button_pressed(mb_left) ){var obj_inst = 0;
switch(global.object_data[#obj_id,3]){
case 0:{obj_inst=obj_archetype_storage;break;}
case 1:{obj_inst=obj_archetype_basic;break;}
case 2:{obj_inst=obj_archetype_cooking;break;}}
player_create_object(v_con_x,v_con_y,obj_inst,v_con_angle); // Create instance
inventory_get_item(v_item_equipped,1,1);// Clear it from inventory
}}

// Draw hitbox
if ( !v_con_col ){var col = c_green;}else{var col = c_red;}
draw_sprite_ext(place_sprite,0,v_con_x,v_con_y,1,1,v_con_angle,col,0.75);

// Show arrow to indicate facing direction
draw_set_color(c_black);draw_set_alpha(0.5);
if ( is_rot ){
var dist = sprite_get_width(place_sprite)/1.5;
switch(v_con_angle){
case 0:draw_arrow(v_con_x-(dist*0.5),v_con_y,v_con_x+(dist*0.5),v_con_y,5)break;
case 90:draw_arrow(v_con_x,v_con_y+(dist*0.5),v_con_x,v_con_y-(dist*0.5),5)break;
case 180:draw_arrow(v_con_x+(dist*0.5),v_con_y,v_con_x-(dist*0.5),v_con_y,5)break;
case 270:draw_arrow(v_con_x,v_con_y-(dist*0.5),v_con_x,v_con_y+(dist*0.5),5)break;
}}draw_set_color(c_white);draw_set_alpha(1);

}



if ( global.item_data[#v_item_equipped,4] == 4 ){ // Is it a plantable item?
var _id = v_item_equipped;
var spr_list = global.item_data[#_id,2];
var place_sprite = spr_list[|ds_list_size(spr_list)-1];
var list = convert_string_to_list(global.item_data[#_id,6],",");
var place_range = real(list[|2]);ds_list_destroy(list);

// Handle mouse movement and limited distance placement
var get_dir = point_direction(x,y,mouse_x,mouse_y);
if ( point_distance(x,y,mouse_x,mouse_y) &gt; place_range )
{v_con_x = x+lengthdir_x(real(place_range),get_dir);v_con_y = y+lengthdir_y(place_range,get_dir);}
else
{v_con_x = mouse_x;v_con_y = mouse_y;}

v_con_x = (round(v_con_x/32))*32;v_con_y = (round(v_con_y/32))*32;


// Check for water and collisions
var width = sprite_get_width(place_sprite)*0.5;var height = sprite_get_height(place_sprite)*0.5;var v_con_col = false;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_solid_parent,false,true) != noone ){v_con_col = true;}else{
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_water_parent,false,true) != noone ){v_con_col = true;
if ( collision_rectangle(v_con_x-width,v_con_y-height,v_con_x+width,v_con_y+height,obj_foundation_parent,false,true) != noone ){v_con_col = false;}}}
if ( v_con_col == false ){
if ( mouse_check_button_pressed(mb_left) ){var obj_inst = 0;
player_create_plant(v_con_x,v_con_y); // Create instance
inventory_get_item(v_item_equipped,1,1);// Clear it from inventory
}}

// Draw hitbox
if ( !v_con_col ){var col = c_green;}else{var col = c_red;}
var spr_height2 = image_get_height(ds_list_find_value(global.item_data[#_id,2],1));
draw_image_ext(place_sprite,0,v_con_x,v_con_y+(spr_height2/2)-4,1,1,0,col,0.75);
draw_set_color(c_white);draw_set_alpha(1);
}}

if ( global.render_characters == true )
{
var v_color = c_white;
if ( v_is_moving == true )
{
if ( keyboard_check(key_walk_main) or keyboard_check(key_walk_alt) )
{
image_speed = 0.25;
}
else
{
image_speed = 0.45;
}
}
else
{
image_index = 0;
image_speed = 0;
}

if ( v_item_equipped &gt; 0 ){
var item_type = global.item_data[#v_item_equipped,4];
if ( item_type == 1 or item_type == 6 ){ // If the item is the correct type to be drawn on the player
var list = convert_string_to_list(global.item_data[#v_item_equipped,5],",");
var spr_item = global.item_data[#v_item_equipped,2];
if ( real(list[|4]) != 0 &amp;&amp; real(list[|5]) != 0 ){
image_set_offset(spr_item,real(list[|4]),real(list[|5]));}
//draw_image(spr_item,0,x,y);
var y_math = y+lengthdir_y(real(list[|1]),direction+real(list[|3]));
var x_math = x+lengthdir_x(real(list[|0]),direction+real(list[|2]));
draw_image_ext(spr_item,1,x_math,y_math,0.8,0.8,image_angle,c_white,1);
spr = global.ds_char_skin_item[| global.char_skin];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);
ds_list_destroy(list);
image_set_offset(spr_item,image_get_width(spr_item)/2,image_get_height(spr_item)/2);
}}

var spr = global.ds_char_legs[| global.char_legs];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);

if ( v_draw_equipped == false )
{
spr = global.ds_char_skin_noitem[| global.char_skin];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);
}

spr = global.ds_char_shirt[| global.char_shirt];
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);

// Body Clothing
if ( global.clothing_body != "" )
{spr = global.item_data[#global.equip_list[|1],5];
draw_image_ext(spr,0,x,y,1,1,image_angle,c_white,1);
}

// Head Clothing
if ( global.clothing_head != "" )
{spr = global.item_data[#global.equip_list[|0],5];
draw_image_ext(spr,0,x,y,1,1,image_angle,c_white,1);
}
else
{
// Render Hair
switch(global.char_hair_style)
{
    case 0:
    {
    spr = global.ds_char_hair1[| global.char_hair_color];break;
    }
    case 1:
    {
    spr = global.ds_char_hair2[| global.char_hair_color];break;
    }
    case 2:
    {
    spr = global.ds_char_hair3[| global.char_hair_color];break;
    }
    case 3:
    {
    spr = global.ds_char_hair4[| global.char_hair_color];break;
    }
    case 4:
    {
    spr = global.ds_char_hair5[| global.char_hair_color];break;
    }
    case 5:
    {
    spr = global.ds_char_hair6[| global.char_hair_color];break;
    }
    case 6:
    {
    spr = global.ds_char_hair7[| global.char_hair_color];break;
    }
    case 7:
    {
    spr = global.ds_char_hair8[| global.char_hair_color];break;
    }
    case 8:
    {
    spr = global.ds_char_hair9[| global.char_hair_color];break;
    }
}
draw_sprite_ext(spr,image_index,x,y,1,1,image_angle,c_white,1);
}

// Render Water Refill Rate
if ( pl_water_refill &gt; 0 )
{
draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(font_verdana_12);
draw_text_outline(string(pl_water_refill)+"%",x,y-28,c_white,c_black);
}

}

}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render World Objects Part II ( Batches )

if ( !global.game_pause ){
draw_set_color(c_white);draw_set_alpha(1);

// Cooking Object
/*|| Smoke Effect ||*/
if (instance_exists(obj_archetype_cooking)){
with(obj_archetype_cooking){
if ( global.render_gui_page == "none" &amp;&amp; active ){
if(smoke_effect){part_system_drawit(ps_2);}}}}

/*|| Fire Effect ||*/
if (instance_exists(obj_archetype_cooking)){
with(obj_archetype_cooking){
if ( global.render_gui_page == "none" &amp;&amp; active ){
draw_set_blend_mode(bm_add);
if(fire_effect){part_system_drawit(ps_1);}
}}}
draw_set_blend_mode(bm_normal);

// Trees
if (instance_exists(obj_world_tree_1)){
with(obj_world_tree_1){
if ( active == true ){// Draw Transparently If Player Is Behind
w3d_draw_cube_ext(global.texture_treetop1,global.texture_treebark1,x,y,0,(height1*(resource_count/resource_max))+16,32,32);}}
with(obj_world_tree_1){
if ( active == true ){
if ( resource_count &gt;= resource_max ){
w3d_draw_sprite_ext(spr_tree_top1,tree_top_sub,x,y,height1,1,1,tree_top_rot,c_white,tree_top_alpha);}
}}}

// Birds
if (instance_exists(obj_bird1)){
with(obj_bird1){
direction = image_angle;
image_index+=0.1;
draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,c_white,0.85);
//if ( obj_game.m_motionblur ){
//draw_sprite_motionblur(point_distance(x,y,xprevious,yprevious),point_direction(x,y,xprevious,yprevious),x,y,0);}
//else{
//draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,c_white,0.1);}
}}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
