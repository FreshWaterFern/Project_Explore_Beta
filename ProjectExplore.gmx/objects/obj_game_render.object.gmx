<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize World
var width = floor(room_width/128);var height = floor(room_height/128);
global.world_tiles = ds_grid_create(width,height);

window_x = window_get_x();window_y = window_get_y();

global.render_texture_transitions = true;

global.fps_display = true;
global.debug_display = false;
global.ai_display = false;
global.average_fps = fps_real;
status_update_alpha = 0;
status_update_mode = 0;

xx = 0;
yy = 0;
offset = 0;
sz = 0;

// World Transitions And Texutres
enum directions
{
    up = 0,
    down = 1,
    left = 2,
    right = 3,
    diag_ul = 4,
    diag_ur = 5,
    diag_dl = 6,
    diag_dr = 7
}

// FPS Averaging Data Structure
global.fps_list = ds_list_create();

// Decals
global.ai_xdecal = ds_list_create();
global.ai_ydecal = ds_list_create();
global.ai_sdecal = ds_list_create();

decal_fade_time = 0;

item_slot_1 = 0;item_slot_2 = 0;item_slot_3 = 0;item_slot_4 = 0;
item_stack_1 = 0;item_stack_2 = 0;item_stack_3 = 0;item_stack_4 = 0;

// Alpha Variables
clock_alpha = 1;
compass_alpha = 0;
a_morn_col=0.125;
a_morn_sha = 0.35;
a_day_col=0.025;
a_trans1 = 0;
a_trans2 = 0;
a_trans3 = 0;

compass_arrow_angle = 0;

col_orange = make_colour_rgb(210,112,0);

// Load all textures
if ( global.textures_loaded == false )
{
global.texture_grass1 = sprite_get_texture(t_grass1,0);
global.texture_drygrass1 = sprite_get_texture(t_drygrass1,0);
global.texture_concrete1 = sprite_get_texture(t_concrete1,0);
global.texture_treebark1 = background_get_texture(t_treebark1);
global.texture_treebark2 = background_get_texture(t_treebark2);
global.texture_treetop1 = background_get_texture(t_treetop);
global.texture_gravel1 = sprite_get_texture(t_gravel1,0);
global.texture_grassdead1 = sprite_get_texture(t_grassdead1,0);
global.texture_tile1 = sprite_get_texture(t_tile1,0);
global.texture_stones1 = sprite_get_texture(t_stones1,0);
global.texture_stones2 = sprite_get_texture(t_stones2,0);
global.texture_largecrate = background_get_texture(t_largecrate);
global.texture_smallcrate = background_get_texture(t_smallcrate);
global.texture_wood1 = sprite_get_texture(t_wood1,0);
global.texture_wood2 = sprite_get_texture(t_wood4,0);
global.texture_dirt1 = sprite_get_texture(t_dirt1,0);
global.texture_dirt2 = sprite_get_texture(t_dirt2,0);
global.texture_dirt3 = sprite_get_texture(t_dirt3,0);
global.texture_road1 = sprite_get_texture(t_road1,0);
global.texture_road2 = sprite_get_texture(t_road2,0);
global.texture_road3 = sprite_get_texture(t_road3,0);
global.texture_sand1 = sprite_get_texture(t_sand1,0);
global.texture_sand2 = sprite_get_texture(t_sand2,0);
global.texture_sandwet1 = sprite_get_texture(t_sandwet1,0);
global.texture_mossbrick1 = sprite_get_texture(t_mossbrick1,0);

// variables for the transition generation loops
var i = 0;
var transTex;
transTex[directions.up] = t_fade_up;
transTex[directions.down] = t_fade_down;
transTex[directions.left] = t_fade_right;
transTex[directions.right] = t_fade_left;
transTex[directions.diag_ul] = t_fade_ul;
transTex[directions.diag_ur] = t_fade_ur;
transTex[directions.diag_dl] = t_fade_dl;
transTex[directions.diag_dr] = t_fade_dr;
global.trans_cache = ds_grid_create(20,8);
global.trans_id = ds_list_create();

// Grass1
ds_list_add(global.trans_id,0);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_grass1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 0, i] = back;
}

// Drygrass1
ds_list_add(global.trans_id,1);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_drygrass1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 1, i] = back;
}

// Gravel1
ds_list_add(global.trans_id,3);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_gravel1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 3, i] = back;
}

// Grassdead1
ds_list_add(global.trans_id,4);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_grassdead1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 4, i] = back;
}

// Dirt1
ds_list_add(global.trans_id,9);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_dirt1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 9, i] = back;
}

// Dirt2
ds_list_add(global.trans_id,10);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_dirt2);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 10, i] = back;
}

// Sand1
ds_list_add(global.trans_id,15);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_sand1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 15, i] = back;
}

// Sandwet1
ds_list_add(global.trans_id,17);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_sandwet1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 17, i] = back;
}

// Dirt3
ds_list_add(global.trans_id,18);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_dirt3);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 18, i] = back;
}

// Mossbrick1
ds_list_add(global.trans_id,19);
for (i = 0; i &lt; 8; i++) {
    var back = sprite_duplicate(t_mossbrick1);
    var t_back = sprite_duplicate(transTex[i]);
    sprite_set_alpha_from_sprite(back, t_back);
    sprite_delete(t_back);
    global.trans_cache[# 19, i] = back;
}

global.textures_loaded = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Graphics Initialize

application_surface_draw_enable(false);

/*
display_reset(0,obj_game.m_vsync);
ini_open("settings.ini");
global.m_vsync = real(ini_read_string("graphics","vsync","0"));
if ( !ini_key_exists("graphics","vsync") ){ini_write_string("graphics","vsync","0");}
global.m_vignette = real(ini_read_string("graphics","vignette","0"));
if ( !ini_key_exists("graphics","vignette") ){ini_write_string("graphics","vignette","0");}
global.m_blood = real(ini_read_string("graphics","blood","0"));
if ( !ini_key_exists("graphics","blood") ){ini_write_string("graphics","blood","0");}
global.m_particles = real(ini_read_string("graphics","particles","1"));
if ( !ini_key_exists("graphics","particles") ){ini_write_string("graphics","particles","0");}
global.m_res = ini_read_string("graphics","resolution","1280x720");
if ( !ini_key_exists("graphics","resolution") ){ini_write_string("graphics","resolution","1280x720");global.m_res="1280x720";}
global.m_fullscreen = real(ini_read_string("graphics","fullscreen","1"));
if ( !ini_key_exists("graphics","fullscreen") ){ini_write_string("graphics","fullscreen","0");}
ini_close();

    global.window_focus = true;

    var display_w = 0;var display_h = 0;
    if ( global.m_res == "800x600" ){display_w=800;display_h=600;}
    if ( global.m_res == "1024x600" ){display_w=1024;display_h=600;}
    if ( global.m_res == "1024x768" ){display_w=1024;display_h=768;}
    if ( global.m_res == "1152x864" ){display_w=1152;display_h=864;}
    if ( global.m_res == "1280x720" ){display_w=1280;display_h=720;}
    if ( global.m_res == "1280x768" ){display_w=1280;display_h=768;}
    if ( global.m_res == "1280x800" ){display_w=1280;display_h=800;}
    if ( global.m_res == "1280x960" ){display_w=1280;display_h=960;}
    if ( global.m_res == "1280x1024" ){display_w=1280;display_h=1024;}
    if ( global.m_res == "1360x768" ){display_w=1360;display_h=768;}
    if ( global.m_res == "1366x768" ){display_w=1366;display_h=768;}
    if ( global.m_res == "1400x1050" ){display_w=1400;display_h=1050;}
    if ( global.m_res == "1440x900" ){display_w=1440;display_h=900;}
    if ( global.m_res == "1600x900" ){display_w=1600;display_h=900;}
    if ( global.m_res == "1600x1200" ){display_w=1600;display_h=1200;}
    if ( global.m_res == "1680x1050" ){display_w=1680;display_h=1050;}
    if ( global.m_res == "1920x1080" ){display_w=1920;display_h=1080;}
    window_set_size(display_w,display_h);
    if ( global.m_fullscreen == 1 )
    {
    window_set_fullscreen(true);
    }
    else
    {
    window_set_fullscreen(false);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Surfaces
surface_terrain = surface_create(1536,976);
surface_update = true;
xview_prev = 0;
yview_prev = 0;
camera_move = 128;
alpha_blend = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate Console
console_ini();
cursor_tick = 0;
con_window_x = 0;
con_window_y = 0;
con_index = 0;
con_enable = 0;
global.con_window_active = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Day And Night Intialize
global.ambient_light = ds_grid_create(5,417);
light_blend = false;
color_red = 0;
color_green = 0;
color_blue = 0;
alpha = 0;
color_red_blend = 28;
color_green_blend = 31;
color_blue_blend = 54;
alpha_blend = 0;

var a = 0;var r = 0;var g = 0;var b = 0;

// Dawn
for(i=0;i&lt;24;i++)
{
global.ambient_light[#0,i] = 255;global.ambient_light[#1,i] = 229;
global.ambient_light[#2,i] = 209;global.ambient_light[#3,i] = 0.25;
}

// Dawn ==&gt; Day
r = 255;g = 229;b = 209;a = 0.25;
for(i=23;i&lt;63;i++)
{
r -= 0.00625g += 0.625;b += 0.775;a -= 0.0055;
global.ambient_light[#0,i] = r;global.ambient_light[#1,i] = g;
global.ambient_light[#2,i] = b;global.ambient_light[#3,i] = a;
}

// Day
for(i=63;i&lt;169;i++)
{
global.ambient_light[#0,i] = r;global.ambient_light[#1,i] = g;
global.ambient_light[#2,i] = b;global.ambient_light[#3,i] = a;
}

//r = 255;g = 254;b = 232;a = 0;

// Day ==&gt; Dusk
for(i=169;i&lt;250;i++)
{
g -= 0.975;b -= 1.5625;a += 0.003125;
global.ambient_light[#0,i] = 255;global.ambient_light[#1,i] = g;
global.ambient_light[#2,i] = b;global.ambient_light[#3,i] = a;
}

//r = 255;g = 176;b = 107;a = 0.25;

// Dusk ==&gt; Night
for(i=250;i&lt;331;i++)
{
//r -= 0.4125;g -= 0.4625;b -= 1.3375;
a -= 0.0025;alpha_blend += 0.00411;
global.ambient_light[#0,i] = r;global.ambient_light[#1,i] = g;
global.ambient_light[#2,i] = b;global.ambient_light[#3,i] = a;
global.ambient_light[#4,i] = alpha_blend;
}

//r = 255;g = 176;b = 107;a = 0.35;

// Night ==&gt; Morning
for(i=331;i&lt;417;i++)
{
g += 0.62352;b += 1.2;
if ( i &gt;= 380 ){a += 0.00472;alpha_blend -= 0.0125;}else{alpha_blend += 0.00208;}
global.ambient_light[#0,i] = r;global.ambient_light[#1,i] = g;
global.ambient_light[#2,i] = b;global.ambient_light[#3,i] = a;
global.ambient_light[#4,i] = alpha_blend;
}

//alpha_blend = 0.45;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Console Index Control
if ( DEV_MODE )
{
if ( global.con_window_active )
{
if ( keyboard_check_pressed(vk_up) )
{
    con_index --;
}
if ( keyboard_check_pressed(vk_down) )
{
    con_index ++;
}

if ( mouse_wheel_up() == true )
{
    con_index --;
}
if ( mouse_wheel_down() == true )
{
    con_index ++;
}

if ( con_index &lt; 0 )
{
    con_index = 0;
}
if ( con_index &gt; 12 )
{
    con_index = 12;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor Tick
if ( DEV_MODE )
{
cursor_tick ++;
if ( cursor_tick &gt; 30 )
{
cursor_tick = 0;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug Controls &amp; FPS Stack
if ( instance_exists(obj_player) == true )
{
x = obj_player.x;
y = obj_player.y;
if ( camera_move &gt; 0 )
{obj_camera.y-=256;camera_move=0;}
}
ds_list_add(global.fps_list,fps_real);
if ( ds_list_size(global.fps_list) == 15 )
{
global.average_fps = mean(ds_list_find_value(global.fps_list,0),ds_list_find_value(global.fps_list,1),ds_list_find_value(global.fps_list,2),ds_list_find_value(global.fps_list,3),ds_list_find_value(global.fps_list,4),ds_list_find_value(global.fps_list,5),ds_list_find_value(global.fps_list,6),ds_list_find_value(global.fps_list,7),ds_list_find_value(global.fps_list,8),ds_list_find_value(global.fps_list,9),ds_list_find_value(global.fps_list,10),ds_list_find_value(global.fps_list,11),ds_list_find_value(global.fps_list,12),ds_list_find_value(global.fps_list,13),ds_list_find_value(global.fps_list,14));
ds_list_clear(global.fps_list);
}

if ( keyboard_check_pressed(vk_f1) == true )
{
    if ( global.fps_display == true )
    {
    global.fps_display = false;
    }
    else
    {
    global.fps_display = true;
    }
}

if ( keyboard_check_pressed(vk_f2) == true )
{
    if ( global.debug_display == true )
    {
    global.debug_display = false;
    }
    else
    {
    global.debug_display = true;
    }
}

if ( keyboard_check_pressed(vk_f3) == true )
{
    if ( global.ai_display == true )
    {
    global.ai_display = false;
    }
    else
    {
    global.ai_display = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(surface_terrain)
{
surface_free(surface_terrain)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);draw_set_alpha(1);
draw_rectangle(0,0,window_get_width(),window_get_height(),false);
draw_set_color(c_white);
//draw_background(global.bg_menu,(window_get_width()/2)-(background_get_width(global.bg_menu)/2),(window_get_height()/2)-(background_get_height(global.bg_menu)/2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Version &amp; Debug Display

surface_set_target(application_surface);

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(font_verdana_12);
draw_text(8,8,GAME_VERSION);
if ( global.fps_display == true &amp;&amp; global.debug_display == true )
{
draw_text(8,24,"FPS: "+string(global.average_fps));
draw_text(8,40,"Chunks X: "+string(global.chunk_x)+" Y: "+string(global.chunk_y));
draw_text(8,56,"Object Count: "+string(instance_count));
}

if ( global.fps_display == true &amp;&amp; global.debug_display == false )
{
draw_text(8,24,"FPS: "+string(global.average_fps));
}

if ( global.fps_display == false &amp;&amp; global.debug_display == true )
{
draw_text(8,24,"Chunks X: "+string(global.chunk_x)+" Y: "+string(global.chunk_y));
draw_text(8,40,"Object Count: "+string(instance_count));
}

if ( DEV_MODE )
{
show_debug_overlay(true);
}

surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// New Day And Night Shading
if ( !global.game_pause ){
var time = global.world_time; 

// index of day = ( x / 20 ) * 416

if ( time != 0 )
{
color_red = global.ambient_light[# 0, floor((time/20)*416)];
color_green = global.ambient_light[# 1, floor((time/20)*416)];
color_blue = global.ambient_light[# 2, floor((time/20)*416)];
alpha = global.ambient_light[# 3, floor((time/20)*416)];}
else
{alpha = global.ambient_light[# 3, 0];}

if ( global.weather_mode == 1 )
{
draw_set_alpha(0.15+0.1);
draw_set_color(c_dkgray);
draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0],false);
}

draw_set_alpha(alpha+0.1);
draw_set_color(make_color_rgb(color_red,color_green,color_blue));
draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0],false);
if ( light_blend == true )
{
draw_set_alpha(global.ambient_light[# 4, floor((time/20)*416)]+0.1);
draw_set_color(make_color_rgb(color_red_blend,color_green_blend,color_blue_blend));
draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0],false);
if ( floor((time/20)*416) &lt;! 380 ){light_blend=false;}
}
else
{if ( floor((time/20)*416) &gt; 250 &amp;&amp; floor((time/20)*416) &lt; 400 ){light_blend=true;}}

draw_set_alpha(1);draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Status Update GUI

if ( global.game_pause == false )
{
surface_set_target(application_surface);
draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
draw_set_color(c_white);draw_set_alpha(status_update_alpha);
if ( ds_list_size(global.status_list) &gt; 0 ){
if ( global.status_list[| 0] != undefined or global.status_list[| 0] != "" )
{
if ( status_update_mode == 0 ){if ( status_update_alpha &lt; 1 ){status_update_alpha += 0.02;}else{status_update_mode=3;}}else
{if(status_update_mode &lt;= 1){status_update_alpha -= 0.02;if(status_update_alpha &lt;= 0){status_update_mode = 0;ds_list_delete(global.status_list,0);}}else{status_update_mode -= 0.01;}}
draw_text_outline(string(global.status_list[| 0]),view_wview[0]/2,view_hview[0]-128,c_white,c_black);
}}
draw_set_alpha(1);draw_set_color(c_white);

// Logic Update
switch(round(obj_game.c_food)){
case 100:{if(global.status_map[? "hunger_100"] &lt;= 0){ds_list_add(global.status_list,choose("You don't feel hungry anymore","You are definitely not hungry anymore","You feel well fed"));global.status_map[? "hunger_100"] = 7200;}break;}
case 75:{if(global.status_map[? "hunger_75"] &lt;= 0){ds_list_add(global.status_list,choose("You may need to eat soon","You could use a snack","You wouldn't mind a snack"));global.status_map[? "hunger_75"] = 7200;}break;}
case 50:{if(global.status_map[? "hunger_50"] &lt;= 0){ds_list_add(global.status_list,choose("You feel a bit hungry","You are feeling peckish","You might need a meal soon"));global.status_map[? "hunger_50"] = 7200;}break;}
case 25:{if(global.status_map[? "hunger_25"] &lt;= 0){ds_list_add(global.status_list,choose("You're hungry","You feel starved","You feel very hungry"));global.status_map[? "hunger_25"] = 7200;}break;}
case 10:{if(global.status_map[? "hunger_10"] &lt;= 0){ds_list_add(global.status_list,choose("You are starving","You really need food","You desperately need a meal"));global.status_map[? "hunger_10"] = 7200;}break;}
}

if ( round(obj_game.c_thirst) &gt;= 100 ){
if(global.status_map[? "thirst_100"] &lt;= 0){ds_list_add(global.status_list,choose("You feel very hydrated","Your thirst is quenched","You are definitely not thirsty anymore"));global.status_map[? "thirst_100"] = 7200;}}
if ( round(obj_game.c_thirst) &gt; 50 &amp;&amp; round(obj_game.c_thirst) &lt;= 75 ){
if(global.status_map[? "thirst_75"] &lt;= 0){ds_list_add(global.status_list,choose("You may need to drink soon","You could use a drink","You wouldn't mind a drink"));global.status_map[? "thirst_75"] = 7200;}}
if ( round(obj_game.c_thirst) &gt; 25 &amp;&amp; round(obj_game.c_thirst) &lt;= 50 ){
if(global.status_map[? "thirst_50"] &lt;= 0){ds_list_add(global.status_list,choose("You feel a bit thirsty","You are feeling a bit thirsty","You might need a drink soon"));global.status_map[? "thirst_50"] = 7200;}}
if ( round(obj_game.c_thirst) &gt; 15 &amp;&amp; round(obj_game.c_thirst) &lt;= 25 ){
if(global.status_map[? "thirst_25"] &lt;= 0){ds_list_add(global.status_list,choose("You are thirsty","You're thirsty","You feel very thirsty"));global.status_map[? "thirst_25"] = 7200;}}
if ( round(obj_game.c_thirst) &gt; 0 &amp;&amp; round(obj_game.c_thirst) &lt;= 10 ){
if(global.status_map[? "thirst_10"] &lt;= 0){ds_list_add(global.status_list,choose("You are extremely thirsty","You really need a drink","You desperately need a drink"));global.status_map[? "thirst_10"] = 7200;}}


if ( round(obj_game.c_sanity) &gt; 50 &amp;&amp; round(obj_game.c_sanity) &lt;= 75 ){
if(global.status_map[? "sanity_75"] &lt;= 0){ds_list_add(global.status_list,choose("You feel like something is watching you","You are feeling paranoid","You feel like something is following you"));global.status_map[? "sanity_75"] = 7200;}}
if ( round(obj_game.c_sanity) &gt; 25 &amp;&amp; round(obj_game.c_sanity) &lt;= 50 ){
if(global.status_map[? "sanity_50"] &lt;= 0){ds_list_add(global.status_list,choose("You are feeling very paranoid","You feel like something is nearby","You feel like you are being watched"));global.status_map[? "sanity_50"] = 7200;}}
if ( round(obj_game.c_sanity) &gt; 15 &amp;&amp; round(obj_game.c_sanity) &lt;= 25 ){
if(global.status_map[? "sanity_25"] &lt;= 0){ds_list_add(global.status_list,choose("You feel like something is next to you","You like something is terribley wrong","You feel in danger of something"));global.status_map[? "sanity_25"] = 7200;}}
if ( round(obj_game.c_sanity) &gt; 0 &amp;&amp; round(obj_game.c_sanity) &lt;= 10 ){
if(global.status_map[? "sanity_10"] &lt;= 0){ds_list_add(global.status_list,choose("You feel extremely paranoid","You feel lost and confused","You feel like someone really wants to hurt you"));global.status_map[? "sanity_10"] = 7200;}}


if ( round(obj_game.c_health) &gt;= 100 ){
if(global.status_map[? "health_100"] &lt;= 0){ds_list_add(global.status_list,choose("You feel great","You feel very healthy","You are feeling great"));global.status_map[? "health_100"] = 7200;}}
if ( round(obj_game.c_health) &gt; 50 &amp;&amp; round(obj_game.c_health) &lt;= 75 ){
if(global.status_map[? "health_75"] &lt;= 0){ds_list_add(global.status_list,choose("You don't feel too good","You don't feel alright","You don't feel very healthy"));global.status_map[? "health_75"] = 7200;}}
if ( round(obj_game.c_health) &gt; 25 &amp;&amp; round(obj_game.c_health) &lt;= 50 ){
if(global.status_map[? "health_50"] &lt;= 0){ds_list_add(global.status_list,choose("You feel you should take time to heal","You do not feel very health","You feel unhealthy"));global.status_map[? "health_50"] = 7200;}}
if ( round(obj_game.c_health) &gt; 15 &amp;&amp; round(obj_game.c_health) &lt;= 25 ){
if(global.status_map[? "health_25"] &lt;= 0){ds_list_add(global.status_list,choose("You are in serious pain","You feel terrible","You feel very unhealthy"));global.status_map[? "health_25"] = 7200;}}
if ( round(obj_game.c_health) &gt; 0 &amp;&amp; round(obj_game.c_health) &lt;= 10 ){
if(global.status_map[? "health_10"] &lt;= 0){ds_list_add(global.status_list,choose("You feel like passing out","You feel extremely unhealthy","You are in extreme pain"));global.status_map[? "health_10"] = 7200;}}

switch(global.weather_mode){
case 1:{if(global.status_map[? "weather_rain"] &lt;= 0){ds_list_add(global.status_list,choose("You need to make sure to stay warm","The rain is cold","You should keep warm"));global.status_map[? "weather_rain"] = 10800;}break;}
case 2:{if(global.status_map[? "weather_rain"] &lt;= 0){ds_list_add(global.status_list,choose("You need to make sure to stay warm","The rain is cold","You should keep warm"));global.status_map[? "weather_rain"] = 10800;}break;}
case 3:{if(global.status_map[? "weather_rain"] &lt;= 0){ds_list_add(global.status_list,choose("You need to make sure to stay warm","The rain is cold","You should keep warm"));global.status_map[? "weather_rain"] = 10800;}break;}
case 4:{if(global.status_map[? "weather_dust"] &lt;= 0){ds_list_add(global.status_list,choose("You should take cover in a shelter","The dust makes it hard for you to breath","You should wait the storm out in a shelter"));global.status_map[? "weather_dust"] = 10800;}break;}
case 5:{if(global.status_map[? "weather_dust"] &lt;= 0){ds_list_add(global.status_list,choose("You should take cover in a shelter","The dust makes it hard for you to breath","You should wait the storm out in a shelter"));global.status_map[? "weather_dust"] = 10800;}break;}
case 6:{if(global.status_map[? "weather_dust"] &lt;= 0){ds_list_add(global.status_list,choose("You should take cover in a shelter","The dust makes it hard for you to breath","You should wait the storm out in a shelter"));global.status_map[? "weather_dust"] = 10800;}break;}
}

global.status_map[? "hunger_100"] --;global.status_map[? "hunger_75"] --;global.status_map[? "hunger_50"] --;global.status_map[? "hunger_25"] --;global.status_map[? "hunger_10"] --;global.status_map[? "hunger_0"] --;
global.status_map[? "thirst_100"] --;global.status_map[? "thirst_75"] --;global.status_map[? "thirst_50"] --;global.status_map[? "thirst_25"] --;global.status_map[? "thirst_10"] --;global.status_map[? "thirst_0"] --;
global.status_map[? "health_100"] --;global.status_map[? "health_75"] --;global.status_map[? "health_50"] --;global.status_map[? "health_25"] --;global.status_map[? "health_10"] --;
global.status_map[? "sanity_75"] --;global.status_map[? "sanity_50"] --;global.status_map[? "sanity_25"] --;global.status_map[? "sanity_10"] --;
global.status_map[? "weather_rain"] --;global.status_map[? "weather_dust"] --;
surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render GUI

if ( global.game_pause == false )
{
surface_set_target(application_surface);
if ( global.render_gui_1 == true ){
    var offset_tab = 0;
    var offset_x = 0;var offset_y = 0;
    var spr = 0;
    var view_xcenter = view_wview[0]/2;
    var view_ybottom = view_hview[0];
    var health_length = min(obj_game.c_health/100,1)*83;
    var food_length = min(obj_game.c_food/100,1)*83;
    var sanity_length = min(obj_game.c_sanity/100,1)*81;
    draw_set_color(c_white);draw_set_font(font_gulim_8);draw_set_halign(fa_left);draw_set_valign(fa_middle);draw_set_alpha(obj_game.hotbar_alpha);
    if ( obj_game.v_hotbar_set == 0 ){draw_sprite_ext(spr_inventory_slot,1,view_xcenter-72-(offset_x*3),view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}else{draw_sprite_ext(spr_inventory_slot,0,view_xcenter-72-(offset_x*3),view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    if ( obj_game.v_hotbar_set == 1 ){draw_sprite_ext(spr_inventory_slot,1,view_xcenter-24-offset_x,view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}else{draw_sprite_ext(spr_inventory_slot,0,view_xcenter-24-offset_x,view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    if ( obj_game.v_hotbar_set == 2 ){draw_sprite_ext(spr_inventory_slot,1,view_xcenter+24+offset_x,view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}else{draw_sprite_ext(spr_inventory_slot,0,view_xcenter+24+offset_x,view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    if ( obj_game.v_hotbar_set == 3 ){draw_sprite_ext(spr_inventory_slot,1,view_xcenter+72+(offset_x*3),view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}else{draw_sprite_ext(spr_inventory_slot,0,view_xcenter+72+(offset_x*3),view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    item_slot_1 = global.c_inventory_pack[#0,4];item_slot_2 = global.c_inventory_pack[#1,4];item_slot_3 = global.c_inventory_pack[#2,4];item_slot_4 = global.c_inventory_pack[#3,4];
    item_stack_1 = global.c_stack_pack[#0,4];item_stack_2 = global.c_stack_pack[#1,4];item_stack_3 = global.c_stack_pack[#2,4];item_stack_4 = global.c_stack_pack[#3,4];
    draw_set_alpha(1);
    
    // Draw World Clock
    if ( global.render_clock_1 == true )
    {clock_alpha += 0.07;}else{clock_alpha -= 0.07;}
    if ( clock_alpha &lt; 0 ){clock_alpha = 0;}if ( clock_alpha &gt; 1 ){clock_alpha = 1;}
    
    // Get image_angle for arrow
    draw_set_alpha(clock_alpha);
    var arrow_angle = (global.world_time/-20)*360+90;
    draw_sprite(spr_clock,0,view_wview[0]-34,34);
    draw_sprite_ext(spr_clock_arrow,0,view_wview[0]-34,34,1,1,arrow_angle,c_white,clock_alpha);
    draw_set_alpha(1);
    
    // Draw Compass
    
    if ( obj_player.compass_equip )
    {
        compass_alpha += 0.07;
    }
    else
    {
        compass_alpha -= 0.07;
    }
    if ( compass_alpha &lt; 0 )
    {
        compass_alpha = 0;
    }
    if ( compass_alpha &gt; 1 )
    {
        compass_alpha = 1;
    }
    if ( obj_player.compass_equip &amp;&amp; compass_alpha &gt; 0 ){
    // Get image_angle for arrow
    draw_set_alpha(compass_alpha);
    if ( global.waypoint_x == 0 &amp;&amp; global.waypoint_y == 0 )
    {compass_arrow_angle++;if(compass_arrow_angle&gt;=360){arrow_angle=0;}}
    else{compass_arrow_angle = point_direction(obj_player.x,obj_player.y,global.waypoint_x,global.waypoint_y);}
    draw_sprite(spr_compass,0,view_wview[0]-104,34);
    draw_sprite_ext(spr_compass_arrow,0,view_wview[0]-104,34,1,1,compass_arrow_angle,c_white,compass_alpha);
    draw_set_alpha(1);
    }
    
    // Draw all the text at once
    draw_sprite(spr_hud_base,0,view_wview[0]-256,view_hview[0]-81);draw_sprite(spr_hud_base,0,view_wview[0]-128,view_hview[0]-81);
    draw_sprite(spr_hud_base,0,view_wview[0]-256,view_hview[0]-27);draw_sprite(spr_hud_base,0,view_wview[0]-128,view_hview[0]-27);
    draw_sprite(spr_hud_health,0,view_wview[0]-256+30,view_hview[0]-81);draw_sprite(spr_hud_sanity,0,view_wview[0]-128+30,view_hview[0]-81);
    draw_sprite(spr_hud_hunger,0,view_wview[0]-256+30,view_hview[0]-27);draw_sprite(spr_hud_thirst,0,view_wview[0]-128+30,view_hview[0]-27);
    draw_set_font(font_gulim_22);draw_set_halign(fa_center);
    draw_text(view_wview[0]-256+90,view_hview[0]-81,string(round(obj_game.c_health)));draw_text(view_wview[0]-128+90,view_hview[0]-81,string(round(obj_game.c_sanity)));
    draw_text(view_wview[0]-256+90,view_hview[0]-27,string(round(obj_game.c_food)));draw_text(view_wview[0]-128+90,view_hview[0]-27,string(round(obj_game.c_thirst)));
    draw_set_font(font_gulim_12);draw_set_halign(fa_center);draw_set_valign(fa_middle);
    var temperature = obj_game.c_temperature;if ( global.render_temp == 1 ){temperature = (temperature-32)*0.5555555555555556;}
    
    // Draw external sprites all at once
    if(item_slot_1&gt;0){if ( global.item_data[#item_slot_1,4] != 4 ){spr = global.item_data[#item_slot_1,2];}else{spr = ds_list_find_value(global.item_data[#item_slot_1,2],0);}
    draw_image_ext(spr,0,view_xcenter-72-(offset_x*3),view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    if(item_slot_2&gt;0){if ( global.item_data[#item_slot_2,4] != 4 ){spr = global.item_data[#item_slot_2,2];}else{spr = ds_list_find_value(global.item_data[#item_slot_2,2],0);}
    draw_image_ext(spr,0,view_xcenter-24-offset_x,view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    if(item_slot_3&gt;0){if ( global.item_data[#item_slot_3,4] != 4 ){spr = global.item_data[#item_slot_3,2];}else{spr = ds_list_find_value(global.item_data[#item_slot_3,2],0);}
    draw_image_ext(spr,0,view_xcenter+24+offset_x,view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    if(item_slot_4&gt;0){if ( global.item_data[#item_slot_4,4] != 4 ){spr = global.item_data[#item_slot_4,2];}else{spr = ds_list_find_value(global.item_data[#item_slot_4,2],0);}
    draw_image_ext(spr,0,view_xcenter+72+(offset_x*3),view_ybottom-25-offset_y,1+global.tablet_scaling,1+global.tablet_scaling,0,c_white,obj_game.hotbar_alpha);}
    
    if ( clock_alpha == 0 )
    {draw_text_outline(string(round(temperature)),view_wview[0]-40,16,c_white,c_black);draw_sprite(spr_degree_sign,global.render_temp,view_wview[0]-40+string_width(string(round(temperature))),16);}
    else
    {draw_text_outline(string(round(temperature)),view_wview[0]-40,76,c_white,c_black);draw_sprite(spr_degree_sign,global.render_temp,view_wview[0]-40+string_width(string(round(temperature))),76);}
    draw_set_color(c_white); draw_set_font(font_gulim_8);draw_set_halign(fa_left);draw_set_valign(fa_middle);draw_set_alpha(obj_game.hotbar_alpha);
    if(item_stack_1 &gt; 1){draw_text_outline(string(item_stack_1),view_xcenter-86-(offset_x*3),view_ybottom-36-offset_y,c_white,c_black);}
    if(item_stack_2 &gt; 1){draw_text_outline(string(item_stack_2),view_xcenter-38-offset_x,view_ybottom-36-offset_y,c_white,c_black);}
    if(item_stack_3 &gt; 1){draw_text_outline(string(item_stack_3),view_xcenter+10+offset_x,view_ybottom-36-offset_y,c_white,c_black);}
    if(item_stack_4 &gt; 1){draw_text_outline(string(item_stack_4),view_xcenter+58+(offset_x*3),view_ybottom-36-offset_y,c_white,c_black);}
    
    // Draw Passives
    var offset_y = 0;
    if ( global.pl_bleeding &gt; 0 ){
    draw_sprite(spr_passive_bleeding,0,view_wview[0]-18,view_hview[0]-72-offset_y+offset_tab-96);
    draw_set_font(font_gulim_8);draw_set_halign(fa_right);draw_set_valign(fa_middle);draw_set_color(c_white);
    var str_passive1 = "Health Loss: 0.01%";
    draw_text_outline(str_passive1,view_wview[0]-4,view_hview[0]-40-offset_y+offset_tab-96,c_white,c_black);
    draw_set_color(c_white);draw_set_alpha(1);
    offset_y = 64;}
    
    if ( obj_player.pl_nearlight == true ){
    draw_sprite(spr_passive_light,0,view_wview[0]-18,view_hview[0]-72-offset_y+offset_tab-96);
    draw_set_font(font_gulim_8);draw_set_halign(fa_right);draw_set_valign(fa_middle);draw_set_color(c_white);
    var str_passive1 = "Insanity Reduction: "+string_delete(string(1-obj_game.v_lightlevel),1,2)+"%";
    draw_text_outline(str_passive1,view_wview[0]-4,view_hview[0]-40-offset_y+offset_tab-96,c_white,c_black);
    draw_set_color(c_white);draw_set_alpha(1);
    offset_y = 128;}
    
    if ( global.pl_sickness &gt; 0 ){
    draw_sprite(spr_passive_sickness,0,view_wview[0]-18,view_hview[0]-72-offset_y+offset_tab-96);
    draw_set_font(font_gulim_8);draw_set_halign(fa_right);draw_set_valign(fa_middle);draw_set_color(c_white);
    var str_passive1 = "Body Temperature: +10";
    draw_text_outline(str_passive1,view_wview[0]-4,view_hview[0]-40-offset_y+offset_tab-96,c_white,c_black);
    draw_set_color(c_white);draw_set_alpha(1);
    offset_y = 192;}
}

if ( global.render_gui_page == "inventory" )
{
    var view_xcenter = view_wview[0]/2;var view_ycenter = view_hview[0]/2;
    draw_set_alpha(0.8);draw_set_color(c_black);
    draw_rectangle(0,0,view_wview[0],view_hview[0],false);
    draw_set_alpha(1);draw_set_color(c_white);
    draw_set_font(font_gulim_12);draw_set_valign(fa_middle);draw_set_halign(fa_left);
    
    // Drop Item Box
    if ( global.v_item_drop == false )
    {draw_set_color(c_dkgray);}else{draw_set_color(c_gray)};
    draw_set_halign(fa_center);
    if ( global.tablet_mode == 0 ){draw_rectangle(view_xcenter+184,view_ycenter-70,view_xcenter+296,view_ycenter+128,false);}else
    {draw_rectangle(view_xcenter+552,view_ycenter-70,view_xcenter+640,view_ycenter+128,false);}
    draw_set_color(c_white);
    if ( global.tablet_mode == 0 ){draw_text(view_xcenter+240,view_ycenter-82,"Drop Item");}else
    {draw_text(view_xcenter+576,view_ycenter-82,"Drop Item");}
}

if ( global.render_gui_page == "stats" )
{
    var view_xcenter = view_wview[0]/2;
    var view_ycenter = view_hview[0]/2;
    draw_set_alpha(0.8);
    draw_set_color(c_black);
    draw_rectangle(0,0,view_wview[0],view_hview[0],false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(font_gulim_12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    // Draw Stats
    draw_set_font(font_gulim_28);
    draw_text(view_xcenter,view_ycenter-288,"Stats");
    draw_line_width(view_xcenter-96,view_ycenter-288+(string_height("Stats")/2)+4,view_xcenter+96,view_ycenter-288+(string_height("Stats")/2)+4,3);
    draw_set_font(font_gulim_12);
    //draw_set_halign(fa_left);
    draw_text(view_xcenter,view_ycenter+32,"Rippers Killed: "+string(global.rippers_killed));
    draw_text(view_xcenter,view_ycenter,"Stalkers Killed: "+string(global.stalkers_killed));
    draw_text(view_xcenter,view_ycenter-32,"Rocks Broken: "+string(global.rocks_cut));
    draw_text(view_xcenter,view_ycenter-64,"Trees Cut: "+string(global.trees_cut));
    draw_text(view_xcenter,view_ycenter-96,"Days Survived: "+string(global.world_days));
    draw_text(view_xcenter,view_ycenter-128,"Distance Travelled: "+string((global.distance_travelled/4)/3280.84)+"km");
    draw_text(view_xcenter,view_ycenter-160,"Bucks Killed: "+string(global.bucks_killed));
    draw_text(view_xcenter,view_ycenter-192,"Wolves Killed: "+string(global.wolves_killed));
    draw_text(view_xcenter,view_ycenter-224,"Bears Killed: "+string(global.bears_killed));
}

surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render Console Window &amp; Handle Mouse Input

if ( keyboard_check_pressed(192) ){
if ( con_enable ){con_enable = false;}else{con_enable = true;}
}

if ( con_enable ){
surface_set_target(application_surface);
if ( global.con_window_active == true )
{
draw_set_alpha(0.3);
}
else
{
draw_set_alpha(0.1);
}
draw_set_color(c_black);
draw_rectangle(con_window_x,con_window_y,con_window_x+324,con_window_y+232,false);
draw_set_alpha(1);
draw_set_font(font_gulim_8);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_color(c_white);
if ( global.con_window_active == true )
{
if ( cursor_tick &lt; 12 )
{
draw_line_width(con_window_x+string_width(keyboard_string)+8,con_window_y+216,con_window_x+string_width(keyboard_string)+8,con_window_y+228,2);
}
}
if ( global.con_window_active == true )
{
draw_text(con_window_x+8,con_window_y+222,keyboard_string);
}
var i = ds_list_size(con_text)-1;
var lines = 1;
repeat(16)
{
    if ( i &gt;= 0 )
    {
    draw_text(con_window_x+8,con_window_y+222-((lines+con_index)*12),string(ds_list_find_value(con_text,i)));
    lines ++;
    }
    i --;
}

// Code Execution
if ( global.con_window_active == true )
{
if ( keyboard_check_pressed(vk_enter) )
{
console_execute_line(keyboard_string);keyboard_string = "";
}
}

// Mouse Movement Of Window
if ( mouse_x &gt; con_window_x+view_xview[0] &amp;&amp; mouse_x &lt; con_window_x+view_xview[0]+324 &amp;&amp; mouse_y &gt; con_window_y+view_yview[0] &amp;&amp; mouse_y &lt; con_window_y+view_yview[0]+232 )
{
if ( mouse_check_button(mb_right) )
{
con_window_x = mouse_x-view_xview[0]-162;con_window_y = mouse_y-view_yview[0]-116;
surface_reset_target();exit;
}
if ( mouse_check_button(mb_left) )
{
global.con_window_active = true;keyboard_string="";
surface_reset_target();exit;
}
}
else
{
if ( mouse_check_button(mb_left) )
{
keyboard_string = "";
global.con_window_active = false;
}
}
surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prepare Surface
/// Generate World Textures &amp; Decals
//surface_update = true
// the top left coord, 128 outside the view, aligned to a 128x128 grid
sz=128;
offset=2*sz; // how many tiles in each direction extra we are placing, just change the 1*
 
xx=((view_xview div sz)*sz)-offset;
yy=((view_yview div sz)*sz)-offset;
 
if ( (xx != xview_prev) || (yy != yview_prev) ){
    surface_update = true;
    xview_prev=xx;
    yview_prev=yy;
}

if (!surface_exists(surface_terrain)){
surface_terrain = surface_create(view_wview+(offset*2),view_hview+(offset*2));surface_update = true;}

// Check these things for possible surface loss.
if (global.render_world_tiles &amp;&amp; surface_update){
surface_update = false;
 
   
surface_set_target(surface_terrain);
draw_clear_alpha(0,0); //this is to make sure no residual stuff is placed on the surface (it happens)
 
 
var r,i,inst, iCoord, rCoord;
var xwview = (xx+view_wview+(offset*2)) div sz;
var yhview = (yy+view_hview+(offset*2)) div sz;
var width = ds_grid_width(global.world_tiles)-1;
var height = ds_grid_height(global.world_tiles)-1;

var x2,y2; // these are the GRID coords
x2=xx div sz;
y2=yy div sz;
 
 
for (i=x2; i&lt;=xwview; i++){
    iCoord = ((i-x2)*sz);
   
    for(r=y2; r&lt;=yhview; r++){
        rCoord = ((r-y2)*sz);
       draw_enable_alphablend(false);alpha_blend=0;
        //Start Check For Specific Terrain
        if ( i &gt; -1 &amp;&amp; i &lt;= width &amp;&amp; r &gt; -1 &amp;&amp; r &lt;= height ){
        switch( ds_grid_get(global.world_tiles,i,r))
        {
            case 0:
            {
                draw_sprite(t_grass1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 1:
            {
                draw_sprite(t_drygrass1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 2:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_concrete1,0,iCoord,rCoord);
                break;
            }
            case 3:
            {
                draw_sprite(t_gravel1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 4:
            {
                draw_sprite(t_grassdead1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 5:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_tile1,0,iCoord,rCoord);
                break;
            }
            case 6:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_stones1,0,iCoord,rCoord);
                break;
            }
            case 7:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_stones2,0,iCoord,rCoord);
                break;
            }
            case 8:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_wood1,0,iCoord,rCoord);
                break;
            }
            case 9:
            {
                draw_sprite(t_dirt1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 10:
            {
                draw_sprite(t_dirt2,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 11:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_wood2,0,iCoord,rCoord);
                break;
            }
            case 12:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_road1,0,iCoord,rCoord);
                break;
            }
            case 13:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_road2,0,iCoord,rCoord);
                break;
            }
            case 14:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_road3,0,iCoord,rCoord);
                break;
            }
            case 15:
            {
                draw_sprite(t_sand1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 16:
            {
                if(alpha_blend==1){draw_enable_alphablend(false);alpha_blend=0;}
                draw_sprite(t_sand2,0,iCoord,rCoord);
                break;
            }
            case 17:
            {
                draw_sprite(t_sandwet1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 18:
            {
                draw_sprite(t_dirt3,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
            case 19:
            {
                draw_sprite(t_mossbrick1,0,iCoord,rCoord);
                if ( global.render_texture_transitions == true )
                {texture_transition(i,r,iCoord,rCoord);}
                break;
            }
        }
    }
        //End Terrain Generation
    }
}

draw_enable_alphablend(true);

surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render World Textures &amp; Terrain Placement
if ( global.render_world_tiles == true )
{
if ( surface_exists(surface_terrain) )
{
// Terrain
draw_surface(surface_terrain,((view_xview div 128)*128)-128,((view_yview div 128)*128)-128);
}

// Render Decals
decal_handle();

// Terrain Tiles
if ( instance_exists(obj_player) ){
if ( obj_player.v_item_equipped &gt; 0 ){
if ( global.item_data[#obj_player.v_item_equipped,4] == 7 or global.item_data[#obj_player.v_item_equipped,4] == 6 ){
draw_set_color(c_green);draw_set_alpha(0.5);
var get_x = floor(obj_player.x/128)*128;
var get_y = floor(obj_player.y/128)*128;
draw_rectangle(get_x,get_y,get_x+128,get_y+128,false);
draw_set_color(c_white);draw_set_alpha(1);
}}
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
